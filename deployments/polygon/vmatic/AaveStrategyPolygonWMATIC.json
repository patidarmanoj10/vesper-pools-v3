{
  "address": "0x2B63A64693fb0ade57ac5C364861c14a56f427bB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_previousProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newProvider",
          "type": "address"
        }
      ],
      "name": "UpdatedAddressesProvider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveAddressesProvider",
      "outputs": [
        {
          "internalType": "contract AaveLendingPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveIncentivesController",
      "outputs": [
        {
          "internalType": "contract AaveIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveLendingPool",
      "outputs": [
        {
          "internalType": "contract AaveLendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveProtocolDataProvider",
      "outputs": [
        {
          "internalType": "contract AaveProtocolDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressListFactory",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddressesProvider",
          "type": "address"
        }
      ],
      "name": "updateAddressesProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc054747f154e99ada0e440d310f9e7f82feeb86cab83ae6f0dd6d10af38c6cd",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x2B63A64693fb0ade57ac5C364861c14a56f427bB",
    "transactionIndex": 36,
    "gasUsed": "3393362",
    "logsBloom": "0x
    "blockHash": "0xf0319908e5a9ce9b1ff7ccc14542342769d2209cafacc68f19de3f8521d19bfc",
    "transactionHash": "0xbc054747f154e99ada0e440d310f9e7f82feeb86cab83ae6f0dd6d10af38c6cd",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 22026667,
        "transactionHash": "0xbc054747f154e99ada0e440d310f9e7f82feeb86cab83ae6f0dd6d10af38c6cd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000df826ff6518e609e4cee86299d40611c148099d5",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000169ab57c2211800000000000000000000000000000000000000000000000005b698185fd0d1373f0000000000000000000000000000000000000000000096c6d31ff8f29297b734000000000000000000000000000000000000000000000005b52e6d080eb01f3f0000000000000000000000000000000000000000000096c6d489a44a54b8cf34",
        "logIndex": 242,
        "blockHash": "0xf0319908e5a9ce9b1ff7ccc14542342769d2209cafacc68f19de3f8521d19bfc"
      }
    ],
    "blockNumber": 22026667,
    "cumulativeGasUsed": "19495740",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x329846f9e19dAa7fD9844065a62eD01BCf63Cf69",
    "0xefe48370DB8f8Ee343f4f24Ee0B09cC4A8FC3D76"
  ],
  "solcInputHash": "f9d9c8d41405aa17a0f0e534dcf35fdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newProvider\",\"type\":\"address\"}],\"name\":\"UpdatedAddressesProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveAddressesProvider\",\"outputs\":[{\"internalType\":\"contract AaveLendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveIncentivesController\",\"outputs\":[{\"internalType\":\"contract AaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"contract AaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProvider\",\"outputs\":[{\"internalType\":\"contract AaveProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddressesProvider\",\"type\":\"address\"}],\"name\":\"updateAddressesProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"init(address)\":{\"params\":{\"_addressListFactory\":\"To support same code in eth side chain, user _addressListFactory as param mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291 avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54\"}},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"aToken and collateral are 1:1\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateAddressesProvider(address)\":{\"details\":\"We will use new address to fetch lendingPool address and update that too.\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"init(address)\":{\"notice\":\"Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Report total value\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateAddressesProvider(address)\":{\"notice\":\"Update address of Aave LendingPoolAddressesProvider\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/aave/AaveStrategyPolygonMatic.sol\":\"AaveStrategyPolygonWMATIC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface AaveLendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4d50377552239ead8323580a7bcc073d2dcce3f2ea35d04309119192e833d94\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7c33866bea8f329ae2e1b858695eb58eb44d5495b2b47cf677df2329abc4bd98\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x55451a0724e4c8982f247e2c3f6d5fc2899c98381287953e07346b28b4586efa\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0725eb59a54238cbdcf2d14d2759a2fb4bd7550b9e4183c9350ff72e46a2b674\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    IAddressList public override keepers;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Create keeper list\\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\\n     * mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\\n     * polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\\n     * avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54\\n     */\\n    function init(address _addressListFactory) external onlyGovernor {\\n        require(address(keepers) == address(0), \\\"keeper-list-already-created\\\");\\n        // Prepare keeper list\\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\\n        keepers = IAddressList(_factory.createList());\\n        require(keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal pure returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0xdc0899f84d46d358375f9f2c8dd47338eb347b7fb3322be4901888fe97a4d7d7\",\"license\":\"MIT\"},\"contracts/strategies/aave/AaveStrategyPolygon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/aave/IAave.sol\\\";\\n\\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\\nabstract contract AaveStrategyPolygon is Strategy {\\n    using SafeERC20 for IERC20;\\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    AaveLendingPool public aaveLendingPool;\\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\\n    AaveIncentivesController public aaveIncentivesController;\\n    AaveLendingPoolAddressesProvider public aaveAddressesProvider =\\n        AaveLendingPoolAddressesProvider(0xd05e3E715d945B59290df0ae8eF85c1BdB684744);\\n    address public rewardToken = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n    AToken internal immutable aToken;\\n    event UpdatedAddressesProvider(address _previousProvider, address _newProvider);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"aToken-address-is-zero\\\");\\n        aToken = AToken(_receiptToken);\\n        // If there is no incentive then below call will fail\\n        try AToken(_receiptToken).getIncentivesController() {\\n            aaveIncentivesController = AaveIncentivesController(AToken(_receiptToken).getIncentivesController());\\n        } catch {} //solhint-disable no-empty-blocks\\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\\n    }\\n\\n    /**\\n     * @notice Report total value\\n     * @dev aToken and collateral are 1:1\\n     */\\n    function totalValue() public view virtual override returns (uint256) {\\n        if (address(aaveIncentivesController) == address(0)) {\\n            // As there is no incentive return aToken balance as totalValue\\n            return aToken.balanceOf(address(this));\\n        }\\n        address[] memory _assets = new address[](1);\\n        _assets[0] = address(aToken);\\n        uint256 _rewardAccrued = aaveIncentivesController.getRewardsBalance(_assets, address(this));\\n        (, uint256 _rewardAsCollateral, ) =\\n            swapManager.bestOutputFixedInput(rewardToken, address(collateralToken), _rewardAccrued);\\n        // Total value = reward as collateral + aToken balance\\n        return _rewardAsCollateral + aToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Update address of Aave LendingPoolAddressesProvider\\n     * @dev We will use new address to fetch lendingPool address and update that too.\\n     */\\n    function updateAddressesProvider(address _newAddressesProvider) external onlyGovernor {\\n        require(_newAddressesProvider != address(0), \\\"provider-address-is-zero\\\");\\n        require(address(aaveAddressesProvider) != _newAddressesProvider, \\\"same-addresses-provider\\\");\\n        emit UpdatedAddressesProvider(address(aaveAddressesProvider), _newAddressesProvider);\\n        aaveAddressesProvider = AaveLendingPoolAddressesProvider(_newAddressesProvider);\\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\\n    }\\n\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return _token == address(aToken) || _token == rewardToken;\\n    }\\n\\n    /// @notice Large approval of token\\n    function _approveToken(uint256 _amount) internal override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer StakeAave to newStrategy\\n     * @param _newStrategy Address of newStrategy\\n     */\\n    //solhint-disable no-empty-blocks\\n    function _beforeMigration(address _newStrategy) internal override {}\\n\\n    /// @notice Claim Aave rewards and convert to _toToken.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        uint256 _rewardAmount = _claimRewards();\\n        if (_rewardAmount != 0 && rewardToken != _toToken) {\\n            _safeSwap(rewardToken, _toToken, _rewardAmount, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim rewards from Aave incentive controller\\n     * @dev Return 0 if collateral has no incentive\\n     */\\n    function _claimRewards() internal returns (uint256) {\\n        if (address(aaveIncentivesController) == address(0)) {\\n            return 0;\\n        }\\n        address[] memory _assets = new address[](1);\\n        _assets[0] = address(aToken);\\n        aaveIncentivesController.claimRewards(_assets, type(uint256).max, address(this));\\n        return IERC20(rewardToken).balanceOf(address(this));\\n    }\\n\\n    /// @notice Deposit asset into Aave\\n    function _deposit(uint256 _amount) internal {\\n        if (_amount != 0) {\\n            aaveLendingPool.deposit(address(collateralToken), _amount, address(this), 0);\\n        }\\n    }\\n\\n    /// @notice Withdraw collateral to payback excess debt\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\\n        if (_excessDebt != 0) {\\n            _payback = _safeWithdraw(address(this), _excessDebt);\\n        }\\n    }\\n\\n    /// @notice Returns minimum of 2 given numbers\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Aave.\\n     * @dev If somehow we got some collateral token in strategy then we want to\\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256) {\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\\n        if (_aTokenBalance > _totalDebt) {\\n            _withdraw(address(this), _aTokenBalance - _totalDebt);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculate realized loss.\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\\n        if (_aTokenBalance < _totalDebt) {\\n            _loss = _totalDebt - _aTokenBalance;\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Aave\\n    function _reinvest() internal override {\\n        _deposit(collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @dev Check we have enough aToken and liquidity to support this withdraw\\n     * @param _to Address that will receive collateral token.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(address _to, uint256 _amount) internal returns (uint256) {\\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\\n        // In this case we might have more aToken compare to available liquidity in Aave and any\\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\\n        // _amount against available liquidity.\\n        (uint256 _availableLiquidity, , , , , , , , , ) =\\n            aaveProtocolDataProvider.getReserveData(address(collateralToken));\\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\\n        return _withdraw(_to, _min(_amount, _min(_aTokenBalance, _availableLiquidity)));\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of collateral from Aave to pool\\n     * @param _amount Amount of collateral to withdraw.\\n     */\\n    function _withdraw(uint256 _amount) internal override {\\n        _safeWithdraw(pool, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of collateral from Aave to given address\\n     * @param _to Address that will receive collateral token.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _withdraw(address _to, uint256 _amount) internal returns (uint256) {\\n        if (_amount != 0) {\\n            require(\\n                aaveLendingPool.withdraw(address(collateralToken), _amount, _to) == _amount,\\n                \\\"withdrawn-amount-is-not-correct\\\"\\n            );\\n        }\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0xf4ad7f83a7a0cd71a7e63b37aba0224f6dd163b926c6b6d3be78bf6f1fb9b0bc\",\"license\":\"MIT\"},\"contracts/strategies/aave/AaveStrategyPolygonMatic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./AaveStrategyPolygon.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ncontract AaveStrategyPolygonWMATIC is AaveStrategyPolygon {\\n    string public constant NAME = \\\"Aave-Strategy-WMATIC\\\";\\n    string public constant VERSION = \\\"3.0.21\\\";\\n\\n    // amWMAtiC = 0x8dF3aad3a84da6b69A4DA8aeC3eA40d9091B2Ac4\\n    constructor(address _pool, address _swapManager)\\n        AaveStrategyPolygon(_pool, _swapManager, 0x8dF3aad3a84da6b69A4DA8aeC3eA40d9091B2Ac4)\\n    {}\\n}\\n\",\"keccak256\":\"0xb60a7165d7310c82c362f36be4100996121896ecc56c949c4bfbec66d20485ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052610e106004556000600555612710600655600a80546001600160a01b031990811673d05e3e715d945b59290df0ae8ef85c1bdb68474417909155600b8054909116730d500b1d8e8ef31e21c99d1db9a6444d3adf12701790553480156200006a57600080fd5b5060405162003e8a38038062003e8a8339810160408190526200008d9162000518565b8181738df3aad3a84da6b69a4da8aec3ea40d9091b2ac48282826001600160a01b038316620001035760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001505760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000fa565b600380546001600160a01b0319166001600160a01b0384811691909117909155606084901b6001600160601b03191660a05260408051637e062a3560e11b815290519185169163fc0c546a91600480820192602092909190829003018186803b158015620001bd57600080fd5b505afa158015620001d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f89190620004f2565b60601b6001600160601b031916608052600080546001600160a01b0319166001600160a01b039283161790558316151591506200027a90505760405162461bcd60e51b815260206004820152601660248201527f61546f6b656e2d616464726573732d69732d7a65726f000000000000000000006044820152606401620000fa565b806001600160a01b031660c0816001600160a01b031660601b81525050806001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b158015620002d157600080fd5b505afa92505050801562000304575060408051601f3d908101601f191682019092526200030191810190620004f2565b60015b6200030f57620003a6565b50806001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b1580156200034a57600080fd5b505afa1580156200035f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003859190620004f2565b600980546001600160a01b0319166001600160a01b03929092169190911790555b600a60009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620003f557600080fd5b505afa1580156200040a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004309190620004f2565b600780546001600160a01b0319166001600160a01b03928316179055600a546040516321f8a72160e01b8152600160f81b60048201529116906321f8a7219060240160206040518083038186803b1580156200048b57600080fd5b505afa158015620004a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004c69190620004f2565b600880546001600160a01b0319166001600160a01b0392909216919091179055506200056f9350505050565b60006020828403121562000504578081fd5b8151620005118162000556565b9392505050565b600080604083850312156200052b578081fd5b8251620005388162000556565b60208401519092506200054b8162000556565b809150509250929050565b6001600160a01b03811681146200056c57600080fd5b50565b60805160601c60a05160601c60c05160601c6137ed6200069d60003960008181610de501528181611b2801528181611bd501528181611d7a0152818161264a015281816127db015281816129370152612e25015260008181610255015281816104e00152818161066f015281816108e901528181610be701528181610c6301528181610e3a01528181610fed0152818161121d0152818161134401528181611624015281816116ed01528181611939015281816120bf0152818161210a015281816121a7015261231a0152600081816103e80152818161188c0152818161191001528181611cce01528181611f0701528181612264015281816122f801528181612350015281816126de0152818161279f0152818161288c015281816129fd0152612ca701526137ed6000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806399b71d5c1161011a578063d2c35ce8116100ad578063e9d337b81161007c578063e9d337b81461046f578063ec78e83214610482578063f7c618c114610495578063fc0c546a146104a8578063ffa1ad74146104b957610206565b8063d2c35ce814610439578063d4c3eea01461044c578063e00af4a714610454578063e645c2021461046757610206565b8063b2016bd4116100e9578063b2016bd4146103e3578063c415b95c1461040a578063cd2d7ebe1461041d578063ce5494bb1461042657610206565b806399b71d5c14610380578063a3f4df7e14610388578063a923b2a6146103c8578063aa101886146103db57610206565b806342189c8f1161019d5780635f9d4d2e1161016c5780635f9d4d2e1461032c57806367f5e4b81461033f578063709d039d146103525780637d7c2a1c14610365578063951dc22c1461036d57610206565b806342189c8f146102da578063440d7248146102e35780634c36fad7146103065780635f2475ca1461031957610206565b80631aedeabe116101d95780631aedeabe1461028a578063219a9822146102a15780632e1a7d4d146102b45780634032b72b146102c757610206565b806308bfa40a1461020b57806314ae9f2e1461023b57806316f0115b1461025057806319ab453c14610277575b600080fd5b600a5461021e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61024e61024936600461329e565b6104de565b005b61021e7f000000000000000000000000000000000000000000000000000000000000000081565b61024e61028536600461329e565b61066d565b61029360065481565b604051908152602001610232565b61024e6102af36600461329e565b6108e7565b61024e6102c236600461343d565b610be4565b61024e6102d536600461329e565b610c61565b61029360045481565b6102f66102f136600461329e565b610de1565b6040519015158152602001610232565b61024e61031436600461329e565b610e38565b60095461021e906001600160a01b031681565b60085461021e906001600160a01b031681565b61024e61034d36600461343d565b610feb565b60035461021e906001600160a01b031681565b61024e611137565b60015461021e906001600160a01b031681565b61024e611286565b6103bb60405180604001604052806014815260200173416176652d53747261746567792d574d4154494360601b81525081565b60405161023291906135d1565b61024e6103d636600461346d565b611342565b61024e611577565b61021e7f000000000000000000000000000000000000000000000000000000000000000081565b60025461021e906001600160a01b031681565b61029360055481565b61024e61043436600461329e565b611621565b61024e61044736600461329e565b611937565b610293611b00565b61024e61046236600461329e565b611e10565b6102936120ab565b60075461021e906001600160a01b031681565b60005461021e906001600160a01b031681565b600b5461021e906001600160a01b031681565b6000546001600160a01b031661021e565b6103bb60405180604001604052806006815260200165332e302e323160d01b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f91906132ba565b6001600160a01b0316336001600160a01b0316146105a85760405162461bcd60e51b815260040161059f90613634565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b1580156105ef57600080fd5b505af1158015610603573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610627919061341d565b61066a5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161059f565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe91906132ba565b6001600160a01b0316336001600160a01b03161461072e5760405162461bcd60e51b815260040161059f90613634565b6001546001600160a01b0316156107875760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d637265617465640000000000604482015260640161059f565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156107c757600080fd5b505af11580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff91906132ba565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f61082a3390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b15801561086b57600080fd5b505af115801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a3919061341d565b6108e35760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161059f565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561094057600080fd5b505afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097891906132ba565b6001600160a01b0316336001600160a01b0316146109a85760405162461bcd60e51b815260040161059f90613634565b6001600160a01b0381166109fe5760405162461bcd60e51b815260206004820152601860248201527f70726f76696465722d616464726573732d69732d7a65726f0000000000000000604482015260640161059f565b600a546001600160a01b0382811691161415610a5c5760405162461bcd60e51b815260206004820152601760248201527f73616d652d6164647265737365732d70726f7669646572000000000000000000604482015260640161059f565b600a54604080516001600160a01b03928316815291831660208301527fbea7427e7cdf11a91902e5dff8bf8ac6fe4861aa0940763e8fd78bb6f45798de910160405180910390a1600a80546001600160a01b0319166001600160a01b03831690811790915560408051630261bf8b60e01b81529051630261bf8b91600480820192602092909190829003018186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f91906132ba565b600780546001600160a01b0319166001600160a01b03928316179055600a546040516321f8a72160e01b8152600160f81b60048201529116906321f8a7219060240160206040518083038186803b158015610b8957600080fd5b505afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc191906132ba565b600880546001600160a01b0319166001600160a01b039290921691909117905550565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c585760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161059f565b61066a816120ba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cba57600080fd5b505afa158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf291906132ba565b6001600160a01b0316336001600160a01b031614610d225760405162461bcd60e51b815260040161059f90613634565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610d6957600080fd5b505af1158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da1919061341d565b61066a5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161059f565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610e305750600b546001600160a01b038381169116145b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906132ba565b6001600160a01b0316336001600160a01b031614610ef95760405162461bcd60e51b815260040161059f90613634565b6001600160a01b038116610f445760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640161059f565b6003546001600160a01b0382811691161415610f8f5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b604482015260640161059f565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c91906132ba565b6001600160a01b0316336001600160a01b0316146110ac5760405162461bcd60e51b815260040161059f90613634565b6127108111156110f75760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161059f565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561118857600080fd5b505afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c0919061341d565b6111dc5760405162461bcd60e51b815260040161059f90613604565b60008060006111e96120e4565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561126157600080fd5b505af1158015611275573d6000803e3d6000fd5b5050505061128161224b565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112d757600080fd5b505afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130f919061341d565b61132b5760405162461bcd60e51b815260040161059f90613604565b61133560006122eb565b6113406000196122eb565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561139b57600080fd5b505afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d391906132ba565b6001600160a01b0316336001600160a01b0316146114035760405162461bcd60e51b815260040161059f90613634565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561145157600080fd5b505afa158015611465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114899190613455565b81106114ce5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b604482015260640161059f565b816114d95760045491505b603b82116115215760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b604482015260640161059f565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156115c857600080fd5b505afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611600919061341d565b61161c5760405162461bcd60e51b815260040161059f90613604565b611340565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146116955760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161059f565b6001600160a01b0381166116eb5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161059f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561174e57600080fd5b505afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178691906132ba565b6001600160a01b0316146117d55760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161059f565b6000546040516370a0823160e01b81523060048201526118699183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561181e57600080fd5b505afa158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118569190613455565b6000546001600160a01b031691906124ac565b6040516370a0823160e01b815230600482015261066a9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156118ce57600080fd5b505afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119069190613455565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906124ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561199057600080fd5b505afa1580156119a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c891906132ba565b6001600160a01b0316336001600160a01b0316146119f85760405162461bcd60e51b815260040161059f90613634565b6001600160a01b038116611a4e5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161059f565b6002546001600160a01b0382811691161415611aa45760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161059f565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6009546000906001600160a01b0316611bb1576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611b7257600080fd5b505afa158015611b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baa9190613455565b9050611e0d565b604080516001808252818301909252600091602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611c1557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526009546040516345accf9360e11b81526000929190911690638b599f2690611c599085903090600401613574565b60206040518083038186803b158015611c7157600080fd5b505afa158015611c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca99190613455565b600354600b54604051631d1f307960e31b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000821660248201526044810184905292935060009291169063e8f983c89060640160006040518083038186803b158015611d2557600080fd5b505afa158015611d39573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d6191908101906132d6565b506040516370a0823160e01b81523060048201529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015611dc557600080fd5b505afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd9190613455565b611e0790826136fc565b93505050505b90565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611e6157600080fd5b505afa158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e99919061341d565b611eb55760405162461bcd60e51b815260040161059f90613604565b6002546001600160a01b0316611f055760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161059f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611f875760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161059f565b611f9081610de1565b15611fd45760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161059f565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156120145760025461200f906001600160a01b03164761250f565b61066a565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561205657600080fd5b505afa15801561206a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208e9190613455565b6002549091506108e3906001600160a01b038481169116836124ac565b60006120b5611b00565b905090565b6108e37f000000000000000000000000000000000000000000000000000000000000000082612628565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561214c57600080fd5b505afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121849190613455565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b1580156121e957600080fd5b505afa1580156121fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122219190613455565b905061222c81612798565b945061223781612915565b9350612242826129cb565b92505050909192565b6040516370a0823160e01b8152306004820152611340907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e69190613455565b6129dd565b61233f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612a79565b600754612379906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612a79565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ca57600080fd5b505afa1580156123de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124029190613455565b8110156108e357600354604051636e74a6f760e01b81526004810183905261249a916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561244f57600080fd5b505afa158015612463573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248791906132ba565b600b546001600160a01b03169084612a79565b806124a48161375b565b91505061237c565b6040516001600160a01b03831660248201526044810182905261128190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b9d565b8047101561255f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161059f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146125ac576040519150601f19603f3d011682016040523d82523d6000602084013e6125b1565b606091505b50509050806112815760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161059f565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561268c57600080fd5b505afa1580156126a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c49190613455565b6008546040516335ea6a7560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152929350600092909116906335ea6a75906024016101406040518083038186803b15801561273057600080fd5b505afa158015612744573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612768919061348e565b505050505050505050905061278f8561278a866127858686612c6f565b612c6f565b612c85565b95945050505050565b60006127c37f0000000000000000000000000000000000000000000000000000000000000000612d88565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561282557600080fd5b505afa158015612839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285d9190613455565b905082811115612877576128753061278a8584613714565b505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156128d657600080fd5b505afa1580156128ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290e9190613455565b9392505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561297957600080fd5b505afa15801561298d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b19190613455565b9050828110156129c55761290e8184613714565b50919050565b60008115610e3357610e303083612628565b801561066a5760075460405163e8eda9df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152600060648301529091169063e8eda9df90608401600060405180830381600087803b158015612a5e57600080fd5b505af1158015612a72573d6000803e3d6000fd5b5050505050565b801580612b025750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612ac857600080fd5b505afa158015612adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b009190613455565b155b612b6d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161059f565b6040516001600160a01b03831660248201526044810182905261128190849063095ea7b360e01b906064016124d8565b6000612bf2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612dcf9092919063ffffffff16565b8051909150156112815780806020019051810190612c10919061341d565b6112815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161059f565b6000818310612c7e578161290e565b5090919050565b600081156129c557600754604051631a4ca37b60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590528581166044830152849216906369328dec90606401602060405180830381600087803b158015612d0357600080fd5b505af1158015612d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3b9190613455565b146129c55760405162461bcd60e51b815260206004820152601f60248201527f77697468647261776e2d616d6f756e742d69732d6e6f742d636f727265637400604482015260640161059f565b6000612d92612de6565b90508015801590612db15750600b546001600160a01b03838116911614155b156108e357600b546108e3906001600160a01b031683836001612f7c565b6060612dde848460008561313d565b949350505050565b6009546000906001600160a01b0316612e0157506000611e0d565b604080516001808252818301909252600091602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110612e6557634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600954604051633111e7b360e01b8152911690633111e7b390612ea890849060001990309060040161359e565b602060405180830381600087803b158015612ec257600080fd5b505af1158015612ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efa9190613455565b50600b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612f3e57600080fd5b505afa158015612f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f769190613455565b91505090565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b158015612fd757600080fd5b505afa158015612feb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261301391908101906132d6565b925092509250836000141561302757600193505b811561313457600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561307157600080fd5b505afa158015613085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a991906132ba565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b81526004016130dc95949392919061366b565b600060405180830381600087803b1580156130f657600080fd5b505af115801561310a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613132919081019061338a565b505b50505050505050565b60608247101561319e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161059f565b843b6131ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161059f565b600080866001600160a01b031685876040516132089190613558565b60006040518083038185875af1925050503d8060008114613245576040519150601f19603f3d011682016040523d82523d6000602084013e61324a565b606091505b509150915061325a828286613265565b979650505050505050565b6060831561327457508161290e565b8251156132845782518084602001fd5b8160405162461bcd60e51b815260040161059f91906135d1565b6000602082840312156132af578081fd5b813561290e816137a2565b6000602082840312156132cb578081fd5b815161290e816137a2565b6000806000606084860312156132ea578182fd5b835167ffffffffffffffff811115613300578283fd5b8401601f81018613613310578283fd5b80516020613325613320836136d8565b6136a7565b8083825282820191508285018a848660051b8801011115613344578788fd5b8795505b8486101561336f57805161335b816137a2565b835260019590950194918301918301613348565b50918801516040909801519199979850909695505050505050565b6000602080838503121561339c578182fd5b825167ffffffffffffffff8111156133b2578283fd5b8301601f810185136133c2578283fd5b80516133d0613320826136d8565b80828252848201915084840188868560051b87010111156133ef578687fd5b8694505b838510156134115780518352600194909401939185019185016133f3565b50979650505050505050565b60006020828403121561342e578081fd5b8151801515811461290e578182fd5b60006020828403121561344e578081fd5b5035919050565b600060208284031215613466578081fd5b5051919050565b6000806040838503121561347f578182fd5b50508035926020909101359150565b6000806000806000806000806000806101408b8d0312156134ad578586fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015164ffffffffff81168114613502578182fd5b809150509295989b9194979a5092959850565b6000815180845260208085019450808401835b8381101561354d5781516001600160a01b031687529582019590820190600101613528565b509495945050505050565b6000825161356a81846020870161372b565b9190910192915050565b6000604082526135876040830185613515565b905060018060a01b03831660208301529392505050565b6000606082526135b16060830186613515565b6020830194909452506001600160a01b0391909116604090910152919050565b60006020825282518060208401526135f081604085016020870161372b565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a0604083015261368a60a0830186613515565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156136d0576136d061378c565b604052919050565b600067ffffffffffffffff8211156136f2576136f261378c565b5060051b60200190565b6000821982111561370f5761370f613776565b500190565b60008282101561372657613726613776565b500390565b60005b8381101561374657818101518382015260200161372e565b83811115613755576000848401525b50505050565b600060001982141561376f5761376f613776565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461066a57600080fdfea2646970667358221220f6a71302eadc93dc23909a77c06e9b4c77b249fae3a229e87c44f6e1352a522664736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806399b71d5c1161011a578063d2c35ce8116100ad578063e9d337b81161007c578063e9d337b81461046f578063ec78e83214610482578063f7c618c114610495578063fc0c546a146104a8578063ffa1ad74146104b957610206565b8063d2c35ce814610439578063d4c3eea01461044c578063e00af4a714610454578063e645c2021461046757610206565b8063b2016bd4116100e9578063b2016bd4146103e3578063c415b95c1461040a578063cd2d7ebe1461041d578063ce5494bb1461042657610206565b806399b71d5c14610380578063a3f4df7e14610388578063a923b2a6146103c8578063aa101886146103db57610206565b806342189c8f1161019d5780635f9d4d2e1161016c5780635f9d4d2e1461032c57806367f5e4b81461033f578063709d039d146103525780637d7c2a1c14610365578063951dc22c1461036d57610206565b806342189c8f146102da578063440d7248146102e35780634c36fad7146103065780635f2475ca1461031957610206565b80631aedeabe116101d95780631aedeabe1461028a578063219a9822146102a15780632e1a7d4d146102b45780634032b72b146102c757610206565b806308bfa40a1461020b57806314ae9f2e1461023b57806316f0115b1461025057806319ab453c14610277575b600080fd5b600a5461021e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61024e61024936600461329e565b6104de565b005b61021e7f000000000000000000000000000000000000000000000000000000000000000081565b61024e61028536600461329e565b61066d565b61029360065481565b604051908152602001610232565b61024e6102af36600461329e565b6108e7565b61024e6102c236600461343d565b610be4565b61024e6102d536600461329e565b610c61565b61029360045481565b6102f66102f136600461329e565b610de1565b6040519015158152602001610232565b61024e61031436600461329e565b610e38565b60095461021e906001600160a01b031681565b60085461021e906001600160a01b031681565b61024e61034d36600461343d565b610feb565b60035461021e906001600160a01b031681565b61024e611137565b60015461021e906001600160a01b031681565b61024e611286565b6103bb60405180604001604052806014815260200173416176652d53747261746567792d574d4154494360601b81525081565b60405161023291906135d1565b61024e6103d636600461346d565b611342565b61024e611577565b61021e7f000000000000000000000000000000000000000000000000000000000000000081565b60025461021e906001600160a01b031681565b61029360055481565b61024e61043436600461329e565b611621565b61024e61044736600461329e565b611937565b610293611b00565b61024e61046236600461329e565b611e10565b6102936120ab565b60075461021e906001600160a01b031681565b60005461021e906001600160a01b031681565b600b5461021e906001600160a01b031681565b6000546001600160a01b031661021e565b6103bb60405180604001604052806006815260200165332e302e323160d01b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056f91906132ba565b6001600160a01b0316336001600160a01b0316146105a85760405162461bcd60e51b815260040161059f90613634565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b1580156105ef57600080fd5b505af1158015610603573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610627919061341d565b61066a5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161059f565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe91906132ba565b6001600160a01b0316336001600160a01b03161461072e5760405162461bcd60e51b815260040161059f90613634565b6001546001600160a01b0316156107875760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d637265617465640000000000604482015260640161059f565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156107c757600080fd5b505af11580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff91906132ba565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f61082a3390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b15801561086b57600080fd5b505af115801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a3919061341d565b6108e35760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161059f565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561094057600080fd5b505afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097891906132ba565b6001600160a01b0316336001600160a01b0316146109a85760405162461bcd60e51b815260040161059f90613634565b6001600160a01b0381166109fe5760405162461bcd60e51b815260206004820152601860248201527f70726f76696465722d616464726573732d69732d7a65726f0000000000000000604482015260640161059f565b600a546001600160a01b0382811691161415610a5c5760405162461bcd60e51b815260206004820152601760248201527f73616d652d6164647265737365732d70726f7669646572000000000000000000604482015260640161059f565b600a54604080516001600160a01b03928316815291831660208301527fbea7427e7cdf11a91902e5dff8bf8ac6fe4861aa0940763e8fd78bb6f45798de910160405180910390a1600a80546001600160a01b0319166001600160a01b03831690811790915560408051630261bf8b60e01b81529051630261bf8b91600480820192602092909190829003018186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f91906132ba565b600780546001600160a01b0319166001600160a01b03928316179055600a546040516321f8a72160e01b8152600160f81b60048201529116906321f8a7219060240160206040518083038186803b158015610b8957600080fd5b505afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc191906132ba565b600880546001600160a01b0319166001600160a01b039290921691909117905550565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c585760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161059f565b61066a816120ba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cba57600080fd5b505afa158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf291906132ba565b6001600160a01b0316336001600160a01b031614610d225760405162461bcd60e51b815260040161059f90613634565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610d6957600080fd5b505af1158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da1919061341d565b61066a5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161059f565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610e305750600b546001600160a01b038381169116145b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906132ba565b6001600160a01b0316336001600160a01b031614610ef95760405162461bcd60e51b815260040161059f90613634565b6001600160a01b038116610f445760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640161059f565b6003546001600160a01b0382811691161415610f8f5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b604482015260640161059f565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c91906132ba565b6001600160a01b0316336001600160a01b0316146110ac5760405162461bcd60e51b815260040161059f90613634565b6127108111156110f75760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161059f565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561118857600080fd5b505afa15801561119c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c0919061341d565b6111dc5760405162461bcd60e51b815260040161059f90613604565b60008060006111e96120e4565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561126157600080fd5b505af1158015611275573d6000803e3d6000fd5b5050505061128161224b565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112d757600080fd5b505afa1580156112eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130f919061341d565b61132b5760405162461bcd60e51b815260040161059f90613604565b61133560006122eb565b6113406000196122eb565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561139b57600080fd5b505afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d391906132ba565b6001600160a01b0316336001600160a01b0316146114035760405162461bcd60e51b815260040161059f90613634565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561145157600080fd5b505afa158015611465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114899190613455565b81106114ce5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b604482015260640161059f565b816114d95760045491505b603b82116115215760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b604482015260640161059f565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156115c857600080fd5b505afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611600919061341d565b61161c5760405162461bcd60e51b815260040161059f90613604565b611340565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146116955760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161059f565b6001600160a01b0381166116eb5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161059f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561174e57600080fd5b505afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178691906132ba565b6001600160a01b0316146117d55760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161059f565b6000546040516370a0823160e01b81523060048201526118699183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561181e57600080fd5b505afa158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118569190613455565b6000546001600160a01b031691906124ac565b6040516370a0823160e01b815230600482015261066a9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156118ce57600080fd5b505afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119069190613455565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906124ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561199057600080fd5b505afa1580156119a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c891906132ba565b6001600160a01b0316336001600160a01b0316146119f85760405162461bcd60e51b815260040161059f90613634565b6001600160a01b038116611a4e5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161059f565b6002546001600160a01b0382811691161415611aa45760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161059f565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6009546000906001600160a01b0316611bb1576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611b7257600080fd5b505afa158015611b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baa9190613455565b9050611e0d565b604080516001808252818301909252600091602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110611c1557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526009546040516345accf9360e11b81526000929190911690638b599f2690611c599085903090600401613574565b60206040518083038186803b158015611c7157600080fd5b505afa158015611c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca99190613455565b600354600b54604051631d1f307960e31b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000821660248201526044810184905292935060009291169063e8f983c89060640160006040518083038186803b158015611d2557600080fd5b505afa158015611d39573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d6191908101906132d6565b506040516370a0823160e01b81523060048201529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015611dc557600080fd5b505afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd9190613455565b611e0790826136fc565b93505050505b90565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611e6157600080fd5b505afa158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e99919061341d565b611eb55760405162461bcd60e51b815260040161059f90613604565b6002546001600160a01b0316611f055760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161059f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611f875760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161059f565b611f9081610de1565b15611fd45760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161059f565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156120145760025461200f906001600160a01b03164761250f565b61066a565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561205657600080fd5b505afa15801561206a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208e9190613455565b6002549091506108e3906001600160a01b038481169116836124ac565b60006120b5611b00565b905090565b6108e37f000000000000000000000000000000000000000000000000000000000000000082612628565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561214c57600080fd5b505afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121849190613455565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b1580156121e957600080fd5b505afa1580156121fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122219190613455565b905061222c81612798565b945061223781612915565b9350612242826129cb565b92505050909192565b6040516370a0823160e01b8152306004820152611340907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156122ae57600080fd5b505afa1580156122c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e69190613455565b6129dd565b61233f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612a79565b600754612379906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612a79565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ca57600080fd5b505afa1580156123de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124029190613455565b8110156108e357600354604051636e74a6f760e01b81526004810183905261249a916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561244f57600080fd5b505afa158015612463573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248791906132ba565b600b546001600160a01b03169084612a79565b806124a48161375b565b91505061237c565b6040516001600160a01b03831660248201526044810182905261128190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b9d565b8047101561255f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161059f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146125ac576040519150601f19603f3d011682016040523d82523d6000602084013e6125b1565b606091505b50509050806112815760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161059f565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561268c57600080fd5b505afa1580156126a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c49190613455565b6008546040516335ea6a7560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152929350600092909116906335ea6a75906024016101406040518083038186803b15801561273057600080fd5b505afa158015612744573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612768919061348e565b505050505050505050905061278f8561278a866127858686612c6f565b612c6f565b612c85565b95945050505050565b60006127c37f0000000000000000000000000000000000000000000000000000000000000000612d88565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561282557600080fd5b505afa158015612839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285d9190613455565b905082811115612877576128753061278a8584613714565b505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156128d657600080fd5b505afa1580156128ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290e9190613455565b9392505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561297957600080fd5b505afa15801561298d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b19190613455565b9050828110156129c55761290e8184613714565b50919050565b60008115610e3357610e303083612628565b801561066a5760075460405163e8eda9df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052306044830152600060648301529091169063e8eda9df90608401600060405180830381600087803b158015612a5e57600080fd5b505af1158015612a72573d6000803e3d6000fd5b5050505050565b801580612b025750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612ac857600080fd5b505afa158015612adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b009190613455565b155b612b6d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161059f565b6040516001600160a01b03831660248201526044810182905261128190849063095ea7b360e01b906064016124d8565b6000612bf2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612dcf9092919063ffffffff16565b8051909150156112815780806020019051810190612c10919061341d565b6112815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161059f565b6000818310612c7e578161290e565b5090919050565b600081156129c557600754604051631a4ca37b60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590528581166044830152849216906369328dec90606401602060405180830381600087803b158015612d0357600080fd5b505af1158015612d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3b9190613455565b146129c55760405162461bcd60e51b815260206004820152601f60248201527f77697468647261776e2d616d6f756e742d69732d6e6f742d636f727265637400604482015260640161059f565b6000612d92612de6565b90508015801590612db15750600b546001600160a01b03838116911614155b156108e357600b546108e3906001600160a01b031683836001612f7c565b6060612dde848460008561313d565b949350505050565b6009546000906001600160a01b0316612e0157506000611e0d565b604080516001808252818301909252600091602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110612e6557634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152600954604051633111e7b360e01b8152911690633111e7b390612ea890849060001990309060040161359e565b602060405180830381600087803b158015612ec257600080fd5b505af1158015612ed6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efa9190613455565b50600b546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612f3e57600080fd5b505afa158015612f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f769190613455565b91505090565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b158015612fd757600080fd5b505afa158015612feb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261301391908101906132d6565b925092509250836000141561302757600193505b811561313457600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561307157600080fd5b505afa158015613085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a991906132ba565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b81526004016130dc95949392919061366b565b600060405180830381600087803b1580156130f657600080fd5b505af115801561310a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613132919081019061338a565b505b50505050505050565b60608247101561319e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161059f565b843b6131ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161059f565b600080866001600160a01b031685876040516132089190613558565b60006040518083038185875af1925050503d8060008114613245576040519150601f19603f3d011682016040523d82523d6000602084013e61324a565b606091505b509150915061325a828286613265565b979650505050505050565b6060831561327457508161290e565b8251156132845782518084602001fd5b8160405162461bcd60e51b815260040161059f91906135d1565b6000602082840312156132af578081fd5b813561290e816137a2565b6000602082840312156132cb578081fd5b815161290e816137a2565b6000806000606084860312156132ea578182fd5b835167ffffffffffffffff811115613300578283fd5b8401601f81018613613310578283fd5b80516020613325613320836136d8565b6136a7565b8083825282820191508285018a848660051b8801011115613344578788fd5b8795505b8486101561336f57805161335b816137a2565b835260019590950194918301918301613348565b50918801516040909801519199979850909695505050505050565b6000602080838503121561339c578182fd5b825167ffffffffffffffff8111156133b2578283fd5b8301601f810185136133c2578283fd5b80516133d0613320826136d8565b80828252848201915084840188868560051b87010111156133ef578687fd5b8694505b838510156134115780518352600194909401939185019185016133f3565b50979650505050505050565b60006020828403121561342e578081fd5b8151801515811461290e578182fd5b60006020828403121561344e578081fd5b5035919050565b600060208284031215613466578081fd5b5051919050565b6000806040838503121561347f578182fd5b50508035926020909101359150565b6000806000806000806000806000806101408b8d0312156134ad578586fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015164ffffffffff81168114613502578182fd5b809150509295989b9194979a5092959850565b6000815180845260208085019450808401835b8381101561354d5781516001600160a01b031687529582019590820190600101613528565b509495945050505050565b6000825161356a81846020870161372b565b9190910192915050565b6000604082526135876040830185613515565b905060018060a01b03831660208301529392505050565b6000606082526135b16060830186613515565b6020830194909452506001600160a01b0391909116604090910152919050565b60006020825282518060208401526135f081604085016020870161372b565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a0604083015261368a60a0830186613515565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156136d0576136d061378c565b604052919050565b600067ffffffffffffffff8211156136f2576136f261378c565b5060051b60200190565b6000821982111561370f5761370f613776565b500190565b60008282101561372657613726613776565b500390565b60005b8381101561374657818101518382015260200161372e565b83811115613755576000848401525b50505050565b600060001982141561376f5761376f613776565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461066a57600080fdfea2646970667358221220f6a71302eadc93dc23909a77c06e9b4c77b249fae3a229e87c44f6e1352a522664736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "init(address)": {
        "params": {
          "_addressListFactory": "To support same code in eth side chain, user _addressListFactory as param mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291 avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54"
        }
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "aToken and collateral are 1:1"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateAddressesProvider(address)": {
        "details": "We will use new address to fetch lendingPool address and update that too."
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "init(address)": {
        "notice": "Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Report total value"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateAddressesProvider(address)": {
        "notice": "Update address of Aave LendingPoolAddressesProvider"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13612,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13619,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "keepers",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAddressList)4357"
      },
      {
        "astId": 13622,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13625,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)4660"
      },
      {
        "astId": 13628,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13631,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13634,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 16685,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "aaveLendingPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(AaveLendingPool)4078"
      },
      {
        "astId": 16688,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "aaveProtocolDataProvider",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(AaveProtocolDataProvider)4115"
      },
      {
        "astId": 16691,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "aaveIncentivesController",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(AaveIncentivesController)4035"
      },
      {
        "astId": 16697,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "aaveAddressesProvider",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(AaveLendingPoolAddressesProvider)4003"
      },
      {
        "astId": 16700,
        "contract": "contracts/strategies/aave/AaveStrategyPolygonMatic.sol:AaveStrategyPolygonWMATIC",
        "label": "rewardToken",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AaveIncentivesController)4035": {
        "encoding": "inplace",
        "label": "contract AaveIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(AaveLendingPool)4078": {
        "encoding": "inplace",
        "label": "contract AaveLendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(AaveLendingPoolAddressesProvider)4003": {
        "encoding": "inplace",
        "label": "contract AaveLendingPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(AaveProtocolDataProvider)4115": {
        "encoding": "inplace",
        "label": "contract AaveProtocolDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressList)4357": {
        "encoding": "inplace",
        "label": "contract IAddressList",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)4660": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}