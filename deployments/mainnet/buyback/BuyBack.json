{
  "address": "0x9bcdf1130b20856f86267074de136c5902e314fe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "contract IVesperPool",
          "name": "_vVSP",
          "type": "address"
        },
        {
          "internalType": "contract IAddressListFactory",
          "name": "_listFactory",
          "type": "address"
        },
        {
          "internalType": "contract ISwapManager",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MigratedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressToAdd",
          "type": "address"
        }
      ],
      "name": "addInKeepersList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "batch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "_vPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositAndUnwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_unwrapped",
          "type": "address"
        }
      ],
      "name": "doInfinityApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrateAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressToRemove",
          "type": "address"
        }
      ],
      "name": "removeFromKeepersList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapForVspAndTransferToVVSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferAllVspToVVSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferVspToVVSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "_vPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "_vPool",
          "type": "address"
        }
      ],
      "name": "unwrapAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vVSP",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vsp",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcbb009a96a640df91098426582b5eb630ee2947db063a12d877929652c76a09",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609e4cee86299d40611c148099d5",
    "contractAddress": "0x9bcdf1130b20856f86267074de136c5902e314fe",
    "transactionIndex": "0x117",
    "gasUsed": "0x433635",
    "logsBloom": "0x
    "blockHash": "0x0d1ee1cca0934316c1c757dfbffc3490f4f42a9972afddd2cb0c00c3c1b55edf",
    "transactionHash": "0xc0527d44bfed984b6ad7a73bfd0a537915d55b2b118d6fa036d2cb3b552b8f3e",
    "logs": [
      {
        "address": "0x9bcdf1130b20856f86267074de136c5902e314fe",
        "blockHash": "0x0d1ee1cca0934316c1c757dfbffc3490f4f42a9972afddd2cb0c00c3c1b55edf",
        "blockNumber": "0xd0b87e",
        "data": "0x",
        "logIndex": "0x194",
        "removed": false,
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000df826ff6518e609e4cee86299d40611c148099d5"
        ],
        "transactionHash": "0xc0527d44bfed984b6ad7a73bfd0a537915d55b2b118d6fa036d2cb3b552b8f3e",
        "transactionIndex": "0x117",
        "transactionLogIndex": "0x0",
        "type": "mined"
      },
      {
        "address": "0xb7254e668395a4339d1ccc1e24b4e11330ab33c7",
        "blockHash": "0x0d1ee1cca0934316c1c757dfbffc3490f4f42a9972afddd2cb0c00c3c1b55edf",
        "blockNumber": "0xd0b87e",
        "data": "0x",
        "logIndex": "0x195",
        "removed": false,
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009bcdf1130b20856f86267074de136c5902e314fe",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "transactionHash": "0xc0527d44bfed984b6ad7a73bfd0a537915d55b2b118d6fa036d2cb3b552b8f3e",
        "transactionIndex": "0x117",
        "transactionLogIndex": "0x1",
        "type": "mined"
      },
      {
        "address": "0xb7254e668395a4339d1ccc1e24b4e11330ab33c7",
        "blockHash": "0x0d1ee1cca0934316c1c757dfbffc3490f4f42a9972afddd2cb0c00c3c1b55edf",
        "blockNumber": "0xd0b87e",
        "data": "0x",
        "logIndex": "0x196",
        "removed": false,
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6",
          "0x0000000000000000000000009bcdf1130b20856f86267074de136c5902e314fe",
          "0x000000000000000000000000ded8217de022706a191ee7ee0dc9df1185fb5da3"
        ],
        "transactionHash": "0xc0527d44bfed984b6ad7a73bfd0a537915d55b2b118d6fa036d2cb3b552b8f3e",
        "transactionIndex": "0x117",
        "transactionLogIndex": "0x2",
        "type": "mined"
      },
      {
        "address": "0xded8217de022706a191ee7ee0dc9df1185fb5da3",
        "blockHash": "0x0d1ee1cca0934316c1c757dfbffc3490f4f42a9972afddd2cb0c00c3c1b55edf",
        "blockNumber": "0xd0b87e",
        "data": "0x",
        "logIndex": "0x197",
        "removed": false,
        "topics": [
          "0x4bd63f068ee86f2b575ed8b0d85879e68002200703584a639a5ab8c8ad6e1294",
          "0x0000000000000000000000009bcdf1130b20856f86267074de136c5902e314fe",
          "0x000000000000000000000000b7254e668395a4339d1ccc1e24b4e11330ab33c7"
        ],
        "transactionHash": "0xc0527d44bfed984b6ad7a73bfd0a537915d55b2b118d6fa036d2cb3b552b8f3e",
        "transactionIndex": "0x117",
        "transactionLogIndex": "0x3",
        "type": "mined"
      },
      {
        "address": "0xb7254e668395a4339d1ccc1e24b4e11330ab33c7",
        "blockHash": "0x0d1ee1cca0934316c1c757dfbffc3490f4f42a9972afddd2cb0c00c3c1b55edf",
        "blockNumber": "0xd0b87e",
        "data": "0x",
        "logIndex": "0x198",
        "removed": false,
        "topics": [
          "0x53d43647b4e7165b1dd70c590a9244d650c4d257cbb62b799357578e780579ad",
          "0x000000000000000000000000df826ff6518e609e4cee86299d40611c148099d5",
          "0x0000000000000000000000009bcdf1130b20856f86267074de136c5902e314fe"
        ],
        "transactionHash": "0xc0527d44bfed984b6ad7a73bfd0a537915d55b2b118d6fa036d2cb3b552b8f3e",
        "transactionIndex": "0x117",
        "transactionLogIndex": "0x4",
        "type": "mined"
      }
    ],
    "blockNumber": "0xd0b87e",
    "cumulativeGasUsed": "0x163266e",
    "status": "0x1"
  },
  "args": [
    "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xbA4cFE5741b357FA371b506e5db0774aBFeCf8Fc",
    "0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710"
  ],
  "solcInputHash": "21475ae0820dd4c0901cd85de360402e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IVesperPool\",\"name\":\"_vVSP\",\"type\":\"address\"},{\"internalType\":\"contract IAddressListFactory\",\"name\":\"_listFactory\",\"type\":\"address\"},{\"internalType\":\"contract ISwapManager\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MigratedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToAdd\",\"type\":\"address\"}],\"name\":\"addInKeepersList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_unwrapped\",\"type\":\"address\"}],\"name\":\"doInfinityApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromKeepersList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swapForVspAndTransferToVVSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAllVspToVVSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferVspToVVSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"_vPool\",\"type\":\"address\"}],\"name\":\"unwrapAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vVSP\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"addInKeepersList(address)\":{\"details\":\"Use it to add keeper in keepers list and to add address in feeWhitelist\",\"params\":{\"_addressToAdd\":\"address which we want to add in AddressList.\"}},\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"}},\"migrateAssets(address[],address)\":{\"details\":\"The caller has to set the addresses list since we don't maintain a list of them\",\"params\":{\"_assets\":\"List of assets' address to transfer from\",\"_to\":\"Assets recipient\"}},\"removeFromKeepersList(address)\":{\"details\":\"Use it to remove keeper from keepers list and to remove address from feeWhitelist\",\"params\":{\"_addressToRemove\":\"address which we want to remove from AddressList.\"}},\"swapForVspAndTransferToVVSP(address,uint256)\":{\"details\":\"The vVVSP is the beneficiary of the swapHave to check allowance to routers before calling this\"},\"transferAllVspToVVSP()\":{\"details\":\"Uses all held VSP tokens\"},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"unwrapAll(address)\":{\"details\":\"Uses all held vPool tokens\"},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"updateSwapSlippage(uint256)\":{\"params\":{\"_newSwapSlippage\":\"new swap slippage\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addInKeepersList(address)\":{\"notice\":\"Add given address in provided address list.\"},\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"depositAndUnwrap(address,uint256)\":{\"notice\":\"Deposit vPool tokens and unwrap them\"},\"doInfinityApproval(address)\":{\"notice\":\"Approve SwapManager routers if needed\"},\"migrateAssets(address[],address)\":{\"notice\":\"Migrate assets to a new contract\"},\"removeFromKeepersList(address)\":{\"notice\":\"Remove given address from provided address list.\"},\"swapForVspAndTransferToVVSP(address,uint256)\":{\"notice\":\"Perform a slippage-protected swap for VSP\"},\"transferAllVspToVVSP()\":{\"notice\":\"Transfer VSP tokens to vVSP\"},\"transferVspToVVSP(uint256)\":{\"notice\":\"Transfer VSP tokens to vVSP\"},\"unwrap(address,uint256)\":{\"notice\":\"Withdraw (a.k.a. unwrap) underlying token from vPool\"},\"unwrapAll(address)\":{\"notice\":\"Withdraw (a.k.a. unwrap) underlying token from vPool\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"},\"updateSwapSlippage(uint256)\":{\"notice\":\"Update swap slippage value\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/BuyBack.sol\":\"BuyBack\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/Governed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\ncontract Governed is Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * _initializeGoverned() function to initialization this contract\\n     */\\n    function _initializeGoverned() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor {\\n        require(governor == _msgSender(), \\\"not-the-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x84da13fab3e3864d38d587d860a14f37693a14f0c585e7db9fb4d2d305d0bc0b\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7c33866bea8f329ae2e1b858695eb58eb44d5495b2b47cf677df2329abc4bd98\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0725eb59a54238cbdcf2d14d2759a2fb4bd7550b9e4183c9350ff72e46a2b674\",\"license\":\"MIT\"},\"contracts/pool/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n}\\n\",\"keccak256\":\"0x59e834f922e4a3b2460c6a99cd313fe5c7d4d4a3c14ae9a70130cac32a807395\",\"license\":\"MIT\"},\"contracts/utils/Batchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/// @dev Based on https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringBatchable.sol\\n/// @dev WARNING!!! Combining Batchable with `msg.value` can cause double spending issues\\ncontract Batchable {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    /// @notice Allows batched call to self (this contract).\\n    /// @param calls An array of inputs for each call.\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\n            if (!success && revertOnFail) {\\n                revert(_getRevertMsg(result));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb7921791e8bceb3cd4eb5720268c7f256690678a23a28a18a67b9ec3ce99b63b\",\"license\":\"MIT\"},\"contracts/utils/BuyBack.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../pool/Errors.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"./UsingSwapManager.sol\\\";\\nimport \\\"./Batchable.sol\\\";\\n\\ncontract BuyBack is UsingSwapManager, Batchable {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public vsp;\\n    IVesperPool public vVSP; // vVSP pool will received buyed back VSPs\\n    address public keepers; // sol-address-list address which contains addresses of keepers\\n\\n    event MigratedAsset(IERC20 asset, uint256 amount);\\n\\n    constructor(\\n        address _governor,\\n        address _weth,\\n        IVesperPool _vVSP,\\n        IAddressListFactory _listFactory,\\n        ISwapManager _swapManager\\n    ) UsingSwapManager(_weth, _swapManager) {\\n        require(address(_vVSP) != address(0), \\\"vvsp-is-null\\\");\\n        require(address(_listFactory) != address(0), \\\"address-list-factory-is-null\\\");\\n\\n        governor = _governor;\\n        vVSP = _vVSP;\\n        vsp = vVSP.token();\\n        keepers = _listFactory.createList();\\n        require(IAddressList(keepers).add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(IAddressList(keepers).contains(_msgSender()), \\\"not-a-keeper\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n\\n    /**\\n     * @notice Migrate assets to a new contract\\n     * @dev The caller has to set the addresses list since we don't maintain a list of them\\n     * @param _assets List of assets' address to transfer from\\n     * @param _to Assets recipient\\n     */\\n    function migrateAssets(address[] memory _assets, address _to) external onlyGovernor {\\n        require(_assets.length > 0, \\\"assets-list-is-empty\\\");\\n        require(_to != address(this), \\\"new-contract-is-invalid\\\");\\n\\n        for (uint256 i = 0; i < _assets.length; ++i) {\\n            IERC20 _asset = IERC20(_assets[i]);\\n            uint256 _balance = _asset.balanceOf(address(this));\\n            _asset.safeTransfer(_to, _balance);\\n            emit MigratedAsset(_asset, _balance);\\n        }\\n    }\\n\\n    ///////////////////////////// Only Keeper ///////////////////////////////\\n\\n    /// @notice Perform a slippage-protected swap for VSP\\n    /// @dev The vVVSP is the beneficiary of the swap\\n    /// @dev Have to check allowance to routers before calling this\\n    function swapForVspAndTransferToVVSP(address _tokenIn, uint256 _amountIn) external onlyKeeper {\\n        if (_amountIn > 0) {\\n            uint256 _minAmtOut =\\n                (swapSlippage != 10000)\\n                    ? _calcAmtOutAfterSlippage(\\n                        _getOracleRate(_simpleOraclePath(_tokenIn, address(vsp)), _amountIn),\\n                        swapSlippage\\n                    )\\n                    : 1;\\n            _safeSwap(_tokenIn, address(vsp), _amountIn, _minAmtOut, address(vVSP));\\n        }\\n    }\\n\\n    /// @notice Deposit vPool tokens and unwrap them\\n    function depositAndUnwrap(IVesperPool _vPool, uint256 _amount) external onlyKeeper {\\n        _vPool.transferFrom(_msgSender(), address(this), _amount);\\n        _vPool.withdraw(_amount);\\n    }\\n\\n    /// @notice Withdraw (a.k.a. unwrap) underlying token from vPool\\n    function unwrap(IVesperPool _vPool, uint256 _amount) public onlyKeeper {\\n        _vPool.withdraw(_amount);\\n    }\\n\\n    /// @notice Withdraw (a.k.a. unwrap) underlying token from vPool\\n    /// @dev Uses all held vPool tokens\\n    function unwrapAll(IVesperPool _vPool) external onlyKeeper {\\n        unwrap(_vPool, _vPool.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Transfer VSP tokens to vVSP\\n    function transferVspToVVSP(uint256 _amount) public onlyKeeper {\\n        vsp.safeTransfer(address(vVSP), _amount);\\n    }\\n\\n    /// @notice Transfer VSP tokens to vVSP\\n    /// @dev Uses all held VSP tokens\\n    function transferAllVspToVVSP() external onlyKeeper {\\n        transferVspToVVSP(vsp.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Approve SwapManager routers if needed\\n    function doInfinityApproval(IERC20 _unwrapped) external onlyKeeper {\\n        _doInfinityApprovalIfNeeded(_unwrapped, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Add given address in provided address list.\\n     * @dev Use it to add keeper in keepers list and to add address in feeWhitelist\\n     * @param _addressToAdd address which we want to add in AddressList.\\n     */\\n    function addInKeepersList(address _addressToAdd) external onlyKeeper {\\n        require(IAddressList(keepers).add(_addressToAdd), Errors.ADD_IN_LIST_FAILED);\\n    }\\n\\n    /**\\n     * @notice Remove given address from provided address list.\\n     * @dev Use it to remove keeper from keepers list and to remove address from feeWhitelist\\n     * @param _addressToRemove address which we want to remove from AddressList.\\n     */\\n    function removeFromKeepersList(address _addressToRemove) external onlyKeeper {\\n        require(IAddressList(keepers).remove(_addressToRemove), Errors.REMOVE_FROM_LIST_FAILED);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n}\\n\",\"keccak256\":\"0x650ad73c2adc7faba86c4e067de25451f040c4860e68f6e0e9ab416e19c03d69\",\"license\":\"MIT\"},\"contracts/utils/UsingSwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../Governed.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\n\\nabstract contract UsingSwapManager is Governed {\\n    using SafeERC20 for IERC20;\\n\\n    address weth; // Native token\\n    ISwapManager public swapManager;\\n    uint256 public oraclePeriod = 3600; // 1h;\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2;\\n    uint256 public swapSlippage = 1000; // 10%\\n\\n    event UpdatedSwapManager(address indexed oldSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(address _weth, ISwapManager _swapManager) {\\n        require(address(_weth) != address(0), \\\"weth-is-null\\\");\\n        require(address(_swapManager) != address(0), \\\"swap-manager-is-null\\\");\\n\\n        weth = _weth;\\n        swapManager = _swapManager;\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    /**\\n     * @notice Update swap slippage value\\n     * @param _newSwapSlippage new swap slippage\\n     */\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _tokenIn address of from token\\n     * @param _tokenOut address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _to\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_tokenIn, _tokenOut, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(_amountIn, _minAmountOut, path, _to, block.timestamp);\\n        }\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _doInfinityApprovalIfNeeded(IERC20 _asset, uint256 _amountToSwap) internal {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            if (IERC20(_asset).allowance(address(this), address(swapManager.ROUTERS(i))) < _amountToSwap) {\\n                IERC20(_asset).safeApprove(address(swapManager.ROUTERS(i)), type(uint256).max);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4642bdae097377aad2a6e74e5c86e5e950aa933e25413f507d0171cb89cbbd9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052610e1060045560006005556103e86006553480156200002257600080fd5b5060405162002f0538038062002f0583398101604081905262000045916200046d565b83816000336000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051929350917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3506001600160a01b038216620000e95760405162461bcd60e51b815260206004820152600c60248201526b1dd95d1a0b5a5ccb5b9d5b1b60a21b60448201526064015b60405180910390fd5b6001600160a01b038116620001415760405162461bcd60e51b815260206004820152601460248201527f737761702d6d616e616765722d69732d6e756c6c0000000000000000000000006044820152606401620000e0565b600280546001600160a01b03199081166001600160a01b0394851617909155600380549091169183169190911790558316620001af5760405162461bcd60e51b815260206004820152600c60248201526b1d9d9cdc0b5a5ccb5b9d5b1b60a21b6044820152606401620000e0565b6001600160a01b038216620002075760405162461bcd60e51b815260206004820152601c60248201527f616464726573732d6c6973742d666163746f72792d69732d6e756c6c000000006044820152606401620000e0565b600080546001600160a01b03808816620100000262010000600160b01b031990921691909117909155600880549185166001600160a01b03199092168217905560408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200027e57600080fd5b505afa15801562000293573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b9919062000447565b600760006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200031b57600080fd5b505af115801562000330573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000356919062000447565b600980546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f620003823390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015620003c457600080fd5b505af1158015620003d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ff9190620004ec565b60405180604001604052806002815260200161313360f01b815250906200043b5760405162461bcd60e51b8152600401620000e091906200050e565b5050505050506200057d565b60006020828403121562000459578081fd5b8151620004668162000564565b9392505050565b600080600080600060a0868803121562000485578081fd5b8551620004928162000564565b6020870151909550620004a58162000564565b6040870151909450620004b88162000564565b6060870151909350620004cb8162000564565b6080870151909250620004de8162000564565b809150509295509295909350565b600060208284031215620004fe578081fd5b8151801515811462000466578182fd5b6000602080835283518082850152825b818110156200053c578581018301518582016040015282016200051e565b818111156200054e5783604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146200057a57600080fd5b50565b612978806200058d6000396000f3fe60806040526004361061014b5760003560e01c806389dafc70116100b6578063be9f13691161006f578063be9f1369146103a4578063cd2d7ebe146103c4578063d2423b51146103da578063d6c22f36146103ed578063dda5c03d1461040d578063f3b27bc31461042d5761014b565b806389dafc70146102e457806392226ef414610304578063951dc22c14610324578063a712260c14610344578063a923b2a614610364578063b6aa515b146103845761014b565b806339d7738e1161010857806339d7738e1461022e57806339f476931461024e57806342189c8f1461026e5780634c36fad71461028457806367f5e4b8146102a4578063709d039d146102c45761014b565b806309e7814d146101505780630c340a24146101725780631ad31d68146101b55780631aedeabe146101ca57806324d9f2c1146101ee57806329ba73ed1461020e575b600080fd5b34801561015c57600080fd5b5061017061016b366004612600565b610442565b005b34801561017e57600080fd5b50600054610198906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101c157600080fd5b50610170610510565b3480156101d657600080fd5b506101e060065481565b6040519081526020016101ac565b3480156101fa57600080fd5b50610170610209366004612285565b610634565b34801561021a57600080fd5b50600754610198906001600160a01b031681565b34801561023a57600080fd5b50610170610249366004612269565b61074c565b34801561025a57600080fd5b5061017061026936600461255e565b6108a9565b34801561027a57600080fd5b506101e060045481565b34801561029057600080fd5b5061017061029f366004612269565b6109ad565b3480156102b057600080fd5b506101706102bf366004612600565b610ad0565b3480156102d057600080fd5b50600354610198906001600160a01b031681565b3480156102f057600080fd5b506101706102ff36600461255e565b610b8c565b34801561031057600080fd5b5061017061031f3660046122b0565b610cf5565b34801561033057600080fd5b50600954610198906001600160a01b031681565b34801561035057600080fd5b5061017061035f366004612269565b610ee8565b34801561037057600080fd5b5061017061037f366004612630565b611045565b34801561039057600080fd5b5061017061039f366004612269565b6111ea565b3480156103b057600080fd5b506101706103bf366004612269565b611293565b3480156103d057600080fd5b506101e060055481565b6101706103e8366004612412565b6113b5565b3480156103f957600080fd5b50610170610408366004612269565b611496565b34801561041957600080fd5b50600854610198906001600160a01b031681565b34801561043957600080fd5b50610170611547565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561049357600080fd5b505afa1580156104a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cb9190612526565b6104f05760405162461bcd60e51b81526004016104e7906126dd565b60405180910390fd5b60085460075461050d916001600160a01b03918216911683611619565b50565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561056157600080fd5b505afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190612526565b6105b55760405162461bcd60e51b81526004016104e7906126dd565b6007546040516370a0823160e01b8152306004820152610632916001600160a01b0316906370a082319060240160206040518083038186803b1580156105fa57600080fd5b505afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190612618565b565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561068557600080fd5b505afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190612526565b6106d95760405162461bcd60e51b81526004016104e7906126dd565b801561074857600060065461271014156106f4576001610721565b60075461072190610719906107139086906001600160a01b031661167c565b84611841565b60065461196c565b6007546008549192506107469185916001600160a01b03908116918691869116611996565b505b5050565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561079d57600080fd5b505afa1580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190612526565b6107f15760405162461bcd60e51b81526004016104e7906126dd565b600954604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561083857600080fd5b505af115801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190612526565b604051806040016040528060028152602001610c4d60f21b815250906107485760405162461bcd60e51b81526004016104e791906126aa565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156108fa57600080fd5b505afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190612526565b61094e5760405162461bcd60e51b81526004016104e7906126dd565b604051632e1a7d4d60e01b8152600481018290526001600160a01b03831690632e1a7d4d906024015b600060405180830381600087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03620100009091041633146109de5760405162461bcd60e51b81526004016104e790612703565b6001600160a01b038116610a295760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016104e7565b6003546001600160a01b0382811691161415610a745760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016104e7565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0362010000909104163314610b015760405162461bcd60e51b81526004016104e790612703565b612710811115610b4c5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016104e7565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190612526565b610c315760405162461bcd60e51b81526004016104e7906126dd565b6001600160a01b0382166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc79190612526565b50604051632e1a7d4d60e01b8152600481018290526001600160a01b03831690632e1a7d4d90602401610977565b6000546001600160a01b0362010000909104163314610d265760405162461bcd60e51b81526004016104e790612703565b6000825111610d6e5760405162461bcd60e51b81526020600482015260146024820152736173736574732d6c6973742d69732d656d70747960601b60448201526064016104e7565b6001600160a01b038116301415610dc75760405162461bcd60e51b815260206004820152601760248201527f6e65772d636f6e74726163742d69732d696e76616c696400000000000000000060448201526064016104e7565b60005b8251811015610746576000838281518110610df557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190612618565b9050610e936001600160a01b0383168583611619565b604080516001600160a01b0384168152602081018390527f89e3a121d1cd78499f7e8aff03cca5860941384d8829eea0ff8f93cda53de52b910160405180910390a1505080610ee1906128d8565b9050610dca565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610f3957600080fd5b505afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190612526565b610f8d5760405162461bcd60e51b81526004016104e7906126dd565b600954604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610fd457600080fd5b505af1158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c9190612526565b60405180604001604052806002815260200161313360f01b815250906107485760405162461bcd60e51b81526004016104e791906126aa565b6000546001600160a01b03620100009091041633146110765760405162461bcd60e51b81526004016104e790612703565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc9190612618565b81106111415760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016104e7565b8161114c5760045491505b603b82116111945760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016104e7565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6000546001600160a01b036201000090910416331461121b5760405162461bcd60e51b81526004016104e790612703565b6001600160a01b0381166112715760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f0000000000000060448201526064016104e7565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c9190612526565b6113385760405162461bcd60e51b81526004016104e7906126dd565b6040516370a0823160e01b815230600482015261050d9082906001600160a01b038216906370a082319060240160206040518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102699190612618565b60005b8281101561149057600080308686858181106113e457634e487b7160e01b600052603260045260246000fd5b90506020028101906113f6919061279d565b60405161140492919061267e565b600060405180830381855af49150503d806000811461143f576040519150601f19603f3d011682016040523d82523d6000602084013e611444565b606091505b5091509150811580156114545750835b1561147b5761146281611b58565b60405162461bcd60e51b81526004016104e791906126aa565b50508080611488906128d8565b9150506113b8565b50505050565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156114e757600080fd5b505afa1580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151f9190612526565b61153b5760405162461bcd60e51b81526004016104e7906126dd565b61050d81600019611bc0565b6001546001600160a01b031633146115a15760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f720000000000000060448201526064016104e7565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a3600180546000805462010000600160b01b0319166001600160a01b03831662010000021790556001600160a01b0319169055565b6040516001600160a01b03831660248201526044810182905261074690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611dff565b6002546060906001600160a01b03848116911614806116a857506002546001600160a01b038381169116145b1561175657604080516002808252606082018352909160208301908036833701905050905082816000815181106116ef57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061173157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061183b565b604080516003808252608082019092529060208201606080368337019050509050828160008151811061179957634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526002548251911690829060019081106117d857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160028151811061181a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b92915050565b6000600183511161188a5760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b60448201526064016104e7565b50806000805b6001855161189e9190612895565b8110156119645761190a8582815181106118c857634e487b7160e01b600052603260045260246000fd5b6020026020010151868360016118de919061283e565b815181106118fc57634e487b7160e01b600052603260045260246000fd5b602002602001015185611ed1565b9093509150816119525760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b60448201526064016104e7565b8061195c816128d8565b915050611890565b505092915050565b600061271061197b8382612895565b6119859085612876565b61198f9190612856565b9392505050565b600354604051631d1f307960e31b81526001600160a01b038781166004830152868116602483015260448201869052600092839283929091169063e8f983c89060640160006040518083038186803b1580156119f157600080fd5b505afa158015611a05573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a2d9190810190612363565b9250925092508460001415611a4157600194505b8115611b4e57600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b158015611a8b57600080fd5b505afa158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac39190612542565b6001600160a01b03166338ed173987878688426040518663ffffffff1660e01b8152600401611af695949392919061272d565b600060405180830381600087803b158015611b1057600080fd5b505af1158015611b24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b4c9190810190612493565b505b5050505050505050565b6060604482511015611b9e575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152611bbb565b60048201915081806020019051810190611bb89190612570565b90505b919050565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1157600080fd5b505afa158015611c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c499190612618565b81101561074657600354604051636e74a6f760e01b81526004810183905283916001600160a01b038681169263dd62ed3e9230921690636e74a6f79060240160206040518083038186803b158015611ca057600080fd5b505afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd89190612542565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015611d1e57600080fd5b505afa158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d569190612618565b1015611ded57600354604051636e74a6f760e01b815260048101839052611ded916001600160a01b031690636e74a6f79060240160206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda9190612542565b6001600160a01b03851690600019611fc2565b80611df7816128d8565b915050611bc3565b6000611e54826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120e69092919063ffffffff16565b8051909150156107465780806020019051810190611e729190612526565b6107465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104e7565b6003546004805460055460405163b67bb24d60e01b81526001600160a01b038881169482019490945286841660248201526044810186905260648101929092526084820152600092839283928392919091169063b67bb24d9060a401606060405180830381600087803b158015611f4757600080fd5b505af1158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f9190612651565b509150915060045442611f929190612895565b81118015611f9f57508115155b15611fb05750915060019050611fba565b6000809350935050505b935093915050565b80158061204b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561201157600080fd5b505afa158015612025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120499190612618565b155b6120b65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104e7565b6040516001600160a01b03831660248201526044810182905261074690849063095ea7b360e01b90606401611645565b60606120f584846000856120fd565b949350505050565b60608247101561215e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104e7565b843b6121ac5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e7565b600080866001600160a01b031685876040516121c8919061268e565b60006040518083038185875af1925050503d8060008114612205576040519150601f19603f3d011682016040523d82523d6000602084013e61220a565b606091505b509150915061221a828286612225565b979650505050505050565b6060831561223457508161198f565b8251156122445782518084602001fd5b8160405162461bcd60e51b81526004016104e791906126aa565b8035611bbb8161291f565b60006020828403121561227a578081fd5b813561198f8161291f565b60008060408385031215612297578081fd5b82356122a28161291f565b946020939093013593505050565b600080604083850312156122c2578182fd5b823567ffffffffffffffff8111156122d8578283fd5b8301601f810185136122e8578283fd5b803560206122fd6122f88361281a565b6127e9565b80838252828201915082850189848660051b880101111561231c578788fd5b8795505b848610156123475780356123338161291f565b835260019590950194918301918301612320565b509550612357905086820161225e565b93505050509250929050565b600080600060608486031215612377578081fd5b835167ffffffffffffffff81111561238d578182fd5b8401601f8101861361239d578182fd5b805160206123ad6122f88361281a565b8083825282820191508285018a848660051b88010111156123cc578687fd5b8695505b848610156123f75780516123e38161291f565b8352600195909501949183019183016123d0565b50918801516040909801519199979850909695505050505050565b600080600060408486031215612426578283fd5b833567ffffffffffffffff8082111561243d578485fd5b818601915086601f830112612450578485fd5b81358181111561245e578586fd5b8760208260051b8501011115612472578586fd5b6020928301955093505084013561248881612934565b809150509250925092565b600060208083850312156124a5578182fd5b825167ffffffffffffffff8111156124bb578283fd5b8301601f810185136124cb578283fd5b80516124d96122f88261281a565b80828252848201915084840188868560051b87010111156124f8578687fd5b8694505b8385101561251a5780518352600194909401939185019185016124fc565b50979650505050505050565b600060208284031215612537578081fd5b815161198f81612934565b600060208284031215612553578081fd5b815161198f8161291f565b60008060408385031215612297578182fd5b600060208284031215612581578081fd5b815167ffffffffffffffff80821115612598578283fd5b818401915084601f8301126125ab578283fd5b8151818111156125bd576125bd612909565b6125d0601f8201601f19166020016127e9565b91508082528560208285010111156125e6578384fd5b6125f78160208401602086016128ac565b50949350505050565b600060208284031215612611578081fd5b5035919050565b600060208284031215612629578081fd5b5051919050565b60008060408385031215612642578182fd5b50508035926020909101359150565b600080600060608486031215612665578081fd5b8351925060208401519150604084015161248881612934565b6000828483379101908152919050565b600082516126a08184602087016128ac565b9190910192915050565b60006020825282518060208401526126c98160408501602087016128ac565b601f01601f19169190910160400192915050565b6020808252600c908201526b3737ba16b096b5b2b2b832b960a11b604082015260600190565b60208082526010908201526f3737ba16ba343296b3b7bb32b93737b960811b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561277c5784516001600160a01b031683529383019391830191600101612757565b50506001600160a01b03969096166060850152505050608001529392505050565b6000808335601e198436030181126127b3578283fd5b83018035915067ffffffffffffffff8211156127cd578283fd5b6020019150368190038213156127e257600080fd5b9250929050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561281257612812612909565b604052919050565b600067ffffffffffffffff82111561283457612834612909565b5060051b60200190565b60008219821115612851576128516128f3565b500190565b60008261287157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612890576128906128f3565b500290565b6000828210156128a7576128a76128f3565b500390565b60005b838110156128c75781810151838201526020016128af565b838111156114905750506000910152565b60006000198214156128ec576128ec6128f3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461050d57600080fd5b801515811461050d57600080fdfea2646970667358221220da0409dea33fc2c1397d848811d9627dbdc1484a0919277b5cd8049b4f22431164736f6c63430008030033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c806389dafc70116100b6578063be9f13691161006f578063be9f1369146103a4578063cd2d7ebe146103c4578063d2423b51146103da578063d6c22f36146103ed578063dda5c03d1461040d578063f3b27bc31461042d5761014b565b806389dafc70146102e457806392226ef414610304578063951dc22c14610324578063a712260c14610344578063a923b2a614610364578063b6aa515b146103845761014b565b806339d7738e1161010857806339d7738e1461022e57806339f476931461024e57806342189c8f1461026e5780634c36fad71461028457806367f5e4b8146102a4578063709d039d146102c45761014b565b806309e7814d146101505780630c340a24146101725780631ad31d68146101b55780631aedeabe146101ca57806324d9f2c1146101ee57806329ba73ed1461020e575b600080fd5b34801561015c57600080fd5b5061017061016b366004612600565b610442565b005b34801561017e57600080fd5b50600054610198906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101c157600080fd5b50610170610510565b3480156101d657600080fd5b506101e060065481565b6040519081526020016101ac565b3480156101fa57600080fd5b50610170610209366004612285565b610634565b34801561021a57600080fd5b50600754610198906001600160a01b031681565b34801561023a57600080fd5b50610170610249366004612269565b61074c565b34801561025a57600080fd5b5061017061026936600461255e565b6108a9565b34801561027a57600080fd5b506101e060045481565b34801561029057600080fd5b5061017061029f366004612269565b6109ad565b3480156102b057600080fd5b506101706102bf366004612600565b610ad0565b3480156102d057600080fd5b50600354610198906001600160a01b031681565b3480156102f057600080fd5b506101706102ff36600461255e565b610b8c565b34801561031057600080fd5b5061017061031f3660046122b0565b610cf5565b34801561033057600080fd5b50600954610198906001600160a01b031681565b34801561035057600080fd5b5061017061035f366004612269565b610ee8565b34801561037057600080fd5b5061017061037f366004612630565b611045565b34801561039057600080fd5b5061017061039f366004612269565b6111ea565b3480156103b057600080fd5b506101706103bf366004612269565b611293565b3480156103d057600080fd5b506101e060055481565b6101706103e8366004612412565b6113b5565b3480156103f957600080fd5b50610170610408366004612269565b611496565b34801561041957600080fd5b50600854610198906001600160a01b031681565b34801561043957600080fd5b50610170611547565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561049357600080fd5b505afa1580156104a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cb9190612526565b6104f05760405162461bcd60e51b81526004016104e7906126dd565b60405180910390fd5b60085460075461050d916001600160a01b03918216911683611619565b50565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561056157600080fd5b505afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190612526565b6105b55760405162461bcd60e51b81526004016104e7906126dd565b6007546040516370a0823160e01b8152306004820152610632916001600160a01b0316906370a082319060240160206040518083038186803b1580156105fa57600080fd5b505afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190612618565b565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561068557600080fd5b505afa158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190612526565b6106d95760405162461bcd60e51b81526004016104e7906126dd565b801561074857600060065461271014156106f4576001610721565b60075461072190610719906107139086906001600160a01b031661167c565b84611841565b60065461196c565b6007546008549192506107469185916001600160a01b03908116918691869116611996565b505b5050565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561079d57600080fd5b505afa1580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190612526565b6107f15760405162461bcd60e51b81526004016104e7906126dd565b600954604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561083857600080fd5b505af115801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190612526565b604051806040016040528060028152602001610c4d60f21b815250906107485760405162461bcd60e51b81526004016104e791906126aa565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156108fa57600080fd5b505afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190612526565b61094e5760405162461bcd60e51b81526004016104e7906126dd565b604051632e1a7d4d60e01b8152600481018290526001600160a01b03831690632e1a7d4d906024015b600060405180830381600087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03620100009091041633146109de5760405162461bcd60e51b81526004016104e790612703565b6001600160a01b038116610a295760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016104e7565b6003546001600160a01b0382811691161415610a745760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016104e7565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0362010000909104163314610b015760405162461bcd60e51b81526004016104e790612703565b612710811115610b4c5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016104e7565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190612526565b610c315760405162461bcd60e51b81526004016104e7906126dd565b6001600160a01b0382166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc79190612526565b50604051632e1a7d4d60e01b8152600481018290526001600160a01b03831690632e1a7d4d90602401610977565b6000546001600160a01b0362010000909104163314610d265760405162461bcd60e51b81526004016104e790612703565b6000825111610d6e5760405162461bcd60e51b81526020600482015260146024820152736173736574732d6c6973742d69732d656d70747960601b60448201526064016104e7565b6001600160a01b038116301415610dc75760405162461bcd60e51b815260206004820152601760248201527f6e65772d636f6e74726163742d69732d696e76616c696400000000000000000060448201526064016104e7565b60005b8251811015610746576000838281518110610df557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610e4557600080fd5b505afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d9190612618565b9050610e936001600160a01b0383168583611619565b604080516001600160a01b0384168152602081018390527f89e3a121d1cd78499f7e8aff03cca5860941384d8829eea0ff8f93cda53de52b910160405180910390a1505080610ee1906128d8565b9050610dca565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610f3957600080fd5b505afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190612526565b610f8d5760405162461bcd60e51b81526004016104e7906126dd565b600954604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610fd457600080fd5b505af1158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c9190612526565b60405180604001604052806002815260200161313360f01b815250906107485760405162461bcd60e51b81526004016104e791906126aa565b6000546001600160a01b03620100009091041633146110765760405162461bcd60e51b81526004016104e790612703565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc9190612618565b81106111415760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016104e7565b8161114c5760045491505b603b82116111945760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016104e7565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6000546001600160a01b036201000090910416331461121b5760405162461bcd60e51b81526004016104e790612703565b6001600160a01b0381166112715760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f0000000000000060448201526064016104e7565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c9190612526565b6113385760405162461bcd60e51b81526004016104e7906126dd565b6040516370a0823160e01b815230600482015261050d9082906001600160a01b038216906370a082319060240160206040518083038186803b15801561137d57600080fd5b505afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102699190612618565b60005b8281101561149057600080308686858181106113e457634e487b7160e01b600052603260045260246000fd5b90506020028101906113f6919061279d565b60405161140492919061267e565b600060405180830381855af49150503d806000811461143f576040519150601f19603f3d011682016040523d82523d6000602084013e611444565b606091505b5091509150811580156114545750835b1561147b5761146281611b58565b60405162461bcd60e51b81526004016104e791906126aa565b50508080611488906128d8565b9150506113b8565b50505050565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156114e757600080fd5b505afa1580156114fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151f9190612526565b61153b5760405162461bcd60e51b81526004016104e7906126dd565b61050d81600019611bc0565b6001546001600160a01b031633146115a15760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f720000000000000060448201526064016104e7565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a3600180546000805462010000600160b01b0319166001600160a01b03831662010000021790556001600160a01b0319169055565b6040516001600160a01b03831660248201526044810182905261074690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611dff565b6002546060906001600160a01b03848116911614806116a857506002546001600160a01b038381169116145b1561175657604080516002808252606082018352909160208301908036833701905050905082816000815181106116ef57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061173157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061183b565b604080516003808252608082019092529060208201606080368337019050509050828160008151811061179957634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526002548251911690829060019081106117d857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050818160028151811061181a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b92915050565b6000600183511161188a5760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b60448201526064016104e7565b50806000805b6001855161189e9190612895565b8110156119645761190a8582815181106118c857634e487b7160e01b600052603260045260246000fd5b6020026020010151868360016118de919061283e565b815181106118fc57634e487b7160e01b600052603260045260246000fd5b602002602001015185611ed1565b9093509150816119525760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b60448201526064016104e7565b8061195c816128d8565b915050611890565b505092915050565b600061271061197b8382612895565b6119859085612876565b61198f9190612856565b9392505050565b600354604051631d1f307960e31b81526001600160a01b038781166004830152868116602483015260448201869052600092839283929091169063e8f983c89060640160006040518083038186803b1580156119f157600080fd5b505afa158015611a05573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a2d9190810190612363565b9250925092508460001415611a4157600194505b8115611b4e57600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b158015611a8b57600080fd5b505afa158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac39190612542565b6001600160a01b03166338ed173987878688426040518663ffffffff1660e01b8152600401611af695949392919061272d565b600060405180830381600087803b158015611b1057600080fd5b505af1158015611b24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b4c9190810190612493565b505b5050505050505050565b6060604482511015611b9e575060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c790000006020820152611bbb565b60048201915081806020019051810190611bb89190612570565b90505b919050565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1157600080fd5b505afa158015611c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c499190612618565b81101561074657600354604051636e74a6f760e01b81526004810183905283916001600160a01b038681169263dd62ed3e9230921690636e74a6f79060240160206040518083038186803b158015611ca057600080fd5b505afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd89190612542565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015611d1e57600080fd5b505afa158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d569190612618565b1015611ded57600354604051636e74a6f760e01b815260048101839052611ded916001600160a01b031690636e74a6f79060240160206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda9190612542565b6001600160a01b03851690600019611fc2565b80611df7816128d8565b915050611bc3565b6000611e54826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120e69092919063ffffffff16565b8051909150156107465780806020019051810190611e729190612526565b6107465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104e7565b6003546004805460055460405163b67bb24d60e01b81526001600160a01b038881169482019490945286841660248201526044810186905260648101929092526084820152600092839283928392919091169063b67bb24d9060a401606060405180830381600087803b158015611f4757600080fd5b505af1158015611f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7f9190612651565b509150915060045442611f929190612895565b81118015611f9f57508115155b15611fb05750915060019050611fba565b6000809350935050505b935093915050565b80158061204b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561201157600080fd5b505afa158015612025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120499190612618565b155b6120b65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104e7565b6040516001600160a01b03831660248201526044810182905261074690849063095ea7b360e01b90606401611645565b60606120f584846000856120fd565b949350505050565b60608247101561215e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104e7565b843b6121ac5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e7565b600080866001600160a01b031685876040516121c8919061268e565b60006040518083038185875af1925050503d8060008114612205576040519150601f19603f3d011682016040523d82523d6000602084013e61220a565b606091505b509150915061221a828286612225565b979650505050505050565b6060831561223457508161198f565b8251156122445782518084602001fd5b8160405162461bcd60e51b81526004016104e791906126aa565b8035611bbb8161291f565b60006020828403121561227a578081fd5b813561198f8161291f565b60008060408385031215612297578081fd5b82356122a28161291f565b946020939093013593505050565b600080604083850312156122c2578182fd5b823567ffffffffffffffff8111156122d8578283fd5b8301601f810185136122e8578283fd5b803560206122fd6122f88361281a565b6127e9565b80838252828201915082850189848660051b880101111561231c578788fd5b8795505b848610156123475780356123338161291f565b835260019590950194918301918301612320565b509550612357905086820161225e565b93505050509250929050565b600080600060608486031215612377578081fd5b835167ffffffffffffffff81111561238d578182fd5b8401601f8101861361239d578182fd5b805160206123ad6122f88361281a565b8083825282820191508285018a848660051b88010111156123cc578687fd5b8695505b848610156123f75780516123e38161291f565b8352600195909501949183019183016123d0565b50918801516040909801519199979850909695505050505050565b600080600060408486031215612426578283fd5b833567ffffffffffffffff8082111561243d578485fd5b818601915086601f830112612450578485fd5b81358181111561245e578586fd5b8760208260051b8501011115612472578586fd5b6020928301955093505084013561248881612934565b809150509250925092565b600060208083850312156124a5578182fd5b825167ffffffffffffffff8111156124bb578283fd5b8301601f810185136124cb578283fd5b80516124d96122f88261281a565b80828252848201915084840188868560051b87010111156124f8578687fd5b8694505b8385101561251a5780518352600194909401939185019185016124fc565b50979650505050505050565b600060208284031215612537578081fd5b815161198f81612934565b600060208284031215612553578081fd5b815161198f8161291f565b60008060408385031215612297578182fd5b600060208284031215612581578081fd5b815167ffffffffffffffff80821115612598578283fd5b818401915084601f8301126125ab578283fd5b8151818111156125bd576125bd612909565b6125d0601f8201601f19166020016127e9565b91508082528560208285010111156125e6578384fd5b6125f78160208401602086016128ac565b50949350505050565b600060208284031215612611578081fd5b5035919050565b600060208284031215612629578081fd5b5051919050565b60008060408385031215612642578182fd5b50508035926020909101359150565b600080600060608486031215612665578081fd5b8351925060208401519150604084015161248881612934565b6000828483379101908152919050565b600082516126a08184602087016128ac565b9190910192915050565b60006020825282518060208401526126c98160408501602087016128ac565b601f01601f19169190910160400192915050565b6020808252600c908201526b3737ba16b096b5b2b2b832b960a11b604082015260600190565b60208082526010908201526f3737ba16ba343296b3b7bb32b93737b960811b604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561277c5784516001600160a01b031683529383019391830191600101612757565b50506001600160a01b03969096166060850152505050608001529392505050565b6000808335601e198436030181126127b3578283fd5b83018035915067ffffffffffffffff8211156127cd578283fd5b6020019150368190038213156127e257600080fd5b9250929050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561281257612812612909565b604052919050565b600067ffffffffffffffff82111561283457612834612909565b5060051b60200190565b60008219821115612851576128516128f3565b500190565b60008261287157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612890576128906128f3565b500290565b6000828210156128a7576128a76128f3565b500390565b60005b838110156128c75781810151838201526020016128af565b838111156114905750506000910152565b60006000198214156128ec576128ec6128f3565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461050d57600080fd5b801515811461050d57600080fdfea2646970667358221220da0409dea33fc2c1397d848811d9627dbdc1484a0919277b5cd8049b4f22431164736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "addInKeepersList(address)": {
        "details": "Use it to add keeper in keepers list and to add address in feeWhitelist",
        "params": {
          "_addressToAdd": "address which we want to add in AddressList."
        }
      },
      "batch(bytes[],bool)": {
        "params": {
          "calls": "An array of inputs for each call.",
          "revertOnFail": "If True then reverts after a failed call and stops doing further calls."
        }
      },
      "migrateAssets(address[],address)": {
        "details": "The caller has to set the addresses list since we don't maintain a list of them",
        "params": {
          "_assets": "List of assets' address to transfer from",
          "_to": "Assets recipient"
        }
      },
      "removeFromKeepersList(address)": {
        "details": "Use it to remove keeper from keepers list and to remove address from feeWhitelist",
        "params": {
          "_addressToRemove": "address which we want to remove from AddressList."
        }
      },
      "swapForVspAndTransferToVVSP(address,uint256)": {
        "details": "The vVVSP is the beneficiary of the swapHave to check allowance to routers before calling this"
      },
      "transferAllVspToVVSP()": {
        "details": "Uses all held VSP tokens"
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "unwrapAll(address)": {
        "details": "Uses all held vPool tokens"
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "updateSwapSlippage(uint256)": {
        "params": {
          "_newSwapSlippage": "new swap slippage"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addInKeepersList(address)": {
        "notice": "Add given address in provided address list."
      },
      "batch(bytes[],bool)": {
        "notice": "Allows batched call to self (this contract)."
      },
      "depositAndUnwrap(address,uint256)": {
        "notice": "Deposit vPool tokens and unwrap them"
      },
      "doInfinityApproval(address)": {
        "notice": "Approve SwapManager routers if needed"
      },
      "migrateAssets(address[],address)": {
        "notice": "Migrate assets to a new contract"
      },
      "removeFromKeepersList(address)": {
        "notice": "Remove given address from provided address list."
      },
      "swapForVspAndTransferToVVSP(address,uint256)": {
        "notice": "Perform a slippage-protected swap for VSP"
      },
      "transferAllVspToVVSP()": {
        "notice": "Transfer VSP tokens to vVSP"
      },
      "transferVspToVVSP(uint256)": {
        "notice": "Transfer VSP tokens to vVSP"
      },
      "unwrap(address,uint256)": {
        "notice": "Withdraw (a.k.a. unwrap) underlying token from vPool"
      },
      "unwrapAll(address)": {
        "notice": "Withdraw (a.k.a. unwrap) underlying token from vPool"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      },
      "updateSwapSlippage(uint256)": {
        "notice": "Update swap slippage value"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 887,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 890,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3732,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3734,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 40497,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 40500,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)4660"
      },
      {
        "astId": 40503,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 40506,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 40509,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 40087,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "vsp",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)1552"
      },
      {
        "astId": 40090,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "vVSP",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IVesperPool)6821"
      },
      {
        "astId": 40092,
        "contract": "contracts/utils/BuyBack.sol:BuyBack",
        "label": "keepers",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1552": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)4660": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_contract(IVesperPool)6821": {
        "encoding": "inplace",
        "label": "contract IVesperPool",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}