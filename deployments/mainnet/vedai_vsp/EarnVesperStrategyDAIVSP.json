{
  "address": "0xDc1046DBb73E7BE8C0B2B72A4987522D425bc93C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDripPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDripPeriod",
          "type": "uint256"
        }
      ],
      "name": "DripPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveGrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dripToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressListFactory",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferToDripContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dripPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateDripPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50229bbf549728e8f54ce3626b2e7b2c96d882d3ff8d1676bc17048c77572e43",
  "receipt": {
    "to": null,
    "from": "0x1CbfaE0367a9B1e4Ac2c158E57B5F00cCb337271",
    "contractAddress": "0xDc1046DBb73E7BE8C0B2B72A4987522D425bc93C",
    "transactionIndex": 336,
    "gasUsed": "3774447",
    "logsBloom": "0x
    "blockHash": "0x95bf30792e7d6bcc3ba588c864fcb75889abb8aa51b95d29e38f9609ce92ee99",
    "transactionHash": "0x50229bbf549728e8f54ce3626b2e7b2c96d882d3ff8d1676bc17048c77572e43",
    "logs": [],
    "blockNumber": 13779960,
    "cumulativeGasUsed": "25468443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8209f3a03730c035163B4414c1545a3137D5B402",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710"
  ],
  "solcInputHash": "9fa3ab347f27460d477bd028befc9c60",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDripPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDripPeriod\",\"type\":\"uint256\"}],\"name\":\"DripPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveGrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToDripContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dripPeriod\",\"type\":\"uint256\"}],\"name\":\"updateDripPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveGrowToken()\":{\"details\":\"Approves EarnDrip' Grow token to spend dripToken\"},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"init(address)\":{\"params\":{\"_addressListFactory\":\"To support same code in eth side chain, user _addressListFactory as param mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291 avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54\"}},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Report total value in collateral token\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateDripPeriod(uint256)\":{\"details\":\"_dripPeriod in seconds\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit DAI in a Vesper Grow Pool and earn interest in VSP.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"init(address)\":{\"notice\":\"Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value using underlying vToken\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateDripPeriod(uint256)\":{\"notice\":\"Update update period of distribution of earning done in one rebalance\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol\":\"EarnVesperStrategyDAIVSP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7c33866bea8f329ae2e1b858695eb58eb44d5495b2b47cf677df2329abc4bd98\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IEarnDrip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./IPoolRewards.sol\\\";\\n\\ninterface IEarnDrip is IPoolRewards {\\n    function rewardTokens(uint256 _index) external view returns (address);\\n\\n    function growToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb58666a8838a99086dacecbac9701043a8b0535eea03d077eac240ae943fdc4b\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address _account)\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x2c32aea3476eebd75122915430df1c37e7a40778402f3c72aa3b6a40301cb485\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x55451a0724e4c8982f247e2c3f6d5fc2899c98381287953e07346b28b4586efa\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0725eb59a54238cbdcf2d14d2759a2fb4bd7550b9e4183c9350ff72e46a2b674\",\"license\":\"MIT\"},\"contracts/strategies/Earn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/vesper/IEarnDrip.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"./Strategy.sol\\\";\\n\\nabstract contract Earn is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable dripToken;\\n\\n    uint256 public dripPeriod = 48 hours;\\n    uint256 public totalEarned; // accounting total stable coin earned. This amount is not reported to pool.\\n\\n    event DripPeriodUpdated(uint256 oldDripPeriod, uint256 newDripPeriod);\\n\\n    constructor(address _dripToken) {\\n        require(_dripToken != address(0), \\\"dripToken-zero\\\");\\n        dripToken = _dripToken;\\n    }\\n\\n    /**\\n     * @notice Update update period of distribution of earning done in one rebalance\\n     * @dev _dripPeriod in seconds\\n     */\\n    function updateDripPeriod(uint256 _dripPeriod) external onlyGovernor {\\n        require(_dripPeriod != 0, \\\"dripPeriod-zero\\\");\\n        require(_dripPeriod != dripPeriod, \\\"same-dripPeriod\\\");\\n        emit DripPeriodUpdated(dripPeriod, _dripPeriod);\\n        dripPeriod = _dripPeriod;\\n    }\\n\\n    /// @dev Approves EarnDrip' Grow token to spend dripToken\\n    function approveGrowToken() external onlyKeeper {\\n        address _dripContract = IVesperPool(pool).poolRewards();\\n        address _growPool = IEarnDrip(_dripContract).growToken();\\n        // Checks that the Grow Pool supports dripToken as underlying\\n        require(address(IVesperPool(_growPool).token()) == dripToken, \\\"invalid-grow-pool\\\");\\n        IERC20(dripToken).safeApprove(_growPool, 0);\\n        IERC20(dripToken).safeApprove(_growPool, MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Converts excess collateral earned to drip token\\n    function _convertCollateralToDrip() internal {\\n        uint256 _collateralAmount = collateralToken.balanceOf(address(this));\\n        _convertCollateralToDrip(_collateralAmount);\\n    }\\n\\n    function _convertCollateralToDrip(uint256 _collateralAmount) internal {\\n        if (_collateralAmount != 0) {\\n            uint256 minAmtOut =\\n                (swapSlippage != 10000)\\n                    ? _calcAmtOutAfterSlippage(\\n                        _getOracleRate(_simpleOraclePath(address(collateralToken), dripToken), _collateralAmount),\\n                        swapSlippage\\n                    )\\n                    : 1;\\n            _safeSwap(address(collateralToken), dripToken, _collateralAmount, minAmtOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Send this earning to drip contract.\\n     */\\n    function _forwardEarning() internal virtual {\\n        (, uint256 _interestFee, , , , , , ) = IVesperPool(pool).strategy(address(this));\\n        address _dripContract = IVesperPool(pool).poolRewards();\\n        uint256 _earned = IERC20(dripToken).balanceOf(address(this));\\n        if (_earned != 0) {\\n            // Fetches which rewardToken collects the drip\\n            address _growPool = IEarnDrip(_dripContract).growToken();\\n            // Checks that the Grow Pool supports dripToken as underlying\\n            require(address(IVesperPool(_growPool).token()) == dripToken, \\\"invalid-grow-pool\\\");\\n            totalEarned += _earned;\\n            uint256 _growPoolBalanceBefore = IERC20(_growPool).balanceOf(address(this));\\n            IVesperPool(_growPool).deposit(_earned);\\n            uint256 _growPoolShares = IERC20(_growPool).balanceOf(address(this)) - _growPoolBalanceBefore;\\n            uint256 _fee = (_growPoolShares * _interestFee) / 10000;\\n            if (_fee != 0) {\\n                IERC20(_growPool).safeTransfer(feeCollector, _fee);\\n                _growPoolShares -= _fee;\\n            }\\n            IERC20(_growPool).safeTransfer(_dripContract, _growPoolShares);\\n            IEarnDrip(_dripContract).notifyRewardAmount(_growPool, _growPoolShares, dripPeriod);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97e387bc346f95366930a471ed8fb8a4fe475aaceeac5753332cba041561bc58\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    IAddressList public override keepers;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Create keeper list\\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\\n     * mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\\n     * polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\\n     * avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54\\n     */\\n    function init(address _addressListFactory) external onlyGovernor {\\n        require(address(keepers) == address(0), \\\"keeper-list-already-created\\\");\\n        // Prepare keeper list\\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\\n        keepers = IAddressList(_factory.createList());\\n        require(keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal pure returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0xdc0899f84d46d358375f9f2c8dd47338eb347b7fb3322be4901888fe97a4d7d7\",\"license\":\"MIT\"},\"contracts/strategies/vesper/VesperStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title This Strategy will deposit collateral token in a Vesper Grow Pool\\nabstract contract VesperStrategy is Strategy {\\n    using SafeERC20 for IERC20;\\n    address internal constant VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\\n    IVesperPool internal immutable vToken;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"vToken-address-is-zero\\\");\\n        vToken = IVesperPool(_receiptToken);\\n    }\\n\\n    /**\\n     * @notice Calculate total value using underlying vToken\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view override returns (uint256 _totalValue) {\\n        _totalValue = _getCollateralBalance();\\n    }\\n\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return _token == address(vToken);\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(vToken), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(VSP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Before migration hook.\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    //solhint-disable-next-line no-empty-blocks\\n    function _beforeMigration(address _newStrategy) internal override {}\\n\\n    /// @notice Withdraw collateral to payback excess debt\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\\n        if (_excessDebt != 0) {\\n            _payback = _safeWithdraw(_excessDebt);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Vesper Grow.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _collateralBalance = _getCollateralBalance();\\n        if (_collateralBalance > _totalDebt) {\\n            _withdrawHere(_collateralBalance - _totalDebt);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice Claim VSP rewards in underlying Grow Pool, if any\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        uint256 _vspAmount = IERC20(VSP).balanceOf(address(this));\\n        if (_vspAmount != 0) {\\n            _safeSwap(VSP, _toToken, _vspAmount, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate realized loss.\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = _getCollateralBalance();\\n\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Vesper Grow\\n    function _reinvest() internal virtual override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        if (_collateralBalance != 0) {\\n            vToken.deposit(_collateralBalance);\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral and transfer it to pool\\n    function _withdraw(uint256 _amount) internal override {\\n        _safeWithdraw(_amount);\\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\\n        uint256 _collateralBalance = _getCollateralBalance();\\n        // Get minimum of _amount and _collateralBalance\\n        return _withdrawHere(_amount < _collateralBalance ? _amount : _collateralBalance);\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        vToken.whitelistedWithdraw(_convertToShares(_amount));\\n        return collateralToken.balanceOf(address(this)) - _collateralBefore;\\n    }\\n\\n    /// @dev Gets collateral balance deposited into Vesper Grow Pool\\n    function _getCollateralBalance() internal view returns (uint256) {\\n        uint256 _totalSupply = vToken.totalSupply();\\n        // avoids division by zero error when pool is empty\\n        return (_totalSupply != 0) ? (vToken.totalValue() * vToken.balanceOf(address(this))) / _totalSupply : 0;\\n    }\\n\\n    /// @dev Converts a collateral amount in its relative shares for Vesper Grow Pool\\n    function _convertToShares(uint256 _collateralAmount) internal view returns (uint256) {\\n        uint256 _totalValue = vToken.totalValue();\\n        return (_totalValue != 0) ? (_collateralAmount * vToken.totalSupply()) / _totalValue : 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa4db5e3586bd98b26e2acdfbdcf009da2600c97e03b1d791fecc4b9875672c80\",\"license\":\"MIT\"},\"contracts/strategies/vesper/earn/EarnVesperStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"../../Earn.sol\\\";\\nimport \\\"../VesperStrategy.sol\\\";\\nimport \\\"../../../interfaces/vesper/IVesperPool.sol\\\";\\n\\n/// @title This Earn strategy will deposit collateral token in a Vesper Grow Pool\\n/// and converts the yield to another Drip Token\\n// solhint-disable no-empty-blocks\\nabstract contract EarnVesperStrategy is VesperStrategy, Earn {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken,\\n        address _dripToken\\n    ) VesperStrategy(_pool, _swapManager, _receiptToken) Earn(_dripToken) {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override(VesperStrategy, Strategy) {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(vToken), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(VSP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Vesper Grow.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override(VesperStrategy, Strategy) returns (uint256) {\\n        _claimRewardsAndConvertTo(address(dripToken));\\n        uint256 _collateralBalance = _getCollateralBalance();\\n        if (_collateralBalance > _totalDebt) {\\n            _withdrawHere(_collateralBalance - _totalDebt);\\n        }\\n        _convertCollateralToDrip();\\n        _forwardEarning();\\n        return 0;\\n    }\\n\\n    /// @notice Claim VSP rewards in underlying Grow Pool, if any\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override(VesperStrategy, Strategy) {\\n        VesperStrategy._claimRewardsAndConvertTo(_toToken);\\n    }\\n}\\n\",\"keccak256\":\"0xb2d64bac807e8963d3f82bb491f60c3bcac7eebdc049abba9f15a0ecbb9c37a3\",\"license\":\"MIT\"},\"contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./EarnVesperStrategyVSPDrip.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n/// @title Deposit DAI in a Vesper Grow Pool and earn interest in VSP.\\ncontract EarnVesperStrategyDAIVSP is EarnVesperStrategyVSPDrip {\\n    string public constant NAME = \\\"Earn-Vesper-Strategy-DAI-VSP\\\";\\n    string public constant VERSION = \\\"3.0.22\\\";\\n\\n    // Strategy will deposit collateral in\\n    // vaDAI = 0x0538C8bAc84E95A9dF8aC10Aad17DbE81b9E36ee\\n    // And collect drip in\\n    // VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421\\n    constructor(address _pool, address _swapManager)\\n        EarnVesperStrategy(\\n            _pool,\\n            _swapManager,\\n            0x0538C8bAc84E95A9dF8aC10Aad17DbE81b9E36ee,\\n            0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0xa666d79c125b3f49d8d6fb4751c19b60e067d937cb62587564f0bb61a11c9534\",\"license\":\"MIT\"},\"contracts/strategies/vesper/earn/EarnVesperStrategyVSPDrip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./EarnVesperStrategy.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n/// @title Earn Vesper Strategy adjusted for vVSP timelock\\nabstract contract EarnVesperStrategyVSPDrip is EarnVesperStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    bool public transferToDripContract = false;\\n\\n    /**\\n     * @notice Empty implementation, VSP rewards don't need to be converted.\\n     */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {}\\n\\n    /**\\n     * @notice Send this earning to drip contract.\\n     */\\n    function _forwardEarning() internal override {\\n        address _dripContract = IVesperPool(pool).poolRewards();\\n        uint256 _earned = IERC20(dripToken).balanceOf(address(this));\\n        // Fetches which rewardToken collects the drip\\n        address _growPool = IEarnDrip(_dripContract).growToken();\\n        // Checks that the Grow Pool supports dripToken as underlying\\n        require(address(IVesperPool(_growPool).token()) == dripToken, \\\"invalid-grow-pool\\\");\\n\\n        if (!transferToDripContract && _earned != 0) {\\n            totalEarned += _earned;\\n            IVesperPool(_growPool).deposit(_earned);\\n\\n            // Next rebalance call will transfer to dripContract\\n            transferToDripContract = true;\\n        } else if (transferToDripContract) {\\n            (, uint256 _interestFee, , , , , , ) = IVesperPool(pool).strategy(address(this));\\n            uint256 _growPoolShares = IERC20(_growPool).balanceOf(address(this));\\n            uint256 _fee = (_growPoolShares * _interestFee) / 10000;\\n\\n            if (_fee != 0) {\\n                IERC20(_growPool).safeTransfer(feeCollector, _fee);\\n                _growPoolShares -= _fee;\\n            }\\n            IERC20(_growPool).safeTransfer(_dripContract, _growPoolShares);\\n            IEarnDrip(_dripContract).notifyRewardAmount(_growPool, _growPoolShares, dripPeriod);\\n\\n            // Next rebalance call will deposit VSP to vVSP Pool\\n            transferToDripContract = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x22f1b04d09abffc08727301735dd669b1479e80f2bb35c0c86e91e3932684a8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052610e1060045560006005556127106006556202a3006007556009805460ff191690553480156200003457600080fd5b50604051620045d9380380620045d98339810160408190526200005791620002d5565b8181730538c8bac84e95a9df8ac10aad17dbe81b9e36ee731b40183efb4dd766f11bda7a7c3ad8982e998421808484848282826001600160a01b038316620000e65760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001335760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000dd565b600380546001600160a01b0319166001600160a01b0384811691909117909155606084901b6001600160601b03191660a05260408051637e062a3560e11b815290519185169163fc0c546a91600480820192602092909190829003018186803b158015620001a057600080fd5b505afa158015620001b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001db919062000313565b60601b6001600160601b031916608052600080546001600160a01b0319166001600160a01b039283161790558316151591506200025d90505760405162461bcd60e51b815260206004820152601660248201527f76546f6b656e2d616464726573732d69732d7a65726f000000000000000000006044820152606401620000dd565b60601b6001600160601b03191660c05250506001600160a01b038116620002b85760405162461bcd60e51b815260206004820152600e60248201526d64726970546f6b656e2d7a65726f60901b6044820152606401620000dd565b60601b6001600160601b03191660e0525062000352945050505050565b60008060408385031215620002e8578182fd5b8251620002f58162000339565b6020840151909250620003088162000339565b809150509250929050565b60006020828403121562000325578081fd5b8151620003328162000339565b9392505050565b6001600160a01b03811681146200034f57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6140f8620004e1600039600081816102b901528181611152015281816112420152818161127701528181612dec01528181612edf0152818161351d0152613577015260008181610c6501528181612310015281816123fa0152818161263f015281816126f30152818161277701528181612b4f0152818161326b015261330b015260008181610225015281816104d801528181610667015281816107ec01528181610a6701528181610ae301528181610ca201528181610e550152818161104801528181611386015281816114ad0152818161178d0152818161185601528181611aa301528181611f4101528181612117015281816121b4015281816123a601528181612d3801526130800152600081816103f9015281816119f501528181611a7a01528181611d7001528181611f6b0152818161227001528181612384015281816123d8015281816125d101528181612ad101528181612beb01528181612ca7015281816134fc015261355601526140f86000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c8063951dc22c1161011a578063cd2d7ebe116100ad578063e00af4a71161007c578063e00af4a714610472578063e645c20214610485578063ec78e8321461048d578063fc0c546a146104a0578063ffa1ad74146104b157610206565b8063cd2d7ebe1461043b578063ce5494bb14610444578063d2c35ce814610457578063d4c3eea01461046a57610206565b8063aa101886116100e9578063aa101886146103ec578063b2016bd4146103f4578063c1f3273d1461041b578063c415b95c1461042857610206565b8063951dc22c1461037557806399b71d5c14610388578063a3f4df7e14610390578063a923b2a6146103d957610206565b806342189c8f1161019d5780636dfa8d991161016c5780636dfa8d9914610340578063709d039d14610349578063715064141461035c5780637737b672146103655780637d7c2a1c1461036d57610206565b806342189c8f146102ee578063440d7248146102f75780634c36fad71461031a57806367f5e4b81461032d57610206565b80631aedeabe116101d95780631aedeabe1461028a5780632e1a7d4d146102a1578063335bbf11146102b45780634032b72b146102db57610206565b806314ae9f2e1461020b57806316f0115b146102205780631960d1161461026457806319ab453c14610277575b600080fd5b61021e610219366004613bca565b6104d6565b005b6102477f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61021e610272366004613dc8565b610665565b61021e610285366004613bca565b6107ea565b61029360065481565b60405190815260200161025b565b61021e6102af366004613dc8565b610a64565b6102477f000000000000000000000000000000000000000000000000000000000000000081565b61021e6102e9366004613bca565b610ae1565b61029360045481565b61030a610305366004613bca565b610c61565b604051901515815260200161025b565b61021e610328366004613bca565b610ca0565b61021e61033b366004613dc8565b610e53565b61029360085481565b600354610247906001600160a01b031681565b61029360075481565b61021e610f9f565b61021e6112a0565b600154610247906001600160a01b031681565b61021e6113ef565b6103cc6040518060400160405280601c81526020017f4561726e2d5665737065722d53747261746567792d4441492d5653500000000081525081565b60405161025b9190613e69565b61021e6103e7366004613df8565b6114ab565b61021e6116e0565b6102477f000000000000000000000000000000000000000000000000000000000000000081565b60095461030a9060ff1681565b600254610247906001600160a01b031681565b61029360055481565b61021e610452366004613bca565b61178a565b61021e610465366004613bca565b611aa1565b610293611c6a565b61021e610480366004613bca565b611c79565b610293611f14565b600054610247906001600160a01b031681565b6000546001600160a01b0316610247565b6103cc6040518060400160405280600681526020016519971817191960d11b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105679190613be6565b6001600160a01b0316336001600160a01b0316146105a05760405162461bcd60e51b815260040161059790613ecc565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b1580156105e757600080fd5b505af11580156105fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061f9190613d49565b6106625760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610597565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106be57600080fd5b505afa1580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f69190613be6565b6001600160a01b0316336001600160a01b0316146107265760405162461bcd60e51b815260040161059790613ecc565b806107655760405162461bcd60e51b815260206004820152600f60248201526e64726970506572696f642d7a65726f60881b6044820152606401610597565b6007548114156107a95760405162461bcd60e51b815260206004820152600f60248201526e1cd85b594b591c9a5c14195c9a5bd9608a1b6044820152606401610597565b60075460408051918252602082018390527f6a4a78fe36e2d43bd20405835c6211b888cc77a834e32ddc9ac64ded78f4b328910160405180910390a1600755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561084357600080fd5b505afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190613be6565b6001600160a01b0316336001600160a01b0316146108ab5760405162461bcd60e51b815260040161059790613ecc565b6001546001600160a01b0316156109045760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d6372656174656400000000006044820152606401610597565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561094457600080fd5b505af1158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190613be6565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f6109a73390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b1580156109e857600080fd5b505af11580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190613d49565b610a605760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610597565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ad85760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610597565b61066281611f1e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190613be6565b6001600160a01b0316336001600160a01b031614610ba25760405162461bcd60e51b815260040161059790613ecc565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610be957600080fd5b505af1158015610bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c219190613d49565b6106625760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610597565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161490505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190613be6565b6001600160a01b0316336001600160a01b031614610d615760405162461bcd60e51b815260040161059790613ecc565b6001600160a01b038116610dac5760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610597565b6003546001600160a01b0382811691161415610df75760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610597565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610eac57600080fd5b505afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190613be6565b6001600160a01b0316336001600160a01b031614610f145760405162461bcd60e51b815260040161059790613ecc565b612710811115610f5f5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610597565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610ff057600080fd5b505afa158015611004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110289190613d49565b6110445760405162461bcd60e51b815260040161059790613e9c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156110a157600080fd5b505af11580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d99190613be6565b90506000816001600160a01b031663e49e463b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111657600080fd5b505afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190613be6565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b357600080fd5b505afa1580156111c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111eb9190613be6565b6001600160a01b0316146112355760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b6044820152606401610597565b61126a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826000611f9a565b610a606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019611f9a565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190613d49565b6113455760405162461bcd60e51b815260040161059790613e9c565b60008060006113526120f1565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b1580156113ca57600080fd5b505af11580156113de573d6000803e3d6000fd5b505050506113ea612258565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561144057600080fd5b505afa158015611454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114789190613d49565b6114945760405162461bcd60e51b815260040161059790613e9c565b61149e6000612377565b6114a9600019612377565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c9190613be6565b6001600160a01b0316336001600160a01b03161461156c5760405162461bcd60e51b815260040161059790613ecc565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ba57600080fd5b505afa1580156115ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f29190613de0565b81106116375760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610597565b816116425760045491505b603b821161168a5760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610597565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561173157600080fd5b505afa158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190613d49565b6117855760405162461bcd60e51b815260040161059790613e9c565b6114a9565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146117fe5760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610597565b6001600160a01b0381166118545760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610597565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b757600080fd5b505afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ef9190613be6565b6001600160a01b03161461193e5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610597565b6000546040516370a0823160e01b81523060048201526119d29183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561198757600080fd5b505afa15801561199b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bf9190613de0565b6000546001600160a01b0316919061260a565b6040516370a0823160e01b81523060048201526106629082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a709190613de0565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061260a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611afa57600080fd5b505afa158015611b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b329190613be6565b6001600160a01b0316336001600160a01b031614611b625760405162461bcd60e51b815260040161059790613ecc565b6001600160a01b038116611bb85760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610597565b6002546001600160a01b0382811691161415611c0e5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610597565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c7461263a565b905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611cca57600080fd5b505afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190613d49565b611d1e5760405162461bcd60e51b815260040161059790613e9c565b6002546001600160a01b0316611d6e5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610597565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611df05760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610597565b611df981610c61565b15611e3d5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610597565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611e7d57600254611e78906001600160a01b031647612820565b610662565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611ebf57600080fd5b505afa158015611ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef79190613de0565b600254909150610a60906001600160a01b0384811691168361260a565b6000611c74611c6a565b611f2781612939565b506040516370a0823160e01b8152306004820152610662907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401611a20565b8015806120235750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120219190613de0565b155b61208e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610597565b6040516001600160a01b0383166024820152604481018290526113ea90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612964565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561215957600080fd5b505afa15801561216d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121919190613de0565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190613de0565b905061223981612a36565b945061224481612a73565b935061224f82612a98565b92505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156122ba57600080fd5b505afa1580156122ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f29190613de0565b905080156106625760405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561235c57600080fd5b505af1158015612370573d6000803e3d6000fd5b5050505050565b6123cb6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611f9a565b61241f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611f9a565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561247057600080fd5b505afa158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a89190613de0565b811015610a6057600354604051636e74a6f760e01b815260048101839052612549916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156124f557600080fd5b505afa158015612509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252d9190613be6565b731b40183efb4dd766f11bda7a7c3ad8982e9984219084611f9a565b600354604051636e74a6f760e01b8152600481018390526125f8916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561258f57600080fd5b505afa1580156125a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c79190613be6565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084611f9a565b8061260281614066565b915050612422565b6040516001600160a01b0383166024820152604481018290526113ea90849063a9059cbb60e01b906064016120ba565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561269657600080fd5b505afa1580156126aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ce9190613de0565b9050806126dc57600061281a565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561273d57600080fd5b505afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127759190613de0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b1580156127ce57600080fd5b505afa1580156127e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128069190613de0565b6128109190614000565b61281a9190613fe0565b91505090565b804710156128705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610597565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146128bd576040519150601f19603f3d011682016040523d82523d6000602084013e6128c2565b606091505b50509050806113ea5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610597565b60008061294461263a565b905061295d8184106129565781612958565b835b612aaf565b9392505050565b60006129b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c789092919063ffffffff16565b8051909150156113ea57808060200190518101906129d79190613d49565b6113ea5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610597565b600080612a4161263a565b905082811115612a5a57612a58612958848361401f565b505b612a62612c8f565b612a6a612d34565b50600092915050565b600080612a7e61263a565b905082811015612a925761295d818461401f565b50919050565b60008115610c9b57612aa982612939565b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612b1357600080fd5b505afa158015612b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4b9190613de0565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ff643a7c612b8585613266565b6040518263ffffffff1660e01b8152600401612ba391815260200190565b600060405180830381600087803b158015612bbd57600080fd5b505af1158015612bd1573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015612c3657600080fd5b505afa158015612c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6e9190613de0565b61295d919061401f565b6060612c8784846000856133ae565b949350505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612cf157600080fd5b505afa158015612d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d299190613de0565b9050610662816134d6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612d9157600080fd5b505af1158015612da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc99190613be6565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612e2e57600080fd5b505afa158015612e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e669190613de0565b90506000826001600160a01b031663e49e463b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ea357600080fd5b505afa158015612eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edb9190613be6565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f4057600080fd5b505afa158015612f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f789190613be6565b6001600160a01b031614612fc25760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b6044820152606401610597565b60095460ff16158015612fd457508115155b1561305d578160086000828254612feb9190613fc8565b909155505060405163b6b55f2560e01b8152600481018390526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b15801561303257600080fd5b505af1158015613046573d6000803e3d6000fd5b50506009805460ff19166001179055506113ea9050565b60095460ff16156113ea5760405163228bfd9f60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063228bfd9f906024016101006040518083038186803b1580156130cb57600080fd5b505afa1580156130df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131039190613d63565b50506040516370a0823160e01b81523060048201529496506000955050506001600160a01b038616926370a082319250602401905060206040518083038186803b15801561315057600080fd5b505afa158015613164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131889190613de0565b905060006127106131998484614000565b6131a39190613fe0565b905080156131d2576002546131c5906001600160a01b0386811691168361260a565b6131cf818361401f565b91505b6131e66001600160a01b038516878461260a565b6007546040516328f362b160e21b81526001600160a01b0386811660048301526024820185905260448201929092529087169063a3cd8ac490606401600060405180830381600087803b15801561323c57600080fd5b505af1158015613250573d6000803e3d6000fd5b50506009805460ff191690555050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c257600080fd5b505afa1580156132d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fa9190613de0565b90508061330857600061295d565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561336257600080fd5b505afa158015613376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339a9190613de0565b6133a49085614000565b61295d9190613fe0565b60608247101561340f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610597565b843b61345d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610597565b600080866001600160a01b031685876040516134799190613e4d565b60006040518083038185875af1925050503d80600081146134b6576040519150601f19603f3d011682016040523d82523d6000602084013e6134bb565b606091505b50915091506134cb82828661359d565b979650505050505050565b801561066257600060065461271014156134f157600161354f565b61354f6135476135417f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006135d6565b846137ce565b6006546138f9565b9050610a607f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008484613908565b606083156135ac57508161295d565b8251156135bc5782518084602001fd5b8160405162461bcd60e51b81526004016105979190613e69565b60606001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2148061361f57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b156136cd576040805160028082526060820183529091602083019080368337019050509050828160008151811061366657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106136a857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050612aa9565b604080516003808252608082019092529060208201606080368337019050509050828160008151811061371057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061376657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505081816002815181106137a857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b600060018351116138175760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b6044820152606401610597565b50806000805b6001855161382b919061401f565b8110156138f15761389785828151811061385557634e487b7160e01b600052603260045260246000fd5b60200260200101518683600161386b9190613fc8565b8151811061388957634e487b7160e01b600052603260045260246000fd5b602002602001015185613ac9565b9093509150816138df5760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b6044820152606401610597565b806138e981614066565b91505061381d565b505092915050565b600061271061339a838261401f565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561396357600080fd5b505afa158015613977573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261399f9190810190613c02565b92509250925083600014156139b357600193505b8115613ac057600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156139fd57600080fd5b505afa158015613a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a359190613be6565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613a68959493929190613f03565b600060405180830381600087803b158015613a8257600080fd5b505af1158015613a96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613abe9190810190613cb6565b505b50505050505050565b6003546004805460055460405163b67bb24d60e01b81526001600160a01b038881169482019490945286841660248201526044810186905260648101929092526084820152600092839283928392919091169063b67bb24d9060a401606060405180830381600087803b158015613b3f57600080fd5b505af1158015613b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b779190613e19565b509150915060045442613b8a919061401f565b81118015613b9757508115155b15613ba85750915060019050613bb2565b6000809350935050505b935093915050565b80518015158114610c9b57600080fd5b600060208284031215613bdb578081fd5b813561295d816140ad565b600060208284031215613bf7578081fd5b815161295d816140ad565b600080600060608486031215613c16578182fd5b835167ffffffffffffffff811115613c2c578283fd5b8401601f81018613613c3c578283fd5b80516020613c51613c4c83613fa4565b613f73565b8083825282820191508285018a848660051b8801011115613c70578788fd5b8795505b84861015613c9b578051613c87816140ad565b835260019590950194918301918301613c74565b50918801516040909801519199979850909695505050505050565b60006020808385031215613cc8578182fd5b825167ffffffffffffffff811115613cde578283fd5b8301601f81018513613cee578283fd5b8051613cfc613c4c82613fa4565b80828252848201915084840188868560051b8701011115613d1b578687fd5b8694505b83851015613d3d578051835260019490940193918501918501613d1f565b50979650505050505050565b600060208284031215613d5a578081fd5b61295d82613bba565b600080600080600080600080610100898b031215613d7f578384fd5b613d8889613bba565b97506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600060208284031215613dd9578081fd5b5035919050565b600060208284031215613df1578081fd5b5051919050565b60008060408385031215613e0a578182fd5b50508035926020909101359150565b600080600060608486031215613e2d578283fd5b8351925060208401519150613e4460408501613bba565b90509250925092565b60008251613e5f818460208701614036565b9190910192915050565b6000602082528251806020840152613e88816040850160208701614036565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613f525784516001600160a01b031683529383019391830191600101613f2d565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613f9c57613f9c614097565b604052919050565b600067ffffffffffffffff821115613fbe57613fbe614097565b5060051b60200190565b60008219821115613fdb57613fdb614081565b500190565b600082613ffb57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561401a5761401a614081565b500290565b60008282101561403157614031614081565b500390565b60005b83811015614051578181015183820152602001614039565b83811115614060576000848401525b50505050565b600060001982141561407a5761407a614081565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461066257600080fdfea2646970667358221220476711ab03fe2e8b01a176a5fa0c37ace56ee65aef98c758b7cd12188eb4684d64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c8063951dc22c1161011a578063cd2d7ebe116100ad578063e00af4a71161007c578063e00af4a714610472578063e645c20214610485578063ec78e8321461048d578063fc0c546a146104a0578063ffa1ad74146104b157610206565b8063cd2d7ebe1461043b578063ce5494bb14610444578063d2c35ce814610457578063d4c3eea01461046a57610206565b8063aa101886116100e9578063aa101886146103ec578063b2016bd4146103f4578063c1f3273d1461041b578063c415b95c1461042857610206565b8063951dc22c1461037557806399b71d5c14610388578063a3f4df7e14610390578063a923b2a6146103d957610206565b806342189c8f1161019d5780636dfa8d991161016c5780636dfa8d9914610340578063709d039d14610349578063715064141461035c5780637737b672146103655780637d7c2a1c1461036d57610206565b806342189c8f146102ee578063440d7248146102f75780634c36fad71461031a57806367f5e4b81461032d57610206565b80631aedeabe116101d95780631aedeabe1461028a5780632e1a7d4d146102a1578063335bbf11146102b45780634032b72b146102db57610206565b806314ae9f2e1461020b57806316f0115b146102205780631960d1161461026457806319ab453c14610277575b600080fd5b61021e610219366004613bca565b6104d6565b005b6102477f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61021e610272366004613dc8565b610665565b61021e610285366004613bca565b6107ea565b61029360065481565b60405190815260200161025b565b61021e6102af366004613dc8565b610a64565b6102477f000000000000000000000000000000000000000000000000000000000000000081565b61021e6102e9366004613bca565b610ae1565b61029360045481565b61030a610305366004613bca565b610c61565b604051901515815260200161025b565b61021e610328366004613bca565b610ca0565b61021e61033b366004613dc8565b610e53565b61029360085481565b600354610247906001600160a01b031681565b61029360075481565b61021e610f9f565b61021e6112a0565b600154610247906001600160a01b031681565b61021e6113ef565b6103cc6040518060400160405280601c81526020017f4561726e2d5665737065722d53747261746567792d4441492d5653500000000081525081565b60405161025b9190613e69565b61021e6103e7366004613df8565b6114ab565b61021e6116e0565b6102477f000000000000000000000000000000000000000000000000000000000000000081565b60095461030a9060ff1681565b600254610247906001600160a01b031681565b61029360055481565b61021e610452366004613bca565b61178a565b61021e610465366004613bca565b611aa1565b610293611c6a565b61021e610480366004613bca565b611c79565b610293611f14565b600054610247906001600160a01b031681565b6000546001600160a01b0316610247565b6103cc6040518060400160405280600681526020016519971817191960d11b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105679190613be6565b6001600160a01b0316336001600160a01b0316146105a05760405162461bcd60e51b815260040161059790613ecc565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b1580156105e757600080fd5b505af11580156105fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061f9190613d49565b6106625760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610597565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106be57600080fd5b505afa1580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f69190613be6565b6001600160a01b0316336001600160a01b0316146107265760405162461bcd60e51b815260040161059790613ecc565b806107655760405162461bcd60e51b815260206004820152600f60248201526e64726970506572696f642d7a65726f60881b6044820152606401610597565b6007548114156107a95760405162461bcd60e51b815260206004820152600f60248201526e1cd85b594b591c9a5c14195c9a5bd9608a1b6044820152606401610597565b60075460408051918252602082018390527f6a4a78fe36e2d43bd20405835c6211b888cc77a834e32ddc9ac64ded78f4b328910160405180910390a1600755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561084357600080fd5b505afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190613be6565b6001600160a01b0316336001600160a01b0316146108ab5760405162461bcd60e51b815260040161059790613ecc565b6001546001600160a01b0316156109045760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d6372656174656400000000006044820152606401610597565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561094457600080fd5b505af1158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190613be6565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f6109a73390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b1580156109e857600080fd5b505af11580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190613d49565b610a605760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610597565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ad85760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610597565b61066281611f1e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190613be6565b6001600160a01b0316336001600160a01b031614610ba25760405162461bcd60e51b815260040161059790613ecc565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610be957600080fd5b505af1158015610bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c219190613d49565b6106625760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610597565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161490505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190613be6565b6001600160a01b0316336001600160a01b031614610d615760405162461bcd60e51b815260040161059790613ecc565b6001600160a01b038116610dac5760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610597565b6003546001600160a01b0382811691161415610df75760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610597565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610eac57600080fd5b505afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190613be6565b6001600160a01b0316336001600160a01b031614610f145760405162461bcd60e51b815260040161059790613ecc565b612710811115610f5f5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610597565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610ff057600080fd5b505afa158015611004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110289190613d49565b6110445760405162461bcd60e51b815260040161059790613e9c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156110a157600080fd5b505af11580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d99190613be6565b90506000816001600160a01b031663e49e463b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111657600080fd5b505afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190613be6565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b357600080fd5b505afa1580156111c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111eb9190613be6565b6001600160a01b0316146112355760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b6044820152606401610597565b61126a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016826000611f9a565b610a606001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019611f9a565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190613d49565b6113455760405162461bcd60e51b815260040161059790613e9c565b60008060006113526120f1565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b1580156113ca57600080fd5b505af11580156113de573d6000803e3d6000fd5b505050506113ea612258565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561144057600080fd5b505afa158015611454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114789190613d49565b6114945760405162461bcd60e51b815260040161059790613e9c565b61149e6000612377565b6114a9600019612377565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561150457600080fd5b505afa158015611518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153c9190613be6565b6001600160a01b0316336001600160a01b03161461156c5760405162461bcd60e51b815260040161059790613ecc565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ba57600080fd5b505afa1580156115ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f29190613de0565b81106116375760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610597565b816116425760045491505b603b821161168a5760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610597565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561173157600080fd5b505afa158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190613d49565b6117855760405162461bcd60e51b815260040161059790613e9c565b6114a9565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146117fe5760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610597565b6001600160a01b0381166118545760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610597565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b757600080fd5b505afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ef9190613be6565b6001600160a01b03161461193e5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610597565b6000546040516370a0823160e01b81523060048201526119d29183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561198757600080fd5b505afa15801561199b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bf9190613de0565b6000546001600160a01b0316919061260a565b6040516370a0823160e01b81523060048201526106629082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a709190613de0565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061260a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611afa57600080fd5b505afa158015611b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b329190613be6565b6001600160a01b0316336001600160a01b031614611b625760405162461bcd60e51b815260040161059790613ecc565b6001600160a01b038116611bb85760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610597565b6002546001600160a01b0382811691161415611c0e5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610597565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000611c7461263a565b905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611cca57600080fd5b505afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190613d49565b611d1e5760405162461bcd60e51b815260040161059790613e9c565b6002546001600160a01b0316611d6e5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610597565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611df05760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610597565b611df981610c61565b15611e3d5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610597565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611e7d57600254611e78906001600160a01b031647612820565b610662565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611ebf57600080fd5b505afa158015611ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef79190613de0565b600254909150610a60906001600160a01b0384811691168361260a565b6000611c74611c6a565b611f2781612939565b506040516370a0823160e01b8152306004820152610662907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401611a20565b8015806120235750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120219190613de0565b155b61208e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610597565b6040516001600160a01b0383166024820152604481018290526113ea90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612964565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561215957600080fd5b505afa15801561216d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121919190613de0565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b1580156121f657600080fd5b505afa15801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190613de0565b905061223981612a36565b945061224481612a73565b935061224f82612a98565b92505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156122ba57600080fd5b505afa1580156122ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f29190613de0565b905080156106625760405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561235c57600080fd5b505af1158015612370573d6000803e3d6000fd5b5050505050565b6123cb6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611f9a565b61241f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611f9a565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561247057600080fd5b505afa158015612484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a89190613de0565b811015610a6057600354604051636e74a6f760e01b815260048101839052612549916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156124f557600080fd5b505afa158015612509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252d9190613be6565b731b40183efb4dd766f11bda7a7c3ad8982e9984219084611f9a565b600354604051636e74a6f760e01b8152600481018390526125f8916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561258f57600080fd5b505afa1580156125a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c79190613be6565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084611f9a565b8061260281614066565b915050612422565b6040516001600160a01b0383166024820152604481018290526113ea90849063a9059cbb60e01b906064016120ba565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561269657600080fd5b505afa1580156126aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ce9190613de0565b9050806126dc57600061281a565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561273d57600080fd5b505afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127759190613de0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b1580156127ce57600080fd5b505afa1580156127e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128069190613de0565b6128109190614000565b61281a9190613fe0565b91505090565b804710156128705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610597565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146128bd576040519150601f19603f3d011682016040523d82523d6000602084013e6128c2565b606091505b50509050806113ea5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610597565b60008061294461263a565b905061295d8184106129565781612958565b835b612aaf565b9392505050565b60006129b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c789092919063ffffffff16565b8051909150156113ea57808060200190518101906129d79190613d49565b6113ea5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610597565b600080612a4161263a565b905082811115612a5a57612a58612958848361401f565b505b612a62612c8f565b612a6a612d34565b50600092915050565b600080612a7e61263a565b905082811015612a925761295d818461401f565b50919050565b60008115610c9b57612aa982612939565b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612b1357600080fd5b505afa158015612b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4b9190613de0565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ff643a7c612b8585613266565b6040518263ffffffff1660e01b8152600401612ba391815260200190565b600060405180830381600087803b158015612bbd57600080fd5b505af1158015612bd1573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528392507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015612c3657600080fd5b505afa158015612c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6e9190613de0565b61295d919061401f565b6060612c8784846000856133ae565b949350505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612cf157600080fd5b505afa158015612d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d299190613de0565b9050610662816134d6565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612d9157600080fd5b505af1158015612da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc99190613be6565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612e2e57600080fd5b505afa158015612e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e669190613de0565b90506000826001600160a01b031663e49e463b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ea357600080fd5b505afa158015612eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edb9190613be6565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f4057600080fd5b505afa158015612f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f789190613be6565b6001600160a01b031614612fc25760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b6044820152606401610597565b60095460ff16158015612fd457508115155b1561305d578160086000828254612feb9190613fc8565b909155505060405163b6b55f2560e01b8152600481018390526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b15801561303257600080fd5b505af1158015613046573d6000803e3d6000fd5b50506009805460ff19166001179055506113ea9050565b60095460ff16156113ea5760405163228bfd9f60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063228bfd9f906024016101006040518083038186803b1580156130cb57600080fd5b505afa1580156130df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131039190613d63565b50506040516370a0823160e01b81523060048201529496506000955050506001600160a01b038616926370a082319250602401905060206040518083038186803b15801561315057600080fd5b505afa158015613164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131889190613de0565b905060006127106131998484614000565b6131a39190613fe0565b905080156131d2576002546131c5906001600160a01b0386811691168361260a565b6131cf818361401f565b91505b6131e66001600160a01b038516878461260a565b6007546040516328f362b160e21b81526001600160a01b0386811660048301526024820185905260448201929092529087169063a3cd8ac490606401600060405180830381600087803b15801561323c57600080fd5b505af1158015613250573d6000803e3d6000fd5b50506009805460ff191690555050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4c3eea06040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c257600080fd5b505afa1580156132d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fa9190613de0565b90508061330857600061295d565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561336257600080fd5b505afa158015613376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339a9190613de0565b6133a49085614000565b61295d9190613fe0565b60608247101561340f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610597565b843b61345d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610597565b600080866001600160a01b031685876040516134799190613e4d565b60006040518083038185875af1925050503d80600081146134b6576040519150601f19603f3d011682016040523d82523d6000602084013e6134bb565b606091505b50915091506134cb82828661359d565b979650505050505050565b801561066257600060065461271014156134f157600161354f565b61354f6135476135417f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006135d6565b846137ce565b6006546138f9565b9050610a607f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008484613908565b606083156135ac57508161295d565b8251156135bc5782518084602001fd5b8160405162461bcd60e51b81526004016105979190613e69565b60606001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2148061361f57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b156136cd576040805160028082526060820183529091602083019080368337019050509050828160008151811061366657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106136a857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050612aa9565b604080516003808252608082019092529060208201606080368337019050509050828160008151811061371057634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061376657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505081816002815181106137a857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b600060018351116138175760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b6044820152606401610597565b50806000805b6001855161382b919061401f565b8110156138f15761389785828151811061385557634e487b7160e01b600052603260045260246000fd5b60200260200101518683600161386b9190613fc8565b8151811061388957634e487b7160e01b600052603260045260246000fd5b602002602001015185613ac9565b9093509150816138df5760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b6044820152606401610597565b806138e981614066565b91505061381d565b505092915050565b600061271061339a838261401f565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561396357600080fd5b505afa158015613977573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261399f9190810190613c02565b92509250925083600014156139b357600193505b8115613ac057600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156139fd57600080fd5b505afa158015613a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a359190613be6565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613a68959493929190613f03565b600060405180830381600087803b158015613a8257600080fd5b505af1158015613a96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613abe9190810190613cb6565b505b50505050505050565b6003546004805460055460405163b67bb24d60e01b81526001600160a01b038881169482019490945286841660248201526044810186905260648101929092526084820152600092839283928392919091169063b67bb24d9060a401606060405180830381600087803b158015613b3f57600080fd5b505af1158015613b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b779190613e19565b509150915060045442613b8a919061401f565b81118015613b9757508115155b15613ba85750915060019050613bb2565b6000809350935050505b935093915050565b80518015158114610c9b57600080fd5b600060208284031215613bdb578081fd5b813561295d816140ad565b600060208284031215613bf7578081fd5b815161295d816140ad565b600080600060608486031215613c16578182fd5b835167ffffffffffffffff811115613c2c578283fd5b8401601f81018613613c3c578283fd5b80516020613c51613c4c83613fa4565b613f73565b8083825282820191508285018a848660051b8801011115613c70578788fd5b8795505b84861015613c9b578051613c87816140ad565b835260019590950194918301918301613c74565b50918801516040909801519199979850909695505050505050565b60006020808385031215613cc8578182fd5b825167ffffffffffffffff811115613cde578283fd5b8301601f81018513613cee578283fd5b8051613cfc613c4c82613fa4565b80828252848201915084840188868560051b8701011115613d1b578687fd5b8694505b83851015613d3d578051835260019490940193918501918501613d1f565b50979650505050505050565b600060208284031215613d5a578081fd5b61295d82613bba565b600080600080600080600080610100898b031215613d7f578384fd5b613d8889613bba565b97506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600060208284031215613dd9578081fd5b5035919050565b600060208284031215613df1578081fd5b5051919050565b60008060408385031215613e0a578182fd5b50508035926020909101359150565b600080600060608486031215613e2d578283fd5b8351925060208401519150613e4460408501613bba565b90509250925092565b60008251613e5f818460208701614036565b9190910192915050565b6000602082528251806020840152613e88816040850160208701614036565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613f525784516001600160a01b031683529383019391830191600101613f2d565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613f9c57613f9c614097565b604052919050565b600067ffffffffffffffff821115613fbe57613fbe614097565b5060051b60200190565b60008219821115613fdb57613fdb614081565b500190565b600082613ffb57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561401a5761401a614081565b500290565b60008282101561403157614031614081565b500390565b60005b83811015614051578181015183820152602001614039565b83811115614060576000848401525b50505050565b600060001982141561407a5761407a614081565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461066257600080fdfea2646970667358221220476711ab03fe2e8b01a176a5fa0c37ace56ee65aef98c758b7cd12188eb4684d64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveGrowToken()": {
        "details": "Approves EarnDrip' Grow token to spend dripToken"
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "init(address)": {
        "params": {
          "_addressListFactory": "To support same code in eth side chain, user _addressListFactory as param mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291 avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54"
        }
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Report total value in collateral token"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateDripPeriod(uint256)": {
        "details": "_dripPeriod in seconds"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit DAI in a Vesper Grow Pool and earn interest in VSP.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "init(address)": {
        "notice": "Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value using underlying vToken"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateDripPeriod(uint256)": {
        "notice": "Update update period of distribution of earning done in one rebalance"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13612,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13619,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "keepers",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAddressList)4357"
      },
      {
        "astId": 13622,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13625,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)4660"
      },
      {
        "astId": 13628,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13631,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13634,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 13270,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "dripPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 13272,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "totalEarned",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 37974,
        "contract": "contracts/strategies/vesper/earn/EarnVesperStrategyDAIVSP.sol:EarnVesperStrategyDAIVSP",
        "label": "transferToDripContract",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressList)4357": {
        "encoding": "inplace",
        "label": "contract IAddressList",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)4660": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}