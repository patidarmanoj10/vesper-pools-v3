{
  "address": "0x09c21F950ECB6b714E08D4411764C5036E53EBA9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveAddressesProvider",
      "outputs": [
        {
          "internalType": "contract AaveLendingPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveIncentivesController",
      "outputs": [
        {
          "internalType": "contract AaveIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveLendingPool",
      "outputs": [
        {
          "internalType": "contract AaveLendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveProtocolDataProvider",
      "outputs": [
        {
          "internalType": "contract AaveProtocolDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canStartCooldown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canUnstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_cooldownStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cooldownEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unstakeEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressListFactory",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startCooldown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stkAAVE",
      "outputs": [
        {
          "internalType": "contract StakedAave",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8be9b89bf15f9dab02c2ac888fdef5f5bea849c08e70b39df0b5d946447baa8c",
  "receipt": {
    "to": null,
    "from": "0x1CbfaE0367a9B1e4Ac2c158E57B5F00cCb337271",
    "contractAddress": "0x09c21F950ECB6b714E08D4411764C5036E53EBA9",
    "transactionIndex": 81,
    "gasUsed": "4141217",
    "logsBloom": "0x
    "blockHash": "0xd10cb69128379703dfba3645668688a7ff276cce8550a23268559beb7d74c8c4",
    "transactionHash": "0x8be9b89bf15f9dab02c2ac888fdef5f5bea849c08e70b39df0b5d946447baa8c",
    "logs": [],
    "blockNumber": 13799547,
    "cumulativeGasUsed": "12366819",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9b91ab47cefC35dbe4DDCC7983fFA1fB40795663",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710",
    "0x6F634c6135D2EBD550000ac92F494F9CB8183dAe",
    "AaveStrategyDPI"
  ],
  "solcInputHash": "9fa3ab347f27460d477bd028befc9c60",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveAddressesProvider\",\"outputs\":[{\"internalType\":\"contract AaveLendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveIncentivesController\",\"outputs\":[{\"internalType\":\"contract AaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"contract AaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProvider\",\"outputs\":[{\"internalType\":\"contract AaveProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canStartCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkAAVE\",\"outputs\":[{\"internalType\":\"contract StakedAave\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This strategy will deposit collateral token in Aave and earn interest.\",\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"init(address)\":{\"params\":{\"_addressListFactory\":\"To support same code in eth side chain, user _addressListFactory as param mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291 avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54\"}},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"aToken and collateral are 1:1\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"canStartCooldown()\":{\"notice\":\"Returns true if we should start cooldown\"},\"canUnstake()\":{\"notice\":\"Returns true if Aave can be unstaked\"},\"cooldownData()\":{\"notice\":\"Return cooldown related timestamps\"},\"init(address)\":{\"notice\":\"Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"startCooldown()\":{\"notice\":\"Initiate cooldown to unstake aave.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Report total value\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"unstakeAave()\":{\"notice\":\"Unstake Aave from stakedAave contract\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/aave/AaveStrategy.sol\":\"AaveStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface AaveLendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4d50377552239ead8323580a7bcc073d2dcce3f2ea35d04309119192e833d94\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7c33866bea8f329ae2e1b858695eb58eb44d5495b2b47cf677df2329abc4bd98\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x55451a0724e4c8982f247e2c3f6d5fc2899c98381287953e07346b28b4586efa\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0725eb59a54238cbdcf2d14d2759a2fb4bd7550b9e4183c9350ff72e46a2b674\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    IAddressList public override keepers;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Create keeper list\\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\\n     * mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\\n     * polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\\n     * avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54\\n     */\\n    function init(address _addressListFactory) external onlyGovernor {\\n        require(address(keepers) == address(0), \\\"keeper-list-already-created\\\");\\n        // Prepare keeper list\\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\\n        keepers = IAddressList(_factory.createList());\\n        require(keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal pure returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0xdc0899f84d46d358375f9f2c8dd47338eb347b7fb3322be4901888fe97a4d7d7\",\"license\":\"MIT\"},\"contracts/strategies/aave/AaveCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../../interfaces/aave/IAave.sol\\\";\\n\\n/// @title This contract provide core operations for Aave\\nabstract contract AaveCore {\\n    //solhint-disable-next-line const-name-snakecase\\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n\\n    AaveLendingPoolAddressesProvider public aaveAddressesProvider =\\n        AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n    AaveLendingPool public immutable aaveLendingPool;\\n    AaveProtocolDataProvider public immutable aaveProtocolDataProvider;\\n    AaveIncentivesController public immutable aaveIncentivesController;\\n\\n    AToken internal immutable aToken;\\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n\\n    constructor(address _receiptToken) {\\n        require(_receiptToken != address(0), \\\"aToken-address-is-zero\\\");\\n        aToken = AToken(_receiptToken);\\n        // If there is no AAVE incentive then below call will fail\\n        try AToken(_receiptToken).getIncentivesController() {\\n            aaveIncentivesController = AaveIncentivesController(AToken(_receiptToken).getIncentivesController());\\n        } catch {} //solhint-disable no-empty-blocks\\n\\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\\n    }\\n\\n    ///////////////////////// External access functions /////////////////////////\\n\\n    /**\\n     * @notice Initiate cooldown to unstake aave.\\n     * @dev We only want to call this function when cooldown is expired and\\n     * that's the reason we have 'if' condition.\\n     * @dev Child contract should expose this function as external and onlyKeeper\\n     */\\n    function _startCooldown() internal returns (bool) {\\n        if (canStartCooldown()) {\\n            stkAAVE.cooldown();\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Unstake Aave from stakedAave contract\\n     * @dev We want to unstake as soon as favorable condition exit\\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\\n     * @dev Child contract should expose this function as external and onlyKeeper\\n     */\\n    function _unstakeAave() internal {\\n        stkAAVE.redeem(address(this), type(uint256).max);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Returns true if Aave can be unstaked\\n    function canUnstake() external view returns (bool) {\\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\\n    }\\n\\n    /// @notice Returns true if we should start cooldown\\n    function canStartCooldown() public view returns (bool) {\\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\\n    }\\n\\n    /// @notice Return cooldown related timestamps\\n    function cooldownData()\\n        public\\n        view\\n        returns (\\n            uint256 _cooldownStart,\\n            uint256 _cooldownEnd,\\n            uint256 _unstakeEnd\\n        )\\n    {\\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\\n    }\\n\\n    /**\\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\\n     * @dev Not all collateral token has aave incentive\\n     */\\n    function _claimAave() internal returns (uint256) {\\n        if (address(aaveIncentivesController) == address(0)) {\\n            return 0;\\n        }\\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\\n        if (_cooldownStart == 0 || block.timestamp > _unstakeEnd) {\\n            // claim stkAave when its first rebalance or unstake period passed.\\n            address[] memory _assets = new address[](1);\\n            _assets[0] = address(aToken);\\n            aaveIncentivesController.claimRewards(_assets, type(uint256).max, address(this));\\n        }\\n        // Fetch and check again for next action.\\n        (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\\n            stkAAVE.redeem(address(this), type(uint256).max);\\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\\n            stkAAVE.cooldown();\\n        }\\n\\n        stkAAVE.claimRewards(address(this), type(uint256).max);\\n        return IERC20(AAVE).balanceOf(address(this));\\n    }\\n\\n    /// @notice Deposit asset into Aave\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        if (_amount != 0) {\\n            aaveLendingPool.deposit(_asset, _amount, address(this), 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @dev Check we have enough aToken and liquidity to support this withdraw\\n     * @param _asset Address of asset to withdraw\\n     * @param _to Address that will receive collateral token.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(\\n        address _asset,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\\n        // In this case we might have more aToken compare to available liquidity in Aave and any\\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\\n        // _amount against available liquidity.\\n        (uint256 _availableLiquidity, , , , , , , , , ) = aaveProtocolDataProvider.getReserveData(_asset);\\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\\n        return _withdraw(_asset, _to, _min(_amount, _min(_aTokenBalance, _availableLiquidity)));\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of collateral from Aave to given address\\n     * @param _asset Address of asset to withdraw\\n     * @param _to Address that will receive collateral token.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _withdraw(\\n        address _asset,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        if (_amount != 0) {\\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, \\\"withdrawn-amount-is-not-correct\\\");\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\\n     * not want to reset/start cooldown.\\n     */\\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\\n        return stkAAVE.balanceOf(address(this)) != 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\\n    }\\n\\n    /// @dev Return true, if cooldown is over and we are in unstake window.\\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function _isReservedToken(address _token) internal view returns (bool) {\\n        return _token == address(aToken) || _token == AAVE || _token == address(stkAAVE);\\n    }\\n\\n    /**\\n     * @notice Return total AAVE incentive allocated to this address\\n     * @dev Aave and StakedAave are 1:1\\n     * @dev Not all collateral token has aave incentive\\n     */\\n    function _totalAave() internal view returns (uint256) {\\n        if (address(aaveIncentivesController) == address(0)) {\\n            return 0;\\n        }\\n        address[] memory _assets = new address[](1);\\n        _assets[0] = address(aToken);\\n        // TotalAave = Get current StakedAave rewards from controller +\\n        //             StakedAave balance here +\\n        //             Aave rewards by staking Aave in StakedAave contract\\n        return\\n            aaveIncentivesController.getRewardsBalance(_assets, address(this)) +\\n            stkAAVE.balanceOf(address(this)) +\\n            stkAAVE.getTotalRewardsBalance(address(this));\\n    }\\n\\n    /// @notice Returns minimum of 2 given numbers\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xdd964bccd9e6fcb57458d68811e690d55d85f3928bba769e41044b23245e7db0\",\"license\":\"MIT\"},\"contracts/strategies/aave/AaveStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./AaveCore.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\\ncontract AaveStrategy is Strategy, AaveCore {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"3.0.22\\\";\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapManager, _receiptToken) AaveCore(_receiptToken) {\\n        NAME = _name;\\n    }\\n\\n    //solhint-enable\\n\\n    /// @notice Initiate cooldown to unstake aave.\\n    function startCooldown() external onlyKeeper returns (bool) {\\n        return _startCooldown();\\n    }\\n\\n    /// @notice Unstake Aave from stakedAave contract\\n    function unstakeAave() external onlyKeeper {\\n        _unstakeAave();\\n    }\\n\\n    function _setupOracles() internal virtual override {\\n        swapManager.createOrUpdateOracle(AAVE, WETH, oraclePeriod, oracleRouterIdx);\\n        if (address(collateralToken) != WETH) {\\n            swapManager.createOrUpdateOracle(AAVE, address(collateralToken), oraclePeriod, oracleRouterIdx);\\n        }\\n    }\\n\\n    /**\\n     * @notice Report total value\\n     * @dev aToken and collateral are 1:1\\n     */\\n    function totalValue() public view virtual override returns (uint256) {\\n        uint256 _totalAaveAmt = _totalAave();\\n        if (_totalAaveAmt == 0) {\\n            // As there is no AAVE balance return aToken balance as totalValue.\\n            return aToken.balanceOf(address(this));\\n        }\\n        // Get collateral value of total aave rewards\\n        (, uint256 _aaveAsCollateral, ) =\\n            swapManager.bestOutputFixedInput(AAVE, address(collateralToken), _totalAaveAmt);\\n        // Total value = aave as collateral + aToken balance\\n        return _aaveAsCollateral + aToken.balanceOf(address(this));\\n    }\\n\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return _isReservedToken(_token);\\n    }\\n\\n    /// @notice Large approval of token\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(AAVE).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer StakeAave to newStrategy\\n     * @param _newStrategy Address of newStrategy\\n     */\\n    function _beforeMigration(address _newStrategy) internal override {\\n        uint256 _stkAaveAmount = stkAAVE.balanceOf(address(this));\\n        if (_stkAaveAmount != 0) {\\n            IERC20(stkAAVE).safeTransfer(_newStrategy, _stkAaveAmount);\\n        }\\n    }\\n\\n    /// @notice Claim Aave rewards and convert to _toToken.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        uint256 _aaveAmount = _claimAave();\\n        if (_aaveAmount > 0) {\\n            uint256 minAmtOut =\\n                (swapSlippage != 10000)\\n                    ? _calcAmtOutAfterSlippage(\\n                        _getOracleRate(_simpleOraclePath(AAVE, _toToken), _aaveAmount),\\n                        swapSlippage\\n                    )\\n                    : 1;\\n            _safeSwap(AAVE, _toToken, _aaveAmount, minAmtOut);\\n        }\\n    }\\n\\n    /// @notice Withdraw collateral to payback excess debt\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\\n        if (_excessDebt != 0) {\\n            _payback = _safeWithdraw(address(collateralToken), address(this), _excessDebt);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Aave.\\n     * @dev If somehow we got some collateral token in strategy then we want to\\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\\n        if (_aTokenBalance > _totalDebt) {\\n            _withdraw(address(collateralToken), address(this), _aTokenBalance - _totalDebt);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculate realized loss.\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\\n        if (_aTokenBalance < _totalDebt) {\\n            _loss = _totalDebt - _aTokenBalance;\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Aave\\n    function _reinvest() internal override {\\n        _deposit(address(collateralToken), collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of collateral from Aave to pool\\n     * @param _amount Amount of collateral to withdraw.\\n     */\\n    function _withdraw(uint256 _amount) internal override {\\n        _safeWithdraw(address(collateralToken), pool, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x04f18df65ed93bac5e4e5462c9236d1b07b6f0480d84c6035ddf11ba22947743\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610140604052610e106004556000600555612710600655600780546001600160a01b03191673b53c1a33016b2dc2ff3653530bff1848a515c8c51790553480156200004957600080fd5b5060405162004f3238038062004f328339810160408190526200006c916200057b565b818484826001600160a01b038316620000cc5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001195760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000c3565b600380546001600160a01b0319166001600160a01b0384811691909117909155606084901b6001600160601b03191660a05260408051637e062a3560e11b815290519185169163fc0c546a91600480820192602092909190829003018186803b1580156200018657600080fd5b505afa1580156200019b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c1919062000555565b60601b6001600160601b031916608052600080546001600160a01b0319166001600160a01b039283161790558316151591506200024390505760405162461bcd60e51b815260206004820152601660248201527f61546f6b656e2d616464726573732d69732d7a65726f000000000000000000006044820152606401620000c3565b806001600160a01b0316610120816001600160a01b031660601b81525050806001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b1580156200029b57600080fd5b505afa925050508015620002ce575060408051601f3d908101601f19168201909252620002cb9181019062000555565b60015b620002d95762000361565b50806001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b1580156200031457600080fd5b505afa15801562000329573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034f919062000555565b60601b6001600160601b031916610100525b600760009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620003b057600080fd5b505afa158015620003c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003eb919062000555565b60601b6001600160601b03191660c0526007546040516321f8a72160e01b8152600160f81b60048201526001600160a01b03909116906321f8a7219060240160206040518083038186803b1580156200044357600080fd5b505afa15801562000458573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200047e919062000555565b60601b6001600160601b03191660e052508051620004a4906008906020840190620004af565b5050505050620006ff565b828054620004bd9062000693565b90600052602060002090601f016020900481019282620004e157600085556200052c565b82601f10620004fc57805160ff19168380011785556200052c565b828001600101855582156200052c579182015b828111156200052c5782518255916020019190600101906200050f565b506200053a9291506200053e565b5090565b5b808211156200053a57600081556001016200053f565b60006020828403121562000567578081fd5b81516200057481620006e6565b9392505050565b6000806000806080858703121562000591578283fd5b84516200059e81620006e6565b80945050602080860151620005b381620006e6565b6040870151909450620005c681620006e6565b60608701519093506001600160401b0380821115620005e3578384fd5b818801915088601f830112620005f7578384fd5b8151818111156200060c576200060c620006d0565b604051601f8201601f19908116603f01168101908382118183101715620006375762000637620006d0565b816040528281528b868487010111156200064f578687fd5b8693505b8284101562000672578484018601518185018701529285019262000653565b828411156200068357868684830101525b989b979a50959850505050505050565b600181811c90821680620006a857607f821691505b60208210811415620006ca57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620006fc57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c61469d6200089560003960008181611c3b01528181611da1015281816121a601528181612a5c01528181612db501528181612f46015281816130bc015261364601526000818161039d01528181612a0401528181612bc4015281816135c801526136ab0152600081816103c40152612e54015260008181610500015281816125cb015281816131bc015261346001526000818161028c01528181610575015281816107b301528181610bce01528181610c4a01528181610ddd01528181610fb4015281816112990152818161144c0152818161172f015281816117f801528181611a4d0152818161217d01528181612365015281816124020152612577015260008181610474015281816119a001528181611a2401528181611cf901528181611f250152818161215c015281816124bf01528181612555015281816125a9015281816127f00152818161286f01528181612f0a01528181612fd701528181613018015261315d015261469d6000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063709d039d1161013b578063ce5494bb116100b8578063e9d337b81161007c578063e9d337b8146104fb578063ec78e83214610522578063f51896f814610535578063fc0c546a1461053d578063ffa1ad741461054e5761023d565b8063ce5494bb146104b2578063d2c35ce8146104c5578063d4c3eea0146104d8578063e00af4a7146104e0578063e645c202146104f35761023d565b8063a923b2a6116100ff578063a923b2a614610454578063aa10188614610467578063b2016bd41461046f578063c415b95c14610496578063cd2d7ebe146104a95761023d565b8063709d039d146104095780637d7c2a1c1461041c578063951dc22c1461042457806399b71d5c14610437578063a3f4df7e1461043f5761023d565b80634032b72b116101c95780635f2475ca1161018d5780635f2475ca146103985780635f9d4d2e146103bf57806360a05a85146103e657806367f5e4b8146103ee578063680ff458146104015761023d565b80634032b72b1461032b57806342189c8f1461033e578063440d72481461034757806348ccda3c1461036a5780634c36fad7146103855761023d565b806319ab453c1161021057806319ab453c146102b65780631aedeabe146102c95780631fc29c01146102e057806321fc6bb0146102f55780632e1a7d4d146103185761023d565b806308bfa40a1461024257806314ae9f2e1461027257806316f0115b14610287578063189adf76146102ae575b600080fd5b600754610255906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610285610280366004614090565b610573565b005b6102557f000000000000000000000000000000000000000000000000000000000000000081565b610285610702565b6102856102c4366004614090565b6107b1565b6102d260065481565b604051908152602001610269565b61025560008051602061464883398151915281565b6102fd610a2b565b60408051938452602084019290925290820152606001610269565b610285610326366004614229565b610bcb565b610285610339366004614090565b610c48565b6102d260045481565b61035a610355366004614090565b610dc8565b6040519015158152602001610269565b610255737fc66500c84a76ad7e9c93437bfc5ac33e2ddae981565b610285610393366004614090565b610ddb565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61035a610f8e565b6102856103fc366004614229565b610fb2565b61035a6110fe565b600354610255906001600160a01b031681565b6102856111b3565b600154610255906001600160a01b031681565b610285611302565b6104476113bc565b60405161026991906143f1565b610285610462366004614259565b61144a565b61028561167f565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b600254610255906001600160a01b031681565b6102d260055481565b6102856104c0366004614090565b61172c565b6102856104d3366004614090565b611a4b565b6102d2611c14565b6102856104ee366004614090565b611e2e565b6102d26120c9565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b600054610255906001600160a01b031681565b61035a6120d3565b6000546001600160a01b0316610255565b6104476040518060400160405280600681526020016519971817191960d11b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060491906140ac565b6001600160a01b0316336001600160a01b03161461063d5760405162461bcd60e51b815260040161063490614454565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561068457600080fd5b505af1158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc919061420f565b6106ff5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610634565b50565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561075357600080fd5b505afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b919061420f565b6107a75760405162461bcd60e51b815260040161063490614424565b6107af6120ef565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561080a57600080fd5b505afa15801561081e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084291906140ac565b6001600160a01b0316336001600160a01b0316146108725760405162461bcd60e51b815260040161063490614454565b6001546001600160a01b0316156108cb5760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d6372656174656400000000006044820152606401610634565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561090b57600080fd5b505af115801561091f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094391906140ac565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f61096e3390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e7919061420f565b610a275760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610634565b5050565b60405163091030c360e01b8152306004820152600090819081906000805160206146488339815191529063091030c39060240160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190614241565b92506000805160206146488339815191526001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f9190614241565b610b39908461451c565b91506000805160206146488339815191526001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8257600080fd5b505afa158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba9190614241565b610bc4908361451c565b9050909192565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c3f5760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610634565b6106ff81612157565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca157600080fd5b505afa158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd991906140ac565b6001600160a01b0316336001600160a01b031614610d095760405162461bcd60e51b815260040161063490614454565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610d5057600080fd5b505af1158015610d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d88919061420f565b6106ff5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610634565b6000610dd3826121a2565b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3457600080fd5b505afa158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c91906140ac565b6001600160a01b0316336001600160a01b031614610e9c5760405162461bcd60e51b815260040161063490614454565b6001600160a01b038116610ee75760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610634565b6003546001600160a01b0382811691161415610f325760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610634565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000610f9b610a2b565b9250509150610faa8282612223565b925050505b90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561100b57600080fd5b505afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104391906140ac565b6001600160a01b0316336001600160a01b0316146110735760405162461bcd60e51b815260040161063490614454565b6127108111156110be5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610634565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546000906001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561115257600080fd5b505afa158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a919061420f565b6111a65760405162461bcd60e51b815260040161063490614424565b6111ae6122c0565b905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561120457600080fd5b505afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c919061420f565b6112585760405162461bcd60e51b815260040161063490614424565b600080600061126561233f565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b505050506112fd6124a6565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561135357600080fd5b505afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b919061420f565b6113a75760405162461bcd60e51b815260040161063490614424565b6113b16000612548565b6107af600019612548565b600880546113c9906145b6565b80601f01602080910402602001604051908101604052809291908181526020018280546113f5906145b6565b80156114425780601f1061141757610100808354040283529160200191611442565b820191906000526020600020905b81548152906001019060200180831161142557829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a357600080fd5b505afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db91906140ac565b6001600160a01b0316336001600160a01b03161461150b5760405162461bcd60e51b815260040161063490614454565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115919190614241565b81106115d65760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610634565b816115e15760045491505b603b82116116295760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610634565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156116d057600080fd5b505afa1580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611708919061420f565b6117245760405162461bcd60e51b815260040161063490614424565b6107af61272c565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146117a05760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610634565b6001600160a01b0381166117f65760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610634565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189191906140ac565b6001600160a01b0316146118e05760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610634565b6118e981612901565b6000546040516370a0823160e01b815230600482015261197d9183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561193257600080fd5b505afa158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a9190614241565b6000546001600160a01b0316919061299d565b6040516370a0823160e01b81523060048201526106ff9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156119e257600080fd5b505afa1580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a9190614241565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061299d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc91906140ac565b6001600160a01b0316336001600160a01b031614611b0c5760405162461bcd60e51b815260040161063490614454565b6001600160a01b038116611b625760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610634565b6002546001600160a01b0382811691161415611bb85760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610634565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080611c1f612a00565b905080611cc5576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd9190614241565b915050610faf565b600354604051631d1f307960e31b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae960048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201849052600092169063e8f983c89060640160006040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d8891908101906140c8565b506040516370a0823160e01b81523060048201529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015611dec57600080fd5b505afa158015611e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e249190614241565b610faa908261451c565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611e7f57600080fd5b505afa158015611e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb7919061420f565b611ed35760405162461bcd60e51b815260040161063490614424565b6002546001600160a01b0316611f235760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610634565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611fa55760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610634565b611fae81610dc8565b15611ff25760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610634565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156120325760025461202d906001600160a01b031647612c65565b6106ff565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561207457600080fd5b505afa158015612088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ac9190614241565b600254909150610a27906001600160a01b0384811691168361299d565b60006111ae611c14565b60008060006120e0610a2b565b9250925050610faa8282612d7e565b6040516301e9a69560e41b8152306004820152600019602482015260008051602061464883398151915290631e9a695090604401600060405180830381600087803b15801561213d57600080fd5b505af1158015612151573d6000803e3d6000fd5b50505050565b610a277f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083612d93565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061220057506001600160a01b038216737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9145b80610dd35750506001600160a01b03166000805160206146488339815191521490565b6040516370a0823160e01b8152306004820152600090600080516020614648833981519152906370a082319060240160206040518083038186803b15801561226a57600080fd5b505afa15801561227e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a29190614241565b158015906122b757508215806122b757508142115b90505b92915050565b60006122ca610f8e565b15612339576000805160206146488339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561231857600080fd5b505af115801561232c573d6000803e3d6000fd5b5050505060019050610faf565b50600090565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b1580156123a757600080fd5b505afa1580156123bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123df9190614241565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b15801561244457600080fd5b505afa158015612458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247c9190614241565b905061248781612f03565b94506124928161309a565b935061249d82613150565b92505050909192565b6040516370a0823160e01b81523060048201526107af907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906370a082319060240160206040518083038186803b15801561250b57600080fd5b505afa15801561251f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125439190614241565b613183565b61259c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361321c565b6125f06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361321c565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561264157600080fd5b505afa158015612655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126799190614241565b811015610a2757600354604051636e74a6f760e01b81526004810183905261271a916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156126c657600080fd5b505afa1580156126da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fe91906140ac565b737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9908461321c565b80612724816145eb565b9150506125f3565b60035460048054600554604051630f30f2d360e21b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae99381019390935273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26024840152604483019190915260648201526001600160a01b0390911690633cc3cb4c90608401602060405180830381600087803b1580156127b557600080fd5b505af11580156127c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ed91906140ac565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146107af5760035460048054600554604051630f30f2d360e21b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9938101939093526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248501526044840192909252606483015290911690633cc3cb4c90608401602060405180830381600087803b1580156128c957600080fd5b505af11580156128dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff91906140ac565b6040516370a0823160e01b8152306004820152600090600080516020614648833981519152906370a082319060240160206040518083038186803b15801561294857600080fd5b505afa15801561295c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129809190614241565b90508015610a2757610a2760008051602061464883398151915283835b6040516001600160a01b0383166024820152604481018290526112fd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613340565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612a3857506000610faf565b604080516001808252818301909252600091602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110612a9c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392909216602092830291909101909101526040516346df7f7160e11b815230600482015260008051602061464883398151915290638dbefee29060240160206040518083038186803b158015612af957600080fd5b505afa158015612b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b319190614241565b6040516370a0823160e01b8152306004820152600080516020614648833981519152906370a082319060240160206040518083038186803b158015612b7557600080fd5b505afa158015612b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bad9190614241565b6040516345accf9360e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638b599f2690612bfb9086903090600401614394565b60206040518083038186803b158015612c1357600080fd5b505afa158015612c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4b9190614241565b612c55919061451c565b612c5f919061451c565b91505090565b80471015612cb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610634565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612d02576040519150601f19603f3d011682016040523d82523d6000602084013e612d07565b606091505b50509050806112fd5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610634565b600082421180156122b7575050421115919050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612df757600080fd5b505afa158015612e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2f9190614241565b6040516335ea6a7560e01b81526001600160a01b0387811660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101406040518083038186803b158015612e9757600080fd5b505afa158015612eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecf91906142ae565b5050505050505050509050612ef78686612ef287612eed8787613412565b613412565b613428565b925050505b9392505050565b6000612f2e7f0000000000000000000000000000000000000000000000000000000000000000613532565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612f9057600080fd5b505afa158015612fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc89190614241565b905082811115613003576130017f000000000000000000000000000000000000000000000000000000000000000030612ef28685614573565b505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561306257600080fd5b505afa158015613076573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efc9190614241565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156130fe57600080fd5b505afa158015613112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131369190614241565b90508281101561314a57612efc8184614573565b50919050565b60008115610dd657610dd37f00000000000000000000000000000000000000000000000000000000000000003084612d93565b8015610a275760405163e8eda9df60e01b81526001600160a01b03838116600483015260248201839052306044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063e8eda9df90608401600060405180830381600087803b15801561320057600080fd5b505af1158015613214573d6000803e3d6000fd5b505050505050565b8015806132a55750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561326b57600080fd5b505afa15801561327f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a39190614241565b155b6133105760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610634565b6040516001600160a01b0383166024820152604481018290526112fd90849063095ea7b360e01b906064016129c9565b6000613395826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135ad9092919063ffffffff16565b8051909150156112fd57808060200190518101906133b3919061420f565b6112fd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610634565b600081831061342157816122b7565b5090919050565b6000811561352b57604051631a4ca37b60e21b81526001600160a01b03858116600483015260248201849052848116604483015283917f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401602060405180830381600087803b1580156134a657600080fd5b505af11580156134ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134de9190614241565b1461352b5760405162461bcd60e51b815260206004820152601f60248201527f77697468647261776e2d616d6f756e742d69732d6e6f742d636f7272656374006044820152606401610634565b5092915050565b600061353c6135c4565b90508015610a27576000600654612710141561355957600161358b565b61358b61358361357d737fc66500c84a76ad7e9c93437bfc5ac33e2ddae986613927565b84613b1f565b600654613c4a565b90506112fd737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9848484613c6d565b60606135bc8484600085613e2e565b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166135fc57506000610faf565b6000806000613609610a2b565b925092509250826000148061361d57508042115b1561373d57604080516001808252818301909252600091602080830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061368657634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152604051633111e7b360e01b81527f000000000000000000000000000000000000000000000000000000000000000090911690633111e7b3906136e89084906000199030906004016143be565b602060405180830381600087803b15801561370257600080fd5b505af1158015613716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373a9190614241565b50505b613745610a2b565b919450925090506137568282612d7e565b156137c6576040516301e9a69560e41b8152306004820152600019602482015260008051602061464883398151915290631e9a695090604401600060405180830381600087803b1580156137a957600080fd5b505af11580156137bd573d6000803e3d6000fd5b50505050613837565b6137d08382612223565b15613837576000805160206146488339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561381e57600080fd5b505af1158015613832573d6000803e3d6000fd5b505050505b6040516309a99b4f60e41b8152306004820152600019602482015260008051602061464883398151915290639a99b4f090604401600060405180830381600087803b15801561388557600080fd5b505af1158015613899573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae992506370a08231915060240160206040518083038186803b1580156138e757600080fd5b505afa1580156138fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391f9190614241565b935050505090565b60606001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2148061397057506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b15613a1e57604080516002808252606082018352909160208301908036833701905050905082816000815181106139b757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106139f957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506122ba565b6040805160038082526080820190925290602082016060803683370190505090508281600081518110613a6157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110613ab757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110613af957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b60006001835111613b685760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b6044820152606401610634565b50806000805b60018551613b7c9190614573565b811015613c4257613be8858281518110613ba657634e487b7160e01b600052603260045260246000fd5b602002602001015186836001613bbc919061451c565b81518110613bda57634e487b7160e01b600052603260045260246000fd5b602002602001015185613f56565b909350915081613c305760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b6044820152606401610634565b80613c3a816145eb565b915050613b6e565b505092915050565b6000612710613c598382614573565b613c639085614554565b6122b79190614534565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b158015613cc857600080fd5b505afa158015613cdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d0491908101906140c8565b9250925092508360001415613d1857600193505b8115613e2557600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b158015613d6257600080fd5b505afa158015613d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9a91906140ac565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613dcd95949392919061448b565b600060405180830381600087803b158015613de757600080fd5b505af1158015613dfb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e23919081019061417c565b505b50505050505050565b606082471015613e8f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610634565b843b613edd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610634565b600080866001600160a01b03168587604051613ef99190614378565b60006040518083038185875af1925050503d8060008114613f36576040519150601f19603f3d011682016040523d82523d6000602084013e613f3b565b606091505b5091509150613f4b828286614047565b979650505050505050565b6003546004805460055460405163b67bb24d60e01b81526001600160a01b038881169482019490945286841660248201526044810186905260648101929092526084820152600092839283928392919091169063b67bb24d9060a401606060405180830381600087803b158015613fcc57600080fd5b505af1158015613fe0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614004919061427a565b5091509150600454426140179190614573565b8111801561402457508115155b15614035575091506001905061403f565b6000809350935050505b935093915050565b60608315614056575081612efc565b8251156140665782518084602001fd5b8160405162461bcd60e51b815260040161063491906143f1565b80518015158114610dd657600080fd5b6000602082840312156140a1578081fd5b8135612efc81614632565b6000602082840312156140bd578081fd5b8151612efc81614632565b6000806000606084860312156140dc578182fd5b835167ffffffffffffffff8111156140f2578283fd5b8401601f81018613614102578283fd5b80516020614117614112836144f8565b6144c7565b8083825282820191508285018a848660051b8801011115614136578788fd5b8795505b8486101561416157805161414d81614632565b83526001959095019491830191830161413a565b50918801516040909801519199979850909695505050505050565b6000602080838503121561418e578182fd5b825167ffffffffffffffff8111156141a4578283fd5b8301601f810185136141b4578283fd5b80516141c2614112826144f8565b80828252848201915084840188868560051b87010111156141e1578687fd5b8694505b838510156142035780518352600194909401939185019185016141e5565b50979650505050505050565b600060208284031215614220578081fd5b6122b782614080565b60006020828403121561423a578081fd5b5035919050565b600060208284031215614252578081fd5b5051919050565b6000806040838503121561426b578182fd5b50508035926020909101359150565b60008060006060848603121561428e578283fd5b83519250602084015191506142a560408501614080565b90509250925092565b6000806000806000806000806000806101408b8d0312156142cd578586fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015164ffffffffff81168114614322578182fd5b809150509295989b9194979a5092959850565b6000815180845260208085019450808401835b8381101561436d5781516001600160a01b031687529582019590820190600101614348565b509495945050505050565b6000825161438a81846020870161458a565b9190910192915050565b6000604082526143a76040830185614335565b905060018060a01b03831660208301529392505050565b6000606082526143d16060830186614335565b6020830194909452506001600160a01b0391909116604090910152919050565b600060208252825180602084015261441081604085016020870161458a565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a060408301526144aa60a0830186614335565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156144f0576144f061461c565b604052919050565b600067ffffffffffffffff8211156145125761451261461c565b5060051b60200190565b6000821982111561452f5761452f614606565b500190565b60008261454f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561456e5761456e614606565b500290565b60008282101561458557614585614606565b500390565b60005b838110156145a557818101518382015260200161458d565b838111156121515750506000910152565b600181811c908216806145ca57607f821691505b6020821081141561314a57634e487b7160e01b600052602260045260246000fd5b60006000198214156145ff576145ff614606565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106ff57600080fdfe0000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5a2646970667358221220f15de0f5d6150ff960bd45b833a6b6c7b57420e5311b0a88d382765932c5866464736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c8063709d039d1161013b578063ce5494bb116100b8578063e9d337b81161007c578063e9d337b8146104fb578063ec78e83214610522578063f51896f814610535578063fc0c546a1461053d578063ffa1ad741461054e5761023d565b8063ce5494bb146104b2578063d2c35ce8146104c5578063d4c3eea0146104d8578063e00af4a7146104e0578063e645c202146104f35761023d565b8063a923b2a6116100ff578063a923b2a614610454578063aa10188614610467578063b2016bd41461046f578063c415b95c14610496578063cd2d7ebe146104a95761023d565b8063709d039d146104095780637d7c2a1c1461041c578063951dc22c1461042457806399b71d5c14610437578063a3f4df7e1461043f5761023d565b80634032b72b116101c95780635f2475ca1161018d5780635f2475ca146103985780635f9d4d2e146103bf57806360a05a85146103e657806367f5e4b8146103ee578063680ff458146104015761023d565b80634032b72b1461032b57806342189c8f1461033e578063440d72481461034757806348ccda3c1461036a5780634c36fad7146103855761023d565b806319ab453c1161021057806319ab453c146102b65780631aedeabe146102c95780631fc29c01146102e057806321fc6bb0146102f55780632e1a7d4d146103185761023d565b806308bfa40a1461024257806314ae9f2e1461027257806316f0115b14610287578063189adf76146102ae575b600080fd5b600754610255906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610285610280366004614090565b610573565b005b6102557f000000000000000000000000000000000000000000000000000000000000000081565b610285610702565b6102856102c4366004614090565b6107b1565b6102d260065481565b604051908152602001610269565b61025560008051602061464883398151915281565b6102fd610a2b565b60408051938452602084019290925290820152606001610269565b610285610326366004614229565b610bcb565b610285610339366004614090565b610c48565b6102d260045481565b61035a610355366004614090565b610dc8565b6040519015158152602001610269565b610255737fc66500c84a76ad7e9c93437bfc5ac33e2ddae981565b610285610393366004614090565b610ddb565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b61035a610f8e565b6102856103fc366004614229565b610fb2565b61035a6110fe565b600354610255906001600160a01b031681565b6102856111b3565b600154610255906001600160a01b031681565b610285611302565b6104476113bc565b60405161026991906143f1565b610285610462366004614259565b61144a565b61028561167f565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b600254610255906001600160a01b031681565b6102d260055481565b6102856104c0366004614090565b61172c565b6102856104d3366004614090565b611a4b565b6102d2611c14565b6102856104ee366004614090565b611e2e565b6102d26120c9565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b600054610255906001600160a01b031681565b61035a6120d3565b6000546001600160a01b0316610255565b6104476040518060400160405280600681526020016519971817191960d11b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105cc57600080fd5b505afa1580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060491906140ac565b6001600160a01b0316336001600160a01b03161461063d5760405162461bcd60e51b815260040161063490614454565b60405180910390fd5b600154604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561068457600080fd5b505af1158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc919061420f565b6106ff5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610634565b50565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561075357600080fd5b505afa158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b919061420f565b6107a75760405162461bcd60e51b815260040161063490614424565b6107af6120ef565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561080a57600080fd5b505afa15801561081e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084291906140ac565b6001600160a01b0316336001600160a01b0316146108725760405162461bcd60e51b815260040161063490614454565b6001546001600160a01b0316156108cb5760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d6372656174656400000000006044820152606401610634565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561090b57600080fd5b505af115801561091f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094391906140ac565b600180546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f61096e3390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e7919061420f565b610a275760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610634565b5050565b60405163091030c360e01b8152306004820152600090819081906000805160206146488339815191529063091030c39060240160206040518083038186803b158015610a7657600080fd5b505afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190614241565b92506000805160206146488339815191526001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f9190614241565b610b39908461451c565b91506000805160206146488339815191526001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8257600080fd5b505afa158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba9190614241565b610bc4908361451c565b9050909192565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c3f5760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610634565b6106ff81612157565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca157600080fd5b505afa158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd991906140ac565b6001600160a01b0316336001600160a01b031614610d095760405162461bcd60e51b815260040161063490614454565b600154604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b158015610d5057600080fd5b505af1158015610d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d88919061420f565b6106ff5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610634565b6000610dd3826121a2565b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3457600080fd5b505afa158015610e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6c91906140ac565b6001600160a01b0316336001600160a01b031614610e9c5760405162461bcd60e51b815260040161063490614454565b6001600160a01b038116610ee75760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610634565b6003546001600160a01b0382811691161415610f325760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610634565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000610f9b610a2b565b9250509150610faa8282612223565b925050505b90565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561100b57600080fd5b505afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104391906140ac565b6001600160a01b0316336001600160a01b0316146110735760405162461bcd60e51b815260040161063490614454565b6127108111156110be5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610634565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b6001546000906001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561115257600080fd5b505afa158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a919061420f565b6111a65760405162461bcd60e51b815260040161063490614424565b6111ae6122c0565b905090565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561120457600080fd5b505afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c919061420f565b6112585760405162461bcd60e51b815260040161063490614424565b600080600061126561233f565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b505050506112fd6124a6565b505050565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561135357600080fd5b505afa158015611367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138b919061420f565b6113a75760405162461bcd60e51b815260040161063490614424565b6113b16000612548565b6107af600019612548565b600880546113c9906145b6565b80601f01602080910402602001604051908101604052809291908181526020018280546113f5906145b6565b80156114425780601f1061141757610100808354040283529160200191611442565b820191906000526020600020905b81548152906001019060200180831161142557829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a357600080fd5b505afa1580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db91906140ac565b6001600160a01b0316336001600160a01b03161461150b5760405162461bcd60e51b815260040161063490614454565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115919190614241565b81106115d65760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610634565b816115e15760045491505b603b82116116295760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610634565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156116d057600080fd5b505afa1580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611708919061420f565b6117245760405162461bcd60e51b815260040161063490614424565b6107af61272c565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146117a05760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b6044820152606401610634565b6001600160a01b0381166117f65760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610634565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189191906140ac565b6001600160a01b0316146118e05760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610634565b6118e981612901565b6000546040516370a0823160e01b815230600482015261197d9183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561193257600080fd5b505afa158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a9190614241565b6000546001600160a01b0316919061299d565b6040516370a0823160e01b81523060048201526106ff9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156119e257600080fd5b505afa1580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a9190614241565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061299d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc91906140ac565b6001600160a01b0316336001600160a01b031614611b0c5760405162461bcd60e51b815260040161063490614454565b6001600160a01b038116611b625760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610634565b6002546001600160a01b0382811691161415611bb85760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610634565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080611c1f612a00565b905080611cc5576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd9190614241565b915050610faf565b600354604051631d1f307960e31b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae960048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201849052600092169063e8f983c89060640160006040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d8891908101906140c8565b506040516370a0823160e01b81523060048201529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015611dec57600080fd5b505afa158015611e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e249190614241565b610faa908261451c565b6001546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611e7f57600080fd5b505afa158015611e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb7919061420f565b611ed35760405162461bcd60e51b815260040161063490614424565b6002546001600160a01b0316611f235760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610634565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611fa55760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610634565b611fae81610dc8565b15611ff25760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610634565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156120325760025461202d906001600160a01b031647612c65565b6106ff565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561207457600080fd5b505afa158015612088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ac9190614241565b600254909150610a27906001600160a01b0384811691168361299d565b60006111ae611c14565b60008060006120e0610a2b565b9250925050610faa8282612d7e565b6040516301e9a69560e41b8152306004820152600019602482015260008051602061464883398151915290631e9a695090604401600060405180830381600087803b15801561213d57600080fd5b505af1158015612151573d6000803e3d6000fd5b50505050565b610a277f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083612d93565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061220057506001600160a01b038216737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9145b80610dd35750506001600160a01b03166000805160206146488339815191521490565b6040516370a0823160e01b8152306004820152600090600080516020614648833981519152906370a082319060240160206040518083038186803b15801561226a57600080fd5b505afa15801561227e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a29190614241565b158015906122b757508215806122b757508142115b90505b92915050565b60006122ca610f8e565b15612339576000805160206146488339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561231857600080fd5b505af115801561232c573d6000803e3d6000fd5b5050505060019050610faf565b50600090565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b1580156123a757600080fd5b505afa1580156123bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123df9190614241565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b15801561244457600080fd5b505afa158015612458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247c9190614241565b905061248781612f03565b94506124928161309a565b935061249d82613150565b92505050909192565b6040516370a0823160e01b81523060048201526107af907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906370a082319060240160206040518083038186803b15801561250b57600080fd5b505afa15801561251f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125439190614241565b613183565b61259c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361321c565b6125f06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361321c565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561264157600080fd5b505afa158015612655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126799190614241565b811015610a2757600354604051636e74a6f760e01b81526004810183905261271a916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156126c657600080fd5b505afa1580156126da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fe91906140ac565b737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9908461321c565b80612724816145eb565b9150506125f3565b60035460048054600554604051630f30f2d360e21b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae99381019390935273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26024840152604483019190915260648201526001600160a01b0390911690633cc3cb4c90608401602060405180830381600087803b1580156127b557600080fd5b505af11580156127c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ed91906140ac565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146107af5760035460048054600554604051630f30f2d360e21b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9938101939093526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248501526044840192909252606483015290911690633cc3cb4c90608401602060405180830381600087803b1580156128c957600080fd5b505af11580156128dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff91906140ac565b6040516370a0823160e01b8152306004820152600090600080516020614648833981519152906370a082319060240160206040518083038186803b15801561294857600080fd5b505afa15801561295c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129809190614241565b90508015610a2757610a2760008051602061464883398151915283835b6040516001600160a01b0383166024820152604481018290526112fd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613340565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612a3857506000610faf565b604080516001808252818301909252600091602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110612a9c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392909216602092830291909101909101526040516346df7f7160e11b815230600482015260008051602061464883398151915290638dbefee29060240160206040518083038186803b158015612af957600080fd5b505afa158015612b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b319190614241565b6040516370a0823160e01b8152306004820152600080516020614648833981519152906370a082319060240160206040518083038186803b158015612b7557600080fd5b505afa158015612b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bad9190614241565b6040516345accf9360e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638b599f2690612bfb9086903090600401614394565b60206040518083038186803b158015612c1357600080fd5b505afa158015612c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4b9190614241565b612c55919061451c565b612c5f919061451c565b91505090565b80471015612cb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610634565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612d02576040519150601f19603f3d011682016040523d82523d6000602084013e612d07565b606091505b50509050806112fd5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610634565b600082421180156122b7575050421115919050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612df757600080fd5b505afa158015612e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2f9190614241565b6040516335ea6a7560e01b81526001600160a01b0387811660048301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101406040518083038186803b158015612e9757600080fd5b505afa158015612eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecf91906142ae565b5050505050505050509050612ef78686612ef287612eed8787613412565b613412565b613428565b925050505b9392505050565b6000612f2e7f0000000000000000000000000000000000000000000000000000000000000000613532565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612f9057600080fd5b505afa158015612fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc89190614241565b905082811115613003576130017f000000000000000000000000000000000000000000000000000000000000000030612ef28685614573565b505b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561306257600080fd5b505afa158015613076573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efc9190614241565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156130fe57600080fd5b505afa158015613112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131369190614241565b90508281101561314a57612efc8184614573565b50919050565b60008115610dd657610dd37f00000000000000000000000000000000000000000000000000000000000000003084612d93565b8015610a275760405163e8eda9df60e01b81526001600160a01b03838116600483015260248201839052306044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063e8eda9df90608401600060405180830381600087803b15801561320057600080fd5b505af1158015613214573d6000803e3d6000fd5b505050505050565b8015806132a55750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561326b57600080fd5b505afa15801561327f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a39190614241565b155b6133105760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610634565b6040516001600160a01b0383166024820152604481018290526112fd90849063095ea7b360e01b906064016129c9565b6000613395826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135ad9092919063ffffffff16565b8051909150156112fd57808060200190518101906133b3919061420f565b6112fd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610634565b600081831061342157816122b7565b5090919050565b6000811561352b57604051631a4ca37b60e21b81526001600160a01b03858116600483015260248201849052848116604483015283917f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401602060405180830381600087803b1580156134a657600080fd5b505af11580156134ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134de9190614241565b1461352b5760405162461bcd60e51b815260206004820152601f60248201527f77697468647261776e2d616d6f756e742d69732d6e6f742d636f7272656374006044820152606401610634565b5092915050565b600061353c6135c4565b90508015610a27576000600654612710141561355957600161358b565b61358b61358361357d737fc66500c84a76ad7e9c93437bfc5ac33e2ddae986613927565b84613b1f565b600654613c4a565b90506112fd737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9848484613c6d565b60606135bc8484600085613e2e565b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166135fc57506000610faf565b6000806000613609610a2b565b925092509250826000148061361d57508042115b1561373d57604080516001808252818301909252600091602080830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061368657634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152604051633111e7b360e01b81527f000000000000000000000000000000000000000000000000000000000000000090911690633111e7b3906136e89084906000199030906004016143be565b602060405180830381600087803b15801561370257600080fd5b505af1158015613716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373a9190614241565b50505b613745610a2b565b919450925090506137568282612d7e565b156137c6576040516301e9a69560e41b8152306004820152600019602482015260008051602061464883398151915290631e9a695090604401600060405180830381600087803b1580156137a957600080fd5b505af11580156137bd573d6000803e3d6000fd5b50505050613837565b6137d08382612223565b15613837576000805160206146488339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561381e57600080fd5b505af1158015613832573d6000803e3d6000fd5b505050505b6040516309a99b4f60e41b8152306004820152600019602482015260008051602061464883398151915290639a99b4f090604401600060405180830381600087803b15801561388557600080fd5b505af1158015613899573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae992506370a08231915060240160206040518083038186803b1580156138e757600080fd5b505afa1580156138fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061391f9190614241565b935050505090565b60606001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2148061397057506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b15613a1e57604080516002808252606082018352909160208301908036833701905050905082816000815181106139b757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106139f957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506122ba565b6040805160038082526080820190925290602082016060803683370190505090508281600081518110613a6157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110613ab757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110613af957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b60006001835111613b685760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b6044820152606401610634565b50806000805b60018551613b7c9190614573565b811015613c4257613be8858281518110613ba657634e487b7160e01b600052603260045260246000fd5b602002602001015186836001613bbc919061451c565b81518110613bda57634e487b7160e01b600052603260045260246000fd5b602002602001015185613f56565b909350915081613c305760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b6044820152606401610634565b80613c3a816145eb565b915050613b6e565b505092915050565b6000612710613c598382614573565b613c639085614554565b6122b79190614534565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b158015613cc857600080fd5b505afa158015613cdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d0491908101906140c8565b9250925092508360001415613d1857600193505b8115613e2557600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b158015613d6257600080fd5b505afa158015613d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9a91906140ac565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613dcd95949392919061448b565b600060405180830381600087803b158015613de757600080fd5b505af1158015613dfb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e23919081019061417c565b505b50505050505050565b606082471015613e8f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610634565b843b613edd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610634565b600080866001600160a01b03168587604051613ef99190614378565b60006040518083038185875af1925050503d8060008114613f36576040519150601f19603f3d011682016040523d82523d6000602084013e613f3b565b606091505b5091509150613f4b828286614047565b979650505050505050565b6003546004805460055460405163b67bb24d60e01b81526001600160a01b038881169482019490945286841660248201526044810186905260648101929092526084820152600092839283928392919091169063b67bb24d9060a401606060405180830381600087803b158015613fcc57600080fd5b505af1158015613fe0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614004919061427a565b5091509150600454426140179190614573565b8111801561402457508115155b15614035575091506001905061403f565b6000809350935050505b935093915050565b60608315614056575081612efc565b8251156140665782518084602001fd5b8160405162461bcd60e51b815260040161063491906143f1565b80518015158114610dd657600080fd5b6000602082840312156140a1578081fd5b8135612efc81614632565b6000602082840312156140bd578081fd5b8151612efc81614632565b6000806000606084860312156140dc578182fd5b835167ffffffffffffffff8111156140f2578283fd5b8401601f81018613614102578283fd5b80516020614117614112836144f8565b6144c7565b8083825282820191508285018a848660051b8801011115614136578788fd5b8795505b8486101561416157805161414d81614632565b83526001959095019491830191830161413a565b50918801516040909801519199979850909695505050505050565b6000602080838503121561418e578182fd5b825167ffffffffffffffff8111156141a4578283fd5b8301601f810185136141b4578283fd5b80516141c2614112826144f8565b80828252848201915084840188868560051b87010111156141e1578687fd5b8694505b838510156142035780518352600194909401939185019185016141e5565b50979650505050505050565b600060208284031215614220578081fd5b6122b782614080565b60006020828403121561423a578081fd5b5035919050565b600060208284031215614252578081fd5b5051919050565b6000806040838503121561426b578182fd5b50508035926020909101359150565b60008060006060848603121561428e578283fd5b83519250602084015191506142a560408501614080565b90509250925092565b6000806000806000806000806000806101408b8d0312156142cd578586fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015164ffffffffff81168114614322578182fd5b809150509295989b9194979a5092959850565b6000815180845260208085019450808401835b8381101561436d5781516001600160a01b031687529582019590820190600101614348565b509495945050505050565b6000825161438a81846020870161458a565b9190910192915050565b6000604082526143a76040830185614335565b905060018060a01b03831660208301529392505050565b6000606082526143d16060830186614335565b6020830194909452506001600160a01b0391909116604090910152919050565b600060208252825180602084015261441081604085016020870161458a565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a060408301526144aa60a0830186614335565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156144f0576144f061461c565b604052919050565b600067ffffffffffffffff8211156145125761451261461c565b5060051b60200190565b6000821982111561452f5761452f614606565b500190565b60008261454f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561456e5761456e614606565b500290565b60008282101561458557614585614606565b500390565b60005b838110156145a557818101518382015260200161458d565b838111156121515750506000910152565b600181811c908216806145ca57607f821691505b6020821081141561314a57634e487b7160e01b600052602260045260246000fd5b60006000198214156145ff576145ff614606565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106ff57600080fdfe0000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5a2646970667358221220f15de0f5d6150ff960bd45b833a6b6c7b57420e5311b0a88d382765932c5866464736f6c63430008030033",
  "devdoc": {
    "details": "This strategy will deposit collateral token in Aave and earn interest.",
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "init(address)": {
        "params": {
          "_addressListFactory": "To support same code in eth side chain, user _addressListFactory as param mainnet - 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon - 0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291 avalanche - 0xc5CdF8CBE886FC5c1EF5CD4fdd599C975eC6BB54"
        }
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "aToken and collateral are 1:1"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "canStartCooldown()": {
        "notice": "Returns true if we should start cooldown"
      },
      "canUnstake()": {
        "notice": "Returns true if Aave can be unstaked"
      },
      "cooldownData()": {
        "notice": "Return cooldown related timestamps"
      },
      "init(address)": {
        "notice": "Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "startCooldown()": {
        "notice": "Initiate cooldown to unstake aave."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Report total value"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "unstakeAave()": {
        "notice": "Unstake Aave from stakedAave contract"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13612,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13619,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "keepers",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAddressList)4357"
      },
      {
        "astId": 13622,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13625,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)4660"
      },
      {
        "astId": 13628,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13631,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13634,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14901,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "aaveAddressesProvider",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(AaveLendingPoolAddressesProvider)4003"
      },
      {
        "astId": 15504,
        "contract": "contracts/strategies/aave/AaveStrategy.sol:AaveStrategy",
        "label": "NAME",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AaveLendingPoolAddressesProvider)4003": {
        "encoding": "inplace",
        "label": "contract AaveLendingPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressList)4357": {
        "encoding": "inplace",
        "label": "contract IAddressList",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)4660": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}