{
  "address": "0x4634826b13A6f4edED44539a9AAE119438c1517b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowRatio",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account.Info",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "callFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dyDxMarketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAaveActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDyDxActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLossMaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateAaveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowRatio",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateDyDxStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xae9cec28a4517a309aa650c4f738e7244208fcf1055fe3a796a32f923a1e7ddd",
  "receipt": {
    "to": null,
    "from": "0x1CbfaE0367a9B1e4Ac2c158E57B5F00cCb337271",
    "contractAddress": "0x4634826b13A6f4edED44539a9AAE119438c1517b",
    "transactionIndex": 65,
    "gasUsed": "5296705",
    "logsBloom": "0x
    "blockHash": "0xc1ed9635a2106af89c160e3baf9598f95d3259daa260b6914928605387d8ff7b",
    "transactionHash": "0xae9cec28a4517a309aa650c4f738e7244208fcf1055fe3a796a32f923a1e7ddd",
    "logs": [],
    "blockNumber": 13852451,
    "cumulativeGasUsed": "11925587",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xef4F4604106de23CDadfEAE08fcC34602cB475C1",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710",
    "0xFAce851a4921ce59e912d19329929CE6da6EB0c7"
  ],
  "solcInputHash": "9538cd455de8fb8808e4539979965a68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowRatio\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dyDxMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAaveActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDyDxActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLossMaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAaveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowRatio\",\"type\":\"uint256\"}],\"name\":\"updateBorrowRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateDyDxStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"callFunction(address,(address,uint256),bytes)\":{\"details\":\"DyDx calls this function after doing flash loan\"},\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"Aave will call this function after doing flash loan\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Compound calculate COMP accrued and store it when user interact with Compound contracts, i.e. deposit, withdraw or transfer tokens. So compAccrued() will return stored COMP accrued amount, which is olderFor up to date value check totalValueCurrent()\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral tokenClaimed COMP will stay in strategy until next rebalance\"},\"updateBorrowRatio(uint256,uint256)\":{\"details\":\"It is possible to set 0 as _minBorrowRatio to not borrow anything\",\"params\":{\"_maxBorrowRatio\":\"Maximum % we want to borrow\",\"_minBorrowRatio\":\"Minimum % we want to borrow\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit LINK in Compound and also borrow LINK based on leverage condition\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"currentBorrowRatio()\":{\"notice\":\"Current borrow ratio, calculated as current borrow divide by max allowed borrow Return value is based on basis points, i.e. 7500 = 75% ratio\"},\"getPosition()\":{\"notice\":\"Return supply and borrow position. Position may return few block old value\"},\"isLossMaking()\":{\"notice\":\"Calculate current position using claimed COMP and current borrow.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value using COMP accrued, supply and borrow position\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value based on COMP claimed, supply and borrow position\"},\"updateBorrowRatio(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow ratio\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/compound/CompoundLeverageStrategyLINK.sol\":\"CompoundLeverageStrategyLINK\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/FlashLoanHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"./interfaces/aave/IAave.sol\\\";\\nimport \\\"./interfaces/dydx/ISoloMargin.sol\\\";\\n\\n/**\\n * @title FlashLoanHelper:: This contract does all heavy lifting to get flash loan via Aave and DyDx.\\n * @dev End user has to override _flashLoanLogic() function to perform logic after flash loan is done.\\n *      Also needs to approve token to aave and dydx via _approveToken function.\\n *      2 utility internal functions are also provided to activate/deactivate flash loan providers.\\n *      Utility function are provided as internal so that end user can choose controlled access via public functions.\\n */\\nabstract contract FlashLoanHelper {\\n    using SafeERC20 for IERC20;\\n\\n    AaveLendingPoolAddressesProvider internal constant AAVE_ADDRESSES_PROVIDER =\\n        AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n    address internal constant SOLO = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n    uint256 public dyDxMarketId;\\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    bool public isAaveActive = false;\\n    bool public isDyDxActive = false;\\n\\n    function _updateAaveStatus(bool _status) internal {\\n        isAaveActive = _status;\\n    }\\n\\n    function _updateDyDxStatus(bool _status, address _token) internal {\\n        if (_status) {\\n            dyDxMarketId = _getMarketIdFromTokenAddress(SOLO, _token);\\n        }\\n        isDyDxActive = _status;\\n    }\\n\\n    /// @notice Approve all required tokens for flash loan\\n    function _approveToken(address _token, uint256 _amount) internal {\\n        IERC20(_token).safeApprove(SOLO, _amount);\\n        IERC20(_token).safeApprove(AAVE_ADDRESSES_PROVIDER.getLendingPool(), _amount);\\n    }\\n\\n    /// @dev Override this function to execute logic which uses flash loan amount\\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal virtual;\\n\\n    /***************************** Aave flash loan functions ***********************************/\\n\\n    bool private awaitingFlash = false;\\n\\n    /**\\n     * @notice This is entry point for Aave flash loan\\n     * @param _token Token for which we are taking flash loan\\n     * @param _amountDesired Flash loan amount\\n     * @param _data This will be passed downstream for processing. It can be empty.\\n     */\\n    function _doAaveFlashLoan(\\n        address _token,\\n        uint256 _amountDesired,\\n        bytes memory _data\\n    ) internal returns (uint256 _amount) {\\n        require(isAaveActive, \\\"aave-flash-loan-is-not-active\\\");\\n        AaveLendingPool _aaveLendingPool = AaveLendingPool(AAVE_ADDRESSES_PROVIDER.getLendingPool());\\n        AaveProtocolDataProvider _aaveProtocolDataProvider =\\n            AaveProtocolDataProvider(AAVE_ADDRESSES_PROVIDER.getAddress(AAVE_PROVIDER_ID));\\n        // Check token liquidity in Aave\\n        (uint256 _availableLiquidity, , , , , , , , , ) = _aaveProtocolDataProvider.getReserveData(_token);\\n        if (_amountDesired > _availableLiquidity) {\\n            _amountDesired = _availableLiquidity;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = _token;\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = _amountDesired;\\n\\n        // 0 = no debt, 1 = stable, 2 = variable\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0;\\n\\n        // Anyone can call aave flash loan to us, so we need some protection\\n        awaitingFlash = true;\\n\\n        // function params: receiver, assets, amounts, modes, onBehalfOf, data, referralCode\\n        _aaveLendingPool.flashLoan(address(this), assets, amounts, modes, address(this), _data, 0);\\n        _amount = _amountDesired;\\n        awaitingFlash = false;\\n    }\\n\\n    /// @dev Aave will call this function after doing flash loan\\n    function executeOperation(\\n        address[] calldata, /*_assets*/\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _premiums,\\n        address _initiator,\\n        bytes calldata _data\\n    ) external returns (bool) {\\n        require(msg.sender == AAVE_ADDRESSES_PROVIDER.getLendingPool(), \\\"!aave-pool\\\");\\n        require(awaitingFlash, \\\"invalid-flash-loan\\\");\\n        require(_initiator == address(this), \\\"invalid-initiator\\\");\\n\\n        // Flash loan amount + flash loan fee\\n        uint256 _repayAmount = _amounts[0] + _premiums[0];\\n        _flashLoanLogic(_data, _repayAmount);\\n        return true;\\n    }\\n\\n    /***************************** Aave flash loan functions ends ***********************************/\\n\\n    /***************************** DyDx flash loan functions ***************************************/\\n\\n    /**\\n     * @notice This is entry point for DyDx flash loan\\n     * @param _token Token for which we are taking flash loan\\n     * @param _amountDesired Flash loan amount\\n     * @param _data This will be passed downstream for processing. It can be empty.\\n     */\\n    function _doDyDxFlashLoan(\\n        address _token,\\n        uint256 _amountDesired,\\n        bytes memory _data\\n    ) internal returns (uint256 _amount) {\\n        require(isDyDxActive, \\\"dydx-flash-loan-is-not-active\\\");\\n\\n        // Check token liquidity in DyDx\\n        uint256 amountInSolo = IERC20(_token).balanceOf(SOLO);\\n        if (_amountDesired > amountInSolo) {\\n            _amountDesired = amountInSolo;\\n        }\\n        // Repay amount, amount with fee, can be 2 wei higher. Consider 2 wei as fee\\n        uint256 repayAmount = _amountDesired + 2;\\n\\n        // Encode custom data for callFunction\\n        bytes memory _callData = abi.encode(_data, repayAmount);\\n\\n        // 1. Withdraw _token\\n        // 2. Call callFunction(...) which will call loanLogic\\n        // 3. Deposit _token back\\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n        operations[0] = _getWithdrawAction(dyDxMarketId, _amountDesired);\\n        operations[1] = _getCallAction(_callData);\\n        operations[2] = _getDepositAction(dyDxMarketId, repayAmount);\\n\\n        Account.Info[] memory accountInfos = new Account.Info[](1);\\n        accountInfos[0] = _getAccountInfo();\\n\\n        ISoloMargin(SOLO).operate(accountInfos, operations);\\n        _amount = _amountDesired;\\n    }\\n\\n    /// @dev DyDx calls this function after doing flash loan\\n    function callFunction(\\n        address _sender,\\n        Account.Info memory, /* _account */\\n        bytes memory _callData\\n    ) external {\\n        (bytes memory _data, uint256 _repayAmount) = abi.decode(_callData, (bytes, uint256));\\n        require(msg.sender == SOLO, \\\"!solo\\\");\\n        require(_sender == address(this), \\\"invalid-initiator\\\");\\n        _flashLoanLogic(_data, _repayAmount);\\n    }\\n\\n    /********************************* DyDx helper functions *********************************/\\n    function _getAccountInfo() internal view returns (Account.Info memory) {\\n        return Account.Info({owner: address(this), number: 1});\\n    }\\n\\n    function _getMarketIdFromTokenAddress(address _solo, address token) internal view returns (uint256) {\\n        ISoloMargin solo = ISoloMargin(_solo);\\n\\n        uint256 numMarkets = solo.getNumMarkets();\\n\\n        address curToken;\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            curToken = solo.getMarketTokenAddress(i);\\n\\n            if (curToken == token) {\\n                return i;\\n            }\\n        }\\n\\n        revert(\\\"no-marketId-found-for-token\\\");\\n    }\\n\\n    function _getWithdrawAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Withdraw,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n\\n    function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Call,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: 0\\n                }),\\n                primaryMarketId: 0,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: data\\n            });\\n    }\\n\\n    function _getDepositAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Deposit,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: true,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n\\n    /***************************** DyDx flash loan functions end *****************************/\\n}\\n\",\"keccak256\":\"0x7ff0c66a817a712e171b1b328c2879b57ff3a4a15ad8890ff1bc5121a55d2a34\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface AaveLendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4d50377552239ead8323580a7bcc073d2dcce3f2ea35d04309119192e833d94\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7c33866bea8f329ae2e1b858695eb58eb44d5495b2b47cf677df2329abc4bd98\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(\\n        address owner,\\n        address user,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function markets(address market)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isCompted\\n        );\\n}\\n\",\"keccak256\":\"0x75e5522f5de8a74130bb58bbf6700f11ec2534984cf71b4ee6cdc609625a3eec\",\"license\":\"MIT\"},\"contracts/interfaces/dydx/ISoloMargin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/** In order to keep code/files short, all libraries and interfaces are trimmed as per Vesper need */\\n\\nlibrary Account {\\n    enum Status {Normal, Liquid, Vapor}\\n    struct Info {\\n        address owner; // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n}\\n\\nlibrary Actions {\\n    enum ActionType {\\n        Deposit, // supply tokens\\n        Withdraw, // borrow tokens\\n        Transfer, // transfer balance between accounts\\n        Buy, // buy an amount of some token (publicly)\\n        Sell, // sell an amount of some token (publicly)\\n        Trade, // trade tokens against another account\\n        Liquidate, // liquidate an undercollateralized or expiring account\\n        Vaporize, // use excess tokens to zero-out a completely negative account\\n        Call // send arbitrary data to an address\\n    }\\n\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        Types.AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n}\\n\\nlibrary Types {\\n    enum AssetDenomination {\\n        Wei, // the amount is denominated in wei\\n        Par // the amount is denominated in par\\n    }\\n\\n    enum AssetReference {\\n        Delta, // the amount is given as a delta from the current value\\n        Target // the amount is given as an exact number to end up at\\n    }\\n\\n    struct AssetAmount {\\n        bool sign; // true if positive\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n}\\n\\ninterface ISoloMargin {\\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\\n}\\n\\n/**\\n * @title ICallee\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ninterface ICallee {\\n    // ============ Public Functions ============\\n\\n    /**\\n     * Allows users to send this contract arbitrary data.\\n     *\\n     * @param  sender       The msg.sender to Solo\\n     * @param  accountInfo  The account from which the data is being sent\\n     * @param  data         Arbitrary data given by the sender\\n     */\\n    function callFunction(\\n        address sender,\\n        Account.Info memory accountInfo,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe6945fff16602067f5e77cfd47ce6f8fbc8292b0d7841831d4414a99ced5cbdc\",\"license\":\"MIT\"},\"contracts/interfaces/oracle/IUniswapV3Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n// Interface to use 3rd party Uniswap V3 oracle utility contract deployed at https://etherscan.io/address/0x0f1f5a87f99f0918e6c81f16e59f3518698221ff#code\\n\\n/// @title UniswapV3 oracle with ability to query across an intermediate liquidity pool\\ninterface IUniswapV3Oracle {\\n    function assetToEth(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 ethAmountOut);\\n\\n    function ethToAsset(\\n        uint256 _ethAmountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 amountOut);\\n\\n    function assetToAsset(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 amountOut);\\n\\n    function assetToAssetThruRoute(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod,\\n        address _routeThruToken,\\n        uint24[2] memory _poolFees\\n    ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x80d66ff266f3703c39a139772c70d1bcc280f28ba0b71ceca93194788339e095\",\"license\":\"MIT\"},\"contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0ca44fa24917d55f54cb00a484d7826bae677747a2110203e2cfe642ba1eec5e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf2335cb2ab1ae53919cb05ef89b3c0b223565c2ddb2e3d972a25e471230d417\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    // Function to get pricePerShare from V2 pools\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb10ebfc7a768362d28f4dd801c1d2f5f0c2b5f72e6afbac3493618c5ad61b104\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration.\\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0xec05b78e209612498e9e3b40d16c2f660f50720374a9562da0500c8c45bded44\",\"license\":\"MIT\"},\"contracts/strategies/compound/CompoundLeverageStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GNU LGPLv3\\n// Heavily inspired from CompoundLeverage strategy of Yearn. https://etherscan.io/address/0x4031afd3B0F71Bace9181E554A9E680Ee4AbE7dF#code\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../../interfaces/oracle/IUniswapV3Oracle.sol\\\";\\nimport \\\"../../FlashLoanHelper.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and based on position\\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\\ncontract CompoundLeverageStrategy is Strategy, FlashLoanHelper {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint256 public minBorrowRatio = 5_000; // 50%\\n    uint256 public maxBorrowRatio = 6_000; // 60%\\n    CToken internal cToken;\\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    IUniswapV3Oracle internal constant ORACLE = IUniswapV3Oracle(0x0F1f5A87f99f0918e6C81F16E59F3518698221Ff);\\n    uint32 internal constant TWAP_PERIOD = 3600;\\n\\n    event UpdatedBorrowRatio(\\n        uint256 previousMinBorrowRatio,\\n        uint256 newMinBorrowRatio,\\n        uint256 previousMaxBorrowRatio,\\n        uint256 newMaxBorrowRatio\\n    );\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        cToken = CToken(_receiptToken);\\n    }\\n\\n    /**\\n     * @notice Update upper and lower borrow ratio\\n     * @dev It is possible to set 0 as _minBorrowRatio to not borrow anything\\n     * @param _minBorrowRatio Minimum % we want to borrow\\n     * @param _maxBorrowRatio Maximum % we want to borrow\\n     */\\n    function updateBorrowRatio(uint256 _minBorrowRatio, uint256 _maxBorrowRatio) external onlyGovernor {\\n        (, uint256 _collateralFactor, ) = COMPTROLLER.markets(address(cToken));\\n        require(_maxBorrowRatio < (_collateralFactor / 1e14), \\\"invalid-max-borrow-limit\\\");\\n        require(_maxBorrowRatio > _minBorrowRatio, \\\"max-should-be-higher-than-min\\\");\\n        emit UpdatedBorrowRatio(minBorrowRatio, _minBorrowRatio, maxBorrowRatio, _maxBorrowRatio);\\n        minBorrowRatio = _minBorrowRatio;\\n        maxBorrowRatio = _maxBorrowRatio;\\n    }\\n\\n    function updateAaveStatus(bool _status) external onlyGovernor {\\n        _updateAaveStatus(_status);\\n    }\\n\\n    function updateDyDxStatus(bool _status) external onlyGovernor {\\n        _updateDyDxStatus(_status, address(collateralToken));\\n    }\\n\\n    /**\\n     * @notice Calculate total value based on COMP claimed, supply and borrow position\\n     * @dev Report total value in collateral token\\n     * @dev Claimed COMP will stay in strategy until next rebalance\\n     */\\n    function totalValueCurrent() public override returns (uint256 _totalValue) {\\n        cToken.exchangeRateCurrent();\\n        _claimComp();\\n        _totalValue = _calculateTotalValue(IERC20(COMP).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Current borrow ratio, calculated as current borrow divide by max allowed borrow\\n     * Return value is based on basis points, i.e. 7500 = 75% ratio\\n     */\\n    function currentBorrowRatio() external view returns (uint256) {\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n        return _borrow == 0 ? 0 : (_borrow * MAX_BPS) / _supply;\\n    }\\n\\n    /**\\n     * @notice Calculate total value using COMP accrued, supply and borrow position\\n     * @dev Compound calculate COMP accrued and store it when user interact with\\n     * Compound contracts, i.e. deposit, withdraw or transfer tokens.\\n     * So compAccrued() will return stored COMP accrued amount, which is older\\n     * @dev For up to date value check totalValueCurrent()\\n     */\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        _totalValue = _calculateTotalValue(COMPTROLLER.compAccrued(address(this)));\\n    }\\n\\n    /**\\n     * @notice Calculate current position using claimed COMP and current borrow.\\n     */\\n    function isLossMaking() external returns (bool) {\\n        // It's loss making if _totalValue < totalDebt\\n        return totalValueCurrent() < IVesperPool(pool).totalDebtOf(address(this));\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(cToken) || _token == COMP || _token == address(collateralToken);\\n    }\\n\\n    /// @notice Return supply and borrow position. Position may return few block old value\\n    function getPosition() public view returns (uint256 _supply, uint256 _borrow) {\\n        (, uint256 _cTokenBalance, uint256 _borrowBalance, uint256 _exchangeRate) =\\n            cToken.getAccountSnapshot(address(this));\\n        _supply = (_cTokenBalance * _exchangeRate) / 1e18;\\n        _borrow = _borrowBalance;\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(COMP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n        FlashLoanHelper._approveToken(address(collateralToken), _amount);\\n    }\\n\\n    /**\\n     * @notice Claim COMP and transfer to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        require(IStrategy(_newStrategy).token() == address(cToken), \\\"wrong-receipt-token\\\");\\n        minBorrowRatio = 0;\\n        // It will calculate amount to repay based on borrow limit and payback all\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @notice Calculate borrow position based on borrow ratio, current supply, borrow, amount\\n     * being deposited or withdrawn.\\n     * @param _amount Collateral amount\\n     * @param _isDeposit Flag indicating whether we are depositing _amount or withdrawing\\n     * @return _position Amount of borrow that need to be adjusted\\n     * @return _shouldRepay Flag indicating whether _position is borrow amount or repay amount\\n     */\\n    function _calculateDesiredPosition(uint256 _amount, bool _isDeposit)\\n        internal\\n        returns (uint256 _position, bool _shouldRepay)\\n    {\\n        uint256 _totalSupply = cToken.balanceOfUnderlying(address(this));\\n        uint256 _currentBorrow = cToken.borrowBalanceStored(address(this));\\n        // If minimum borrow limit set to 0 then repay borrow\\n        if (minBorrowRatio == 0) {\\n            return (_currentBorrow, true);\\n        }\\n\\n        uint256 _supply = _totalSupply - _currentBorrow;\\n\\n        // In case of withdraw, _amount can be greater than _supply\\n        uint256 _newSupply = _isDeposit ? _supply + _amount : _supply > _amount ? _supply - _amount : 0;\\n\\n        // (supply * borrowRatio)/(BPS - borrowRatio)\\n        uint256 _borrowUpperBound = (_newSupply * maxBorrowRatio) / (MAX_BPS - maxBorrowRatio);\\n        uint256 _borrowLowerBound = (_newSupply * minBorrowRatio) / (MAX_BPS - minBorrowRatio);\\n\\n        // If our current borrow is greater than max borrow allowed, then we will have to repay\\n        // some to achieve safe position else borrow more.\\n        if (_currentBorrow > _borrowUpperBound) {\\n            _shouldRepay = true;\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _position = _currentBorrow - _borrowLowerBound;\\n        } else if (_currentBorrow < _borrowLowerBound) {\\n            _shouldRepay = false;\\n            // We can borrow more.\\n            _position = _borrowLowerBound - _currentBorrow;\\n        }\\n    }\\n\\n    /**\\n     * @dev COMP is converted to collateral and if we have some borrow interest to pay,\\n     * it will go come from collateral.\\n     * @dev Report total value in collateral token\\n     */\\n    function _calculateTotalValue(uint256 _compAccrued) internal view returns (uint256 _totalValue) {\\n        uint256 _compAsCollateral;\\n        if (_compAccrued != 0) {\\n            (, _compAsCollateral, ) = swapManager.bestOutputFixedInput(COMP, address(collateralToken), _compAccrued);\\n        }\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n        _totalValue = _compAsCollateral + collateralToken.balanceOf(address(this)) + _supply - _borrow;\\n    }\\n\\n    /// @notice Claim comp\\n    function _claimComp() internal {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        COMPTROLLER.claimComp(address(this), _markets);\\n    }\\n\\n    /// @notice Claim COMP and convert COMP into collateral token.\\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\\n        _claimComp();\\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\\n        if (_compAmount != 0) {\\n            _safeSwap(COMP, _toToken, _compAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\\n     * @dev Claim COMP and convert to collateral.\\n     */\\n    function _generateReport()\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        (, , , , uint256 _totalDebt, , , uint256 _debtRatio) = IVesperPool(pool).strategy(address(this));\\n\\n        // Claim COMP and convert to collateral token\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        uint256 _supply = cToken.balanceOfUnderlying(address(this));\\n        uint256 _borrow = cToken.borrowBalanceStored(address(this));\\n        uint256 _investedCollateral = _supply - _borrow;\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _investedCollateral + _collateralHere;\\n\\n        uint256 _profitToWithdraw;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n            if (_collateralHere <= _profit) {\\n                _profitToWithdraw = _profit - _collateralHere;\\n            } else if (_collateralHere >= (_profit + _excessDebt)) {\\n                _payback = _excessDebt;\\n            } else {\\n                // _profit < CollateralHere < _profit + _excessDebt\\n                _payback = _collateralHere - _profit;\\n            }\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n\\n        uint256 _paybackToWithdraw = _excessDebt - _payback;\\n        uint256 _totalAmountToWithdraw = _paybackToWithdraw + _profitToWithdraw;\\n        if (_totalAmountToWithdraw != 0) {\\n            uint256 _withdrawn = _withdrawHere(_totalAmountToWithdraw);\\n            // Any amount withdrawn over _profitToWithdraw is payback for pool\\n            if (_withdrawn > _profitToWithdraw) {\\n                _payback += (_withdrawn - _profitToWithdraw);\\n            }\\n        }\\n\\n        // Handle scenario if debtRatio is zero and some supply left.\\n        // Remaining tokens, after payback withdrawal, are profit\\n        (_supply, _borrow) = getPosition();\\n        if (_debtRatio == 0 && _supply != 0 && _borrow == 0) {\\n            // This will redeem all cTokens this strategy has\\n            _redeemUnderlying(MAX_UINT_VALUE);\\n            _profit += _supply;\\n        }\\n    }\\n\\n    /**\\n     *  Adjust position by normal leverage and deleverage.\\n     * @param _adjustBy Amount by which we want to increase or decrease _borrow\\n     * @param _shouldRepay True indicate we want to deleverage\\n     * @return amount Actual adjusted amount\\n     */\\n    function _adjustPosition(uint256 _adjustBy, bool _shouldRepay) internal returns (uint256 amount) {\\n        // We can get position via view function, as this function will be called after _calculateDesiredPosition\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n\\n        // If no borrow then there is nothing to deleverage\\n        if (_borrow == 0 && _shouldRepay) {\\n            return 0;\\n        }\\n\\n        (, uint256 collateralFactor, ) = COMPTROLLER.markets(address(cToken));\\n\\n        if (_shouldRepay) {\\n            amount = _normalDeleverage(_adjustBy, _supply, _borrow, collateralFactor);\\n        } else {\\n            amount = _normalLeverage(_adjustBy, _supply, _borrow, collateralFactor);\\n        }\\n    }\\n\\n    /**\\n     * Deleverage: Reduce borrow to achieve safe position\\n     * @param _maxDeleverage Reduce borrow by this amount\\n     * @return _deleveragedAmount Amount we actually reduced\\n     */\\n    function _normalDeleverage(\\n        uint256 _maxDeleverage,\\n        uint256 _supply,\\n        uint256 _borrow,\\n        uint256 _collateralFactor\\n    ) internal returns (uint256 _deleveragedAmount) {\\n        uint256 _theoreticalSupply;\\n\\n        if (_collateralFactor != 0) {\\n            // Calculate minimum supply required to support _borrow\\n            _theoreticalSupply = (_borrow * 1e18) / _collateralFactor;\\n        }\\n\\n        _deleveragedAmount = _supply - _theoreticalSupply;\\n\\n        if (_deleveragedAmount >= _borrow) {\\n            _deleveragedAmount = _borrow;\\n        }\\n        if (_deleveragedAmount >= _maxDeleverage) {\\n            _deleveragedAmount = _maxDeleverage;\\n        }\\n\\n        _redeemUnderlying(_deleveragedAmount);\\n        _repayBorrow(_deleveragedAmount);\\n    }\\n\\n    /**\\n     * Leverage: Borrow more\\n     * @param _maxLeverage Max amount to borrow\\n     * @return _leveragedAmount Amount we actually borrowed\\n     */\\n    function _normalLeverage(\\n        uint256 _maxLeverage,\\n        uint256 _supply,\\n        uint256 _borrow,\\n        uint256 _collateralFactor\\n    ) internal returns (uint256 _leveragedAmount) {\\n        // Calculate maximum we can borrow at current _supply\\n        uint256 theoreticalBorrow = (_supply * _collateralFactor) / 1e18;\\n\\n        _leveragedAmount = theoreticalBorrow - _borrow;\\n\\n        if (_leveragedAmount >= _maxLeverage) {\\n            _leveragedAmount = _maxLeverage;\\n        }\\n        _borrowCollateral(_leveragedAmount);\\n        _mint(collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Deposit collateral in Compound and adjust borrow position\\n    function _reinvest() internal virtual override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_collateralBalance, true);\\n        // Supply collateral to compound.\\n        _mint(_collateralBalance);\\n\\n        // During reinvest, _shouldRepay will be false which indicate that we will borrow more.\\n        _position -= _doFlashLoan(_position, _shouldRepay);\\n\\n        uint256 i = 0;\\n        while (_position > 0 && i <= 6) {\\n            _position -= _adjustPosition(_position, _shouldRepay);\\n            i++;\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral and transfer it to pool\\n    function _withdraw(uint256 _amount) internal override {\\n        collateralToken.safeTransfer(pool, _withdrawHere(_amount));\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_amount, false);\\n        if (_shouldRepay) {\\n            // Do deleverage by flash loan\\n            _position -= _doFlashLoan(_position, _shouldRepay);\\n\\n            // If we still have _position to deleverage do it via normal deleverage\\n            uint256 i = 0;\\n            while (_position > 0 && i <= 10) {\\n                _position -= _adjustPosition(_position, true);\\n                i++;\\n            }\\n\\n            // There may be scenario where we are not able to deleverage enough\\n            if (_position != 0) {\\n                // Calculate redeemable at current borrow and supply.\\n                (uint256 _supply, uint256 _borrow) = getPosition();\\n\\n                uint256 _supplyToSupportBorrow;\\n                if (maxBorrowRatio != 0) {\\n                    _supplyToSupportBorrow = (_borrow * MAX_BPS) / maxBorrowRatio;\\n                }\\n                // Current supply minus supply required to support _borrow at _maxBorrowRatio\\n                uint256 _redeemable = _supply - _supplyToSupportBorrow;\\n                if (_amount > _redeemable) {\\n                    _amount = _redeemable;\\n                }\\n            }\\n        }\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n\\n        // If we do not have enough collateral, try to get some via COMP\\n        // This scenario is rare and will happen during last withdraw\\n        if (_amount > cToken.balanceOfUnderlying(address(this))) {\\n            // Use all collateral for withdraw\\n            _collateralBefore = 0;\\n            _claimRewardsAndConvertTo(address(collateralToken));\\n            // Updated amount\\n            _amount = _amount - collateralToken.balanceOf(address(this));\\n        }\\n        _redeemUnderlying(_amount);\\n        uint256 _collateralAfter = collateralToken.balanceOf(address(this));\\n        return _collateralAfter - _collateralBefore;\\n    }\\n\\n    /**\\n     * @dev Aave flash is used only for withdrawal due to high fee compare to DyDx\\n     * @param _flashAmount Amount for flash loan\\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\\n     * @return Total amount we leverage or deleverage using flash loan\\n     */\\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal returns (uint256) {\\n        uint256 _totalFlashAmount;\\n        // Due to less fee DyDx is our primary flash loan provider\\n        if (isDyDxActive && _flashAmount > 0) {\\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\\n            _totalFlashAmount = _doDyDxFlashLoan(address(collateralToken), _flashAmount, _data);\\n            _flashAmount -= _totalFlashAmount;\\n        }\\n        if (isAaveActive && _shouldRepay && _flashAmount > 0) {\\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\\n            _totalFlashAmount += _doAaveFlashLoan(address(collateralToken), _flashAmount, _data);\\n        }\\n        return _totalFlashAmount;\\n    }\\n\\n    /**\\n     * @notice This function will be called by flash loan\\n     * @dev In case of borrow, DyDx is preferred as fee is so low that it does not effect\\n     * our collateralRatio and liquidation risk.\\n     */\\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal override {\\n        (uint256 _amount, bool _deficit) = abi.decode(_data, (uint256, bool));\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        require(_collateralHere >= _amount, \\\"FLASH_FAILED\\\"); // to stop malicious calls\\n\\n        //if in deficit we repay amount and then withdraw\\n        if (_deficit) {\\n            _repayBorrow(_amount);\\n            //if we are withdrawing we take more to cover fee\\n            _redeemUnderlying(_repayAmount);\\n        } else {\\n            _mint(_collateralHere);\\n            //borrow more to cover fee\\n            _borrowCollateral(_repayAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev If swap slippage is defined then use oracle to get amountOut and calculate minAmountOut\\n     */\\n    function _safeSwap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) private {\\n        uint256 _minAmountOut =\\n            swapSlippage != 10000\\n                ? _calcAmtOutAfterSlippage(\\n                    ORACLE.assetToAsset(_tokenIn, _amountIn, _tokenOut, TWAP_PERIOD),\\n                    swapSlippage\\n                )\\n                : 1;\\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, _minAmountOut);\\n    }\\n\\n    //////////////////// Compound wrapper functions //////////////////////////////\\n    /**\\n     * @dev Compound support ETH as collateral not WETH. So ETH strategy can override\\n     * below functions and handle wrap/unwrap of WETH.\\n     */\\n    function _mint(uint256 _amount) internal virtual {\\n        require(cToken.mint(_amount) == 0, \\\"supply-to-compound-failed\\\");\\n    }\\n\\n    function _redeemUnderlying(uint256 _amount) internal virtual {\\n        if (_amount == MAX_UINT_VALUE) {\\n            // Withdraw all cTokens\\n            require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \\\"withdraw-from-compound-failed\\\");\\n        } else {\\n            // Withdraw underlying\\n            require(cToken.redeemUnderlying(_amount) == 0, \\\"withdraw-from-compound-failed\\\");\\n        }\\n    }\\n\\n    function _borrowCollateral(uint256 _amount) internal virtual {\\n        require(cToken.borrow(_amount) == 0, \\\"borrow-from-compound-failed\\\");\\n    }\\n\\n    function _repayBorrow(uint256 _amount) internal virtual {\\n        require(cToken.repayBorrow(_amount) == 0, \\\"repay-to-compound-failed\\\");\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////\\n\\n    /* solhint-disable no-empty-blocks */\\n\\n    // We overridden _generateReport which eliminates need of below function.\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\\n\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {}\\n\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {}\\n\\n    /* solhint-enable no-empty-blocks */\\n}\\n\",\"keccak256\":\"0x9471d3852fdeedd7f0a82df0055b7f7aa8ed46b314f1e20eaabcea52bbcf25f3\",\"license\":\"GNU LGPLv3\"},\"contracts/strategies/compound/CompoundLeverageStrategyLINK.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./CompoundLeverageStrategy.sol\\\";\\nimport \\\"../../interfaces/token/IToken.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n/// @title Deposit LINK in Compound and also borrow LINK based on leverage condition\\ncontract CompoundLeverageStrategyLINK is CompoundLeverageStrategy {\\n    string public constant NAME = \\\"CompoundLeverageStrategyLINK\\\";\\n    string public constant VERSION = \\\"3.0.22\\\";\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) CompoundLeverageStrategy(_pool, _swapManager, _receiptToken) {}\\n}\\n\",\"keccak256\":\"0x20b269949e068fa30684d782d302a2bacfd8b51577ecef5fe9e514b53f2566a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600080546001600160a01b03191673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2178155610e10600455600555612710600655600a805462ffffff19169055611388600b55611770600c553480156200005e57600080fd5b5060405162005f3338038062005f33833981016040819052620000819162000360565b8282828282826001600160a01b038316620000e35760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001305760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000da565b600380546001600160a01b0319166001600160a01b0384811691909117909155606084901b6001600160601b03191660a05260408051637e062a3560e11b815290519185169163fc0c546a91600480820192602092909190829003018186803b1580156200019d57600080fd5b505afa158015620001b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d89190620003b3565b60601b6001600160601b031916608052600180546001600160a01b0319166001600160a01b038316179055620002256200020f3390565b6007620002ee60201b62001ffb1790919060201c565b620002675760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401620000da565b5050506001600160a01b038116620002c25760405162461bcd60e51b815260206004820152601660248201527f63546f6b656e2d616464726573732d69732d7a65726f000000000000000000006044820152606401620000da565b600d80546001600160a01b0319166001600160a01b039290921691909117905550620003f29350505050565b600062000305836001600160a01b0384166200030e565b90505b92915050565b6000818152600183016020526040812054620003575750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000308565b50600062000308565b60008060006060848603121562000375578283fd5b83516200038281620003d9565b60208501519093506200039581620003d9565b6040850151909250620003a881620003d9565b809150509250925092565b600060208284031215620003c5578081fd5b8151620003d281620003d9565b9392505050565b6001600160a01b0381168114620003ef57600080fd5b50565b60805160601c60a05160601c615a046200052f600039600081816102670152818161056e0152818161068a015281816107060152818161088f01528181610a4201528181610b6c01528181610dd50152818161113701528181611216015281816114760152818161153f015281816117940152818161195d01528181611da101528181612031015281816120e40152818161218301526127670152600081816104520152818161085301528181610b07015281816116e70152818161176b01528181611b350152818161220d015281816123610152818161250901528181612641015281816127450152818161279d0152818161290801528181612aa501528181612b6901528181613045015281816131540152818161318d0152818161323d01528181613a3601528181613ac201526148cb0152615a046000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80639b7166a91161013b578063d3332539116100b8578063f23c47221161007c578063f23c472214610508578063f7c99bea1461051a578063fc0c546a14610523578063fef395d314610534578063ffa1ad741461054757610248565b8063d3332539146104bf578063d4c3eea0146104d2578063e00af4a7146104da578063e645c202146104ed578063ec78e832146104f557610248565b8063b9098e3c116100ff578063b9098e3c14610474578063c415b95c1461047d578063cd2d7ebe14610490578063ce5494bb14610499578063d2c35ce8146104ac57610248565b80639b7166a9146103dc578063a3f4df7e146103e9578063a923b2a614610432578063aa10188614610445578063b2016bd41461044d57610248565b80635abda028116101c95780638b4187131161018d5780638b41871314610391578063920f5c84146103a457806392986024146103b7578063951dc22c146103bf57806399b71d5c146103d457610248565b80635abda0281461033e57806367f5e4b814610346578063709d039d146103595780637398ab181461036c5780637d7c2a1c1461038957610248565b80634032b72b116102105780634032b72b146102d957806342189c8f146102ec578063440d7248146102f55780634c36fad714610318578063599e892a1461032b57610248565b806314ae9f2e1461024d57806316f0115b146102625780631aedeabe146102a65780632a049a21146102bd5780632e1a7d4d146102c6575b600080fd5b61026061025b366004614e9a565b61056c565b005b6102897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6102af60065481565b60405190815260200161029d565b6102af600c5481565b6102606102d436600461533d565b610687565b6102606102e7366004614e9a565b610704565b6102af60045481565b610308610303366004614e9a565b610810565b604051901515815260200161029d565b610260610326366004614e9a565b61088d565b6102606103393660046151dd565b610a40565b6102af610b2b565b61026061035436600461533d565b610b6a565b600354610289906001600160a01b031681565b610374610cb6565b6040805192835260208301919091520161029d565b610260610d6b565b61026061039f366004614ed2565b610e3e565b6103086103b2366004614f9e565b610f02565b61030861111f565b6103c76111c7565b60405161029d919061560c565b6102606111d8565b600a546103089060ff1681565b6104256040518060400160405280601c81526020017f436f6d706f756e644c6576657261676553747261746567794c494e4b0000000081525081565b60405161029d9190615771565b61026061044036600461539c565b611214565b610260611449565b6102897f000000000000000000000000000000000000000000000000000000000000000081565b6102af600b5481565b600254610289906001600160a01b031681565b6102af60055481565b6102606104a7366004614e9a565b611473565b6102606104ba366004614e9a565b611792565b6102606104cd3660046151dd565b61195b565b6102af611a2f565b6102606104e8366004614e9a565b611abe565b6102af611cdd565b600154610289906001600160a01b031681565b600a5461030890610100900460ff1681565b6102af60095481565b6001546001600160a01b0316610289565b61026061054236600461539c565b611d9f565b6104256040518060400160405280600681526020016519971817191960d11b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd9190614eb6565b6001600160a01b0316336001600160a01b0316146106365760405162461bcd60e51b815260040161062d906157b4565b60405180910390fd5b610641600782612017565b6106845760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161062d565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106fb5760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161062d565b6106848161202c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107959190614eb6565b6001600160a01b0316336001600160a01b0316146107c55760405162461bcd60e51b815260040161062d906157b4565b6107d0600782611ffb565b6106845760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161062d565b600d546000906001600160a01b038381169116148061084b57506001600160a01b03821673c00e94cb662c3520282e6f5717214004a7f26888145b8061088757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190614eb6565b6001600160a01b0316336001600160a01b03161461094e5760405162461bcd60e51b815260040161062d906157b4565b6001600160a01b0381166109995760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640161062d565b6003546001600160a01b03828116911614156109e45760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b604482015260640161062d565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9957600080fd5b505afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190614eb6565b6001600160a01b0316336001600160a01b031614610b015760405162461bcd60e51b815260040161062d906157b4565b610684817f0000000000000000000000000000000000000000000000000000000000000000612059565b6000806000610b38610cb6565b9150915080600014610b605781610b51612710836158dc565b610b5b91906158bc565b610b63565b60005b9250505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb9190614eb6565b6001600160a01b0316336001600160a01b031614610c2b5760405162461bcd60e51b815260040161062d906157b4565b612710811115610c765760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161062d565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b600d546040516361bfb47160e11b815230600482015260009182918291829182916001600160a01b03169063c37f68e29060240160806040518083038186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a91906153bd565b93509350935050670de0b6b3a76400008184610d5691906158dc565b610d6091906158bc565b959194509092505050565b610d78335b60079061209c565b610d945760405162461bcd60e51b815260040161062d90615784565b6000806000610da16120be565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610e1957600080fd5b505af1158015610e2d573d6000803e3d6000fd5b50505050610e396124f1565b505050565b60008082806020019051810190610e5591906152c0565b909250905033731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e14610ea55760405162461bcd60e51b815260206004820152600560248201526421736f6c6f60d81b604482015260640161062d565b6001600160a01b0385163014610ef15760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b216b4b734ba34b0ba37b960791b604482015260640161062d565b610efb8282612605565b5050505050565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190614eb6565b6001600160a01b0316336001600160a01b031614610fd65760405162461bcd60e51b815260206004820152600a6024820152690858585d994b5c1bdbdb60b21b604482015260640161062d565b600a5462010000900460ff166110235760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b216b33630b9b416b637b0b760711b604482015260640161062d565b6001600160a01b038416301461106f5760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b216b4b734ba34b0ba37b960791b604482015260640161062d565b60008686600081811061109257634e487b7160e01b600052603260045260246000fd5b90506020020135898960008181106110ba57634e487b7160e01b600052603260045260246000fd5b905060200201356110cb91906158a4565b905061110e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612605915050565b5060019a9950505050505050505050565b604051639f2b283360e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f2b28339060240160206040518083038186803b15801561118157600080fd5b505afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190615355565b6111c1611cdd565b10905090565b60606111d3600761272b565b905090565b6111e133610d70565b6111fd5760405162461bcd60e51b815260040161062d90615784565b6112076000612738565b611212600019612738565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561126d57600080fd5b505afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190614eb6565b6001600160a01b0316336001600160a01b0316146112d55760405162461bcd60e51b815260040161062d906157b4565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561132357600080fd5b505afa158015611337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135b9190615355565b81106113a05760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b604482015260640161062d565b816113ab5760045491505b603b82116113f35760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b604482015260640161062d565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b61145233610d70565b61146e5760405162461bcd60e51b815260040161062d90615784565b611212565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114e75760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161062d565b6001600160a01b03811661153d5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161062d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a057600080fd5b505afa1580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d89190614eb6565b6001600160a01b0316146116275760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161062d565b6116308161292d565b6001546040516370a0823160e01b81523060048201526116c49183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561167957600080fd5b505afa15801561168d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b19190615355565b6001546001600160a01b03169190612a05565b6040516370a0823160e01b81523060048201526106849082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561172957600080fd5b505afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190615355565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612a05565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156117eb57600080fd5b505afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118239190614eb6565b6001600160a01b0316336001600160a01b0316146118535760405162461bcd60e51b815260040161062d906157b4565b6001600160a01b0381166118a95760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161062d565b6002546001600160a01b03828116911614156118ff5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161062d565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156119b457600080fd5b505afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190614eb6565b6001600160a01b0316336001600160a01b031614611a1c5760405162461bcd60e51b815260040161062d906157b4565b600a805460ff1916821515179055610684565b60405163331faf7160e21b81523060048201526000906111d390733d9819210a31b4961b30ef54be2aed79b9c9cd3b9063cc7ebdc4906024015b60206040518083038186803b158015611a8157600080fd5b505afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab99190615355565b612a68565b611ac733610d70565b611ae35760405162461bcd60e51b815260040161062d90615784565b6002546001600160a01b0316611b335760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161062d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611bb55760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161062d565b611bbe81610810565b15611c025760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161062d565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611c4257600254611c3d906001600160a01b031647612c0a565b610684565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc9190615355565b600254909150611cd9906001600160a01b03848116911683612a05565b5050565b600d546040805163bd6d894d60e01b815290516000926001600160a01b03169163bd6d894d91600480830192602092919082900301818787803b158015611d2357600080fd5b505af1158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b9190615355565b50611d64612d23565b6040516370a0823160e01b81523060048201526111d39073c00e94cb662c3520282e6f5717214004a7f26888906370a0823190602401611a69565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611df857600080fd5b505afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190614eb6565b6001600160a01b0316336001600160a01b031614611e605760405162461bcd60e51b815260040161062d906157b4565b600d54604051638e8f294b60e01b81526001600160a01b039091166004820152600090733d9819210a31b4961b30ef54be2aed79b9c9cd3b90638e8f294b9060240160606040518083038186803b158015611eba57600080fd5b505afa158015611ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef29190615215565b509150611f079050655af3107a4000826158bc565b8210611f555760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642d6d61782d626f72726f772d6c696d69740000000000000000604482015260640161062d565b828211611fa45760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e000000604482015260640161062d565b600b54600c546040805192835260208301869052820152606081018390527f0e68fa4c4a80a75427bcce81b711855825bd765ea0e6e15e330653b2437db78e9060800160405180910390a150600b91909155600c55565b6000612010836001600160a01b038416612df1565b9392505050565b6000612010836001600160a01b038416612e40565b6106847f000000000000000000000000000000000000000000000000000000000000000061176183612f5d565b81156120815761207d731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e826132d5565b6009555b50600a80549115156101000261ff0019909216919091179055565b6001600160a01b03811660009081526001830160205260408120541515612010565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561212657600080fd5b505afa15801561213a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215e9190615355565b60405163228bfd9f60e01b815230600482015290915060009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063228bfd9f906024016101006040518083038186803b1580156121c657600080fd5b505afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190615257565b975050509550505050506122317f0000000000000000000000000000000000000000000000000000000000000000613456565b600d54604051633af9e66960e01b81523060048201526000916001600160a01b031690633af9e66990602401602060405180830381600087803b15801561227757600080fd5b505af115801561228b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122af9190615355565b600d546040516395dd919360e01b81523060048201529192506000916001600160a01b03909116906395dd91939060240160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190615355565b9050600061233e82846158fb565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156123a357600080fd5b505afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db9190615355565b905060006123e982846158a4565b9050600087821115612443576123ff88836158fb565b9b508b831161241957612412838d6158fb565b905061243e565b612423898d6158a4565b83106124315788995061243e565b61243b8c846158fb565b99505b612450565b61244d82896158fb565b9a505b600061245c8b8b6158fb565b9050600061246a83836158a4565b905080156124a057600061247d82612f5d565b90508381111561249e5761249184826158fb565b61249b908e6158a4565b9c505b505b6124a8610cb6565b9098509650881580156124ba57508715155b80156124c4575086155b156124e1576124d460001961350a565b6124de888f6158a4565b9d505b5050505050505050505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561255357600080fd5b505afa158015612567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258b9190615355565b905060008061259b83600161371f565b915091506125a883613914565b6125b282826139df565b6125bc90836158fb565b915060005b6000831180156125d2575060068111155b156125ff576125e18383613af2565b6125eb90846158fb565b9250806125f78161593e565b9150506125c1565b50505050565b6000808380602001905181019061261c919061536d565b6040516370a0823160e01b815230600482015291935091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561268357600080fd5b505afa158015612697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bb9190615355565b9050828110156126fc5760405162461bcd60e51b815260206004820152600c60248201526b11931054d217d1905253115160a21b604482015260640161062d565b81156127195761270b83613be7565b6127148461350a565b610efb565b61272281613914565b610efb84613cb2565b6060600061201083613d7d565b61278c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613dd9565b600d546127c6906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613dd9565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561281757600080fd5b505afa15801561282b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284f9190615355565b81101561290257600354604051636e74a6f760e01b8152600481018390526128f0916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190614eb6565b73c00e94cb662c3520282e6f5717214004a7f268889084613dd9565b806128fa8161593e565b9150506127c9565b506106847f000000000000000000000000000000000000000000000000000000000000000082613efd565b600d5460408051637e062a3560e11b815290516001600160a01b039283169284169163fc0c546a916004808301926020929190829003018186803b15801561297457600080fd5b505afa158015612988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ac9190614eb6565b6001600160a01b0316146129f85760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b604482015260640161062d565b6000600b556106846124f1565b6040516001600160a01b038316602482015260448101829052610e3990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613fbe565b6000808215612b3857600354604051631d1f307960e31b815273c00e94cb662c3520282e6f5717214004a7f2688860048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018690529091169063e8f983c89060640160006040518083038186803b158015612af757600080fd5b505afa158015612b0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b33919081019061509b565b509150505b600080612b43610cb6565b6040516370a0823160e01b81523060048201529193509150819083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612bab57600080fd5b505afa158015612bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be39190615355565b612bed90866158a4565b612bf791906158a4565b612c0191906158fb565b95945050505050565b80471015612c5a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161062d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ca7576040519150601f19603f3d011682016040523d82523d6000602084013e612cac565b606091505b5050905080610e395760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161062d565b604080516001808252818301909252600091602080830190803683375050600d5482519293506001600160a01b031691839150600090612d7357634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405162e1ed9760e51b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90631c3db2e090612dc3903090859060040161556a565b600060405180830381600087803b158015612ddd57600080fd5b505af1158015610efb573d6000803e3d6000fd5b6000818152600183016020526040812054612e3857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610887565b506000610887565b60008181526001830160205260408120548015612f53576000612e646001836158fb565b8554909150600090612e78906001906158fb565b9050818114612ef9576000866000018281548110612ea657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612ed757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612f1857634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610887565b6000915050610887565b6000806000612f6d84600061371f565b91509150801561302d57612f8182826139df565b612f8b90836158fb565b915060005b600083118015612fa15750600a8111155b15612fcf57612fb1836001613af2565b612fbb90846158fb565b925080612fc78161593e565b915050612f90565b821561302b57600080612fe0610cb6565b915091506000600c5460001461300c57600c54612fff612710846158dc565b61300991906158bc565b90505b600061301882856158fb565b905080891115613026578098505b505050505b505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561308f57600080fd5b505afa1580156130a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c79190615355565b600d54604051633af9e66960e01b81523060048201529192506001600160a01b031690633af9e66990602401602060405180830381600087803b15801561310d57600080fd5b505af1158015613121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131459190615355565b85111561321c575060006131787f0000000000000000000000000000000000000000000000000000000000000000613456565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156131d757600080fd5b505afa1580156131eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320f9190615355565b61321990866158fb565b94505b6132258561350a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561328757600080fd5b505afa15801561329b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132bf9190615355565b90506132cb82826158fb565b9695505050505050565b6000808390506000816001600160a01b031663295c39a56040518163ffffffff1660e01b815260040160206040518083038186803b15801561331657600080fd5b505afa15801561332a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334e9190615355565b90506000805b8281101561340d5760405163062bd3e960e01b8152600481018290526001600160a01b0385169063062bd3e99060240160206040518083038186803b15801561339c57600080fd5b505afa1580156133b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d49190614eb6565b9150856001600160a01b0316826001600160a01b031614156133fb57935061088792505050565b806134058161593e565b915050613354565b5060405162461bcd60e51b815260206004820152601b60248201527f6e6f2d6d61726b657449642d666f756e642d666f722d746f6b656e0000000000604482015260640161062d565b61345e612d23565b6040516370a0823160e01b815230600482015260009073c00e94cb662c3520282e6f5717214004a7f26888906370a082319060240160206040518083038186803b1580156134ab57600080fd5b505afa1580156134bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e39190615355565b90508015611cd957611cd973c00e94cb662c3520282e6f5717214004a7f268888383614090565b60001981141561365457600d546040516370a0823160e01b81523060048201526001600160a01b039091169063db006a759082906370a082319060240160206040518083038186803b15801561355f57600080fd5b505afa158015613573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135979190615355565b6040518263ffffffff1660e01b81526004016135b591815260200190565b602060405180830381600087803b1580156135cf57600080fd5b505af11580156135e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136079190615355565b15611c3d5760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c6564000000604482015260640161062d565b600d5460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e390602401602060405180830381600087803b15801561369a57600080fd5b505af11580156136ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d29190615355565b156106845760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c6564000000604482015260640161062d565b600d54604051633af9e66960e01b8152306004820152600091829182916001600160a01b031690633af9e66990602401602060405180830381600087803b15801561376957600080fd5b505af115801561377d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a19190615355565b600d546040516395dd919360e01b81523060048201529192506000916001600160a01b03909116906395dd91939060240160206040518083038186803b1580156137ea57600080fd5b505afa1580156137fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138229190615355565b9050600b546000141561383c5792506001915061390d9050565b600061384882846158fb565b905060008661386e5787821161385f576000613869565b61386988836158fb565b613878565b61387888836158a4565b90506000600c5461271061388c91906158fb565b600c5461389990846158dc565b6138a391906158bc565b90506000600b546127106138b791906158fb565b600b546138c490856158dc565b6138ce91906158bc565b9050818511156138ed57600196506138e681866158fb565b9750613906565b80851015613906576000965061390385826158fb565b97505b5050505050505b9250929050565b600d5460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561395a57600080fd5b505af115801561396e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139929190615355565b156106845760405162461bcd60e51b815260206004820152601960248201527f737570706c792d746f2d636f6d706f756e642d6661696c656400000000000000604482015260640161062d565b600a546000908190610100900460ff1680156139fb5750600084115b15613a6c5760008484604051602001613a209291909182521515602082015260400190565b6040516020818303038152906040529050613a5c7f00000000000000000000000000000000000000000000000000000000000000008683614161565b9150613a6882866158fb565b9450505b600a5460ff168015613a7b5750825b8015613a875750600084115b156120105760008484604051602001613aac9291909182521515602082015260400190565b6040516020818303038152906040529050613ae87f0000000000000000000000000000000000000000000000000000000000000000868361446a565b612c0190836158a4565b6000806000613aff610cb6565b91509150806000148015613b105750835b15613b2057600092505050610887565b600d54604051638e8f294b60e01b81526001600160a01b039091166004820152600090733d9819210a31b4961b30ef54be2aed79b9c9cd3b90638e8f294b9060240160606040518083038186803b158015613b7a57600080fd5b505afa158015613b8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb29190615215565b509150508415613bcf57613bc88684848461480a565b9350613bde565b613bdb86848484614870565b93505b50505092915050565b600d5460405163073a938160e11b8152600481018390526001600160a01b0390911690630e75270290602401602060405180830381600087803b158015613c2d57600080fd5b505af1158015613c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c659190615355565b156106845760405162461bcd60e51b815260206004820152601860248201527f72657061792d746f2d636f6d706f756e642d6661696c65640000000000000000604482015260640161062d565b600d5460405163317afabb60e21b8152600481018390526001600160a01b039091169063c5ebeaec90602401602060405180830381600087803b158015613cf857600080fd5b505af1158015613d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d309190615355565b156106845760405162461bcd60e51b815260206004820152601b60248201527f626f72726f772d66726f6d2d636f6d706f756e642d6661696c65640000000000604482015260640161062d565b606081600001805480602002602001604051908101604052809291908181526020018280548015613dcd57602002820191906000526020600020905b815481526020019060010190808311613db9575b50505050509050919050565b801580613e625750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613e2857600080fd5b505afa158015613e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e609190615355565b155b613ecd5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161062d565b6040516001600160a01b038316602482015260448101829052610e3990849063095ea7b360e01b90606401612a31565b613f256001600160a01b038316731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e83613dd9565b611cd973b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613f7557600080fd5b505afa158015613f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fad9190614eb6565b6001600160a01b0384169083613dd9565b6000614013826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149529092919063ffffffff16565b805190915015610e39578080602001905181019061403191906151f9565b610e395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161062d565b600060065461271014156140a5576001614153565b6040516358fac00360e01b81526001600160a01b0380861660048301526024820184905284166044820152610e10606482015261415390730f1f5a87f99f0918e6c81f16e59f3518698221ff906358fac0039060840160206040518083038186803b15801561411357600080fd5b505afa158015614127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061414b9190615355565b600654614969565b90506125ff8484848461498c565b600a54600090610100900460ff166141bb5760405162461bcd60e51b815260206004820152601d60248201527f647964782d666c6173682d6c6f616e2d69732d6e6f742d616374697665000000604482015260640161062d565b6040516370a0823160e01b8152731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e60048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561421157600080fd5b505afa158015614225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142499190615355565b905080841115614257578093505b60006142648560026158a4565b90506000848260405160200161427b92919061574f565b60408051808303601f19018152600380845260808401909252925060009190816020015b6142a7614de1565b81526020019060019003908161429f5790505090506142c860095488614b4d565b816000815181106142e957634e487b7160e01b600052603260045260246000fd5b60200260200101819052506142fd82614bd7565b8160018151811061431e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525061433560095484614c45565b8160028151811061435657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161437857505060408051808201825260008082526020918201528151808301909252308252600190820152909150816000815181106143e757634e487b7160e01b600052603260045260246000fd5b602090810291909101015260405163a67a6a4560e01b8152731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e9063a67a6a459061442b908490869060040161561f565b600060405180830381600087803b15801561444557600080fd5b505af1158015614459573d6000803e3d6000fd5b50999b9a5050505050505050505050565b600a5460009060ff166144bf5760405162461bcd60e51b815260206004820152601d60248201527f616176652d666c6173682d6c6f616e2d69732d6e6f742d616374697665000000604482015260640161062d565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561450e57600080fd5b505afa158015614522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145469190614eb6565b6040516321f8a72160e01b8152600160f81b600482015290915060009073b53c1a33016b2dc2ff3653530bff1848a515c8c5906321f8a7219060240160206040518083038186803b15801561459a57600080fd5b505afa1580156145ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d29190614eb6565b6040516335ea6a7560e01b81526001600160a01b0388811660048301529192506000918316906335ea6a75906024016101406040518083038186803b15801561461a57600080fd5b505afa15801561462e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061465291906153f2565b505050505050505050905080861115614669578095505b6040805160018082528183019092526000916020808301908036833701905050905087816000815181106146ad57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050878160008151811061470c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061475e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001600a60026101000a81548160ff021916908315150217905550856001600160a01b031663ab9c4b5d30858585308e60006040518863ffffffff1660e01b81526004016147be979695949392919061558e565b600060405180830381600087803b1580156147d857600080fd5b505af11580156147ec573d6000803e3d6000fd5b5050600a805462ff00001916905550989a9950505050505050505050565b6000808215614833578261482685670de0b6b3a76400006158dc565b61483091906158bc565b90505b61483d81866158fb565b915083821061484a578391505b858210614855578591505b61485e8261350a565b61486782613be7565b50949350505050565b600080670de0b6b3a764000061488684876158dc565b61489091906158bc565b905061489c84826158fb565b91508582106148a9578591505b6148b282613cb2565b6040516370a0823160e01b8152306004820152614867907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561491557600080fd5b505afa158015614929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061494d9190615355565b613914565b60606149618484600085614c80565b949350505050565b600061271061497883826158fb565b61498290856158dc565b61201091906158bc565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b1580156149e757600080fd5b505afa1580156149fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614a23919081019061509b565b9250925092508360001415614a3757600193505b8115614b4457600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b158015614a8157600080fd5b505afa158015614a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab99190614eb6565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401614aec9594939291906157eb565b600060405180830381600087803b158015614b0657600080fd5b505af1158015614b1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614b42919081019061514a565b505b50505050505050565b614b55614de1565b604080516101008101825260018152600060208083018290528351608081018552828152929384019291908201905b81526020016000815260200185815250815260200184815260200160008152602001306001600160a01b031681526020016000815260200160405180602001604052806000815250815250905092915050565b614bdf614de1565b6040805161010081018252600881526000602080830182905283516080810185528281529293840192919082019081526020016000815260006020918201819052918352820181905260408201819052306060830152608082015260a001929092525090565b614c4d614de1565b60408051610100810182526000808252602080830182905283516080810185526001815292938401929190820190614b84565b606082471015614ce15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161062d565b843b614d2f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062d565b600080866001600160a01b03168587604051614d4b919061554e565b60006040518083038185875af1925050503d8060008114614d88576040519150601f19603f3d011682016040523d82523d6000602084013e614d8d565b606091505b5091509150614d9d828286614da8565b979650505050505050565b60608315614db7575081612010565b825115614dc75782518084602001fd5b8160405162461bcd60e51b815260040161062d9190615771565b604080516101008101825260008082526020820152908101614e25604080516080810190915260008082526020820190815260200160008152602001600081525090565b8152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001606081525090565b60008083601f840112614e68578182fd5b50813567ffffffffffffffff811115614e7f578182fd5b6020830191508360208260051b850101111561390d57600080fd5b600060208284031215614eab578081fd5b8135612010816159ab565b600060208284031215614ec7578081fd5b8151612010816159ab565b60008060008385036080811215614ee7578283fd5b8435614ef2816159ab565b935060206040601f1983011215614f07578384fd5b614f116040615827565b915080860135614f20816159ab565b825260408601358183015290925060608501359067ffffffffffffffff821115614f48578283fd5b818601915086601f830112614f5b578283fd5b8135614f6e614f698261587c565b615827565b8181528883838601011115614f81578485fd5b818385018483013784838383010152809450505050509250925092565b600080600080600080600080600060a08a8c031215614fbb578485fd5b893567ffffffffffffffff80821115614fd2578687fd5b614fde8d838e01614e57565b909b50995060208c0135915080821115614ff6578687fd5b6150028d838e01614e57565b909950975060408c013591508082111561501a578687fd5b6150268d838e01614e57565b909750955060608c0135915061503b826159ab565b90935060808b01359080821115615050578384fd5b818c0191508c601f830112615063578384fd5b813581811115615071578485fd5b8d6020828501011115615082578485fd5b6020830194508093505050509295985092959850929598565b6000806000606084860312156150af578283fd5b835167ffffffffffffffff8111156150c5578384fd5b8401601f810186136150d5578384fd5b805160206150e5614f6983615858565b8083825282820191508285018a848660051b8801011115615104578889fd5b8895505b8486101561512f57805161511b816159ab565b835260019590950194918301918301615108565b50918801516040909801519199979850909695505050505050565b6000602080838503121561515c578182fd5b825167ffffffffffffffff811115615172578283fd5b8301601f81018513615182578283fd5b8051615190614f6982615858565b80828252848201915084840188868560051b87010111156151af578687fd5b8694505b838510156151d15780518352600194909401939185019185016151b3565b50979650505050505050565b6000602082840312156151ee578081fd5b8135612010816159c0565b60006020828403121561520a578081fd5b8151612010816159c0565b600080600060608486031215615229578081fd5b8351615234816159c0565b60208501516040860151919450925061524c816159c0565b809150509250925092565b600080600080600080600080610100898b031215615273578182fd5b885161527e816159c0565b809850506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600080604083850312156152d2578182fd5b825167ffffffffffffffff8111156152e8578283fd5b8301601f810185136152f8578283fd5b8051615306614f698261587c565b81815286602083850101111561531a578485fd5b61532b826020830160208601615912565b60209590950151949694955050505050565b60006020828403121561534e578081fd5b5035919050565b600060208284031215615366578081fd5b5051919050565b6000806040838503121561537f578182fd5b825191506020830151615391816159c0565b809150509250929050565b600080604083850312156153ae578182fd5b50508035926020909101359150565b600080600080608085870312156153d2578182fd5b505082516020840151604085015160609095015191969095509092509050565b6000806000806000806000806000806101408b8d031215615411578384fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015164ffffffffff81168114615466578182fd5b809150509295989b9194979a5092959850565b6000815180845260208085019450808401835b838110156154b15781516001600160a01b03168752958201959082019060010161548c565b509495945050505050565b6000815180845260208085019450808401835b838110156154b1578151875295820195908201906001016154cf565b60008151808452615503816020860160208601615912565b601f01601f19169290920160200192915050565b805115158252602081015161552b8161599b565b6020830152604081015161553e8161599b565b6040830152606090810151910152565b60008251615560818460208701615912565b9190910192915050565b6001600160a01b038316815260406020820181905260009061496190830184615479565b600060018060a01b03808a16835260e060208401526155b060e084018a615479565b83810360408501526155c2818a6154bc565b905083810360608501526155d681896154bc565b9050818716608085015283810360a08501526155f281876154eb565b9250505061ffff831660c083015298975050505050505050565b6000602082526120106020830184615479565b6040808252835182820181905260009190606090818501906020808901865b8381101561566c57815180516001600160a01b0316865283015183860152938601939082019060010161563e565b50508683038188015287518084528184019250600581901b84018201898301885b8381101561573e57601f1987840301865281516101608151600981106156b5576156b561596f565b855281870151878601528a8201516156cf8c870182615517565b508982015160c081818801526080840151915060e0828189015260a085015192506157066101008901846001600160a01b03169052565b90840151610120880152909201516101408601829052915061572a818601836154eb565b97870197945050509084019060010161568d565b50909b9a5050505050505050505050565b60006040825261576260408301856154eb565b90508260208301529392505050565b60006020825261201060208301846154eb565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a0604083015261580a60a0830186615479565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561585057615850615985565b604052919050565b600067ffffffffffffffff82111561587257615872615985565b5060051b60200190565b600067ffffffffffffffff82111561589657615896615985565b50601f01601f191660200190565b600082198211156158b7576158b7615959565b500190565b6000826158d757634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156158f6576158f6615959565b500290565b60008282101561590d5761590d615959565b500390565b60005b8381101561592d578181015183820152602001615915565b838111156125ff5750506000910152565b600060001982141561595257615952615959565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600281106106845761068461596f565b6001600160a01b038116811461068457600080fd5b801515811461068457600080fdfea264697066735822122076362b47c7457590a1607a6b0d6497904fa419e840373d6fd691878d3ee9912a64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c80639b7166a91161013b578063d3332539116100b8578063f23c47221161007c578063f23c472214610508578063f7c99bea1461051a578063fc0c546a14610523578063fef395d314610534578063ffa1ad741461054757610248565b8063d3332539146104bf578063d4c3eea0146104d2578063e00af4a7146104da578063e645c202146104ed578063ec78e832146104f557610248565b8063b9098e3c116100ff578063b9098e3c14610474578063c415b95c1461047d578063cd2d7ebe14610490578063ce5494bb14610499578063d2c35ce8146104ac57610248565b80639b7166a9146103dc578063a3f4df7e146103e9578063a923b2a614610432578063aa10188614610445578063b2016bd41461044d57610248565b80635abda028116101c95780638b4187131161018d5780638b41871314610391578063920f5c84146103a457806392986024146103b7578063951dc22c146103bf57806399b71d5c146103d457610248565b80635abda0281461033e57806367f5e4b814610346578063709d039d146103595780637398ab181461036c5780637d7c2a1c1461038957610248565b80634032b72b116102105780634032b72b146102d957806342189c8f146102ec578063440d7248146102f55780634c36fad714610318578063599e892a1461032b57610248565b806314ae9f2e1461024d57806316f0115b146102625780631aedeabe146102a65780632a049a21146102bd5780632e1a7d4d146102c6575b600080fd5b61026061025b366004614e9a565b61056c565b005b6102897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6102af60065481565b60405190815260200161029d565b6102af600c5481565b6102606102d436600461533d565b610687565b6102606102e7366004614e9a565b610704565b6102af60045481565b610308610303366004614e9a565b610810565b604051901515815260200161029d565b610260610326366004614e9a565b61088d565b6102606103393660046151dd565b610a40565b6102af610b2b565b61026061035436600461533d565b610b6a565b600354610289906001600160a01b031681565b610374610cb6565b6040805192835260208301919091520161029d565b610260610d6b565b61026061039f366004614ed2565b610e3e565b6103086103b2366004614f9e565b610f02565b61030861111f565b6103c76111c7565b60405161029d919061560c565b6102606111d8565b600a546103089060ff1681565b6104256040518060400160405280601c81526020017f436f6d706f756e644c6576657261676553747261746567794c494e4b0000000081525081565b60405161029d9190615771565b61026061044036600461539c565b611214565b610260611449565b6102897f000000000000000000000000000000000000000000000000000000000000000081565b6102af600b5481565b600254610289906001600160a01b031681565b6102af60055481565b6102606104a7366004614e9a565b611473565b6102606104ba366004614e9a565b611792565b6102606104cd3660046151dd565b61195b565b6102af611a2f565b6102606104e8366004614e9a565b611abe565b6102af611cdd565b600154610289906001600160a01b031681565b600a5461030890610100900460ff1681565b6102af60095481565b6001546001600160a01b0316610289565b61026061054236600461539c565b611d9f565b6104256040518060400160405280600681526020016519971817191960d11b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd9190614eb6565b6001600160a01b0316336001600160a01b0316146106365760405162461bcd60e51b815260040161062d906157b4565b60405180910390fd5b610641600782612017565b6106845760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161062d565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106fb5760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161062d565b6106848161202c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107959190614eb6565b6001600160a01b0316336001600160a01b0316146107c55760405162461bcd60e51b815260040161062d906157b4565b6107d0600782611ffb565b6106845760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161062d565b600d546000906001600160a01b038381169116148061084b57506001600160a01b03821673c00e94cb662c3520282e6f5717214004a7f26888145b8061088757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190614eb6565b6001600160a01b0316336001600160a01b03161461094e5760405162461bcd60e51b815260040161062d906157b4565b6001600160a01b0381166109995760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640161062d565b6003546001600160a01b03828116911614156109e45760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b604482015260640161062d565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9957600080fd5b505afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190614eb6565b6001600160a01b0316336001600160a01b031614610b015760405162461bcd60e51b815260040161062d906157b4565b610684817f0000000000000000000000000000000000000000000000000000000000000000612059565b6000806000610b38610cb6565b9150915080600014610b605781610b51612710836158dc565b610b5b91906158bc565b610b63565b60005b9250505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb9190614eb6565b6001600160a01b0316336001600160a01b031614610c2b5760405162461bcd60e51b815260040161062d906157b4565b612710811115610c765760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161062d565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b600d546040516361bfb47160e11b815230600482015260009182918291829182916001600160a01b03169063c37f68e29060240160806040518083038186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a91906153bd565b93509350935050670de0b6b3a76400008184610d5691906158dc565b610d6091906158bc565b959194509092505050565b610d78335b60079061209c565b610d945760405162461bcd60e51b815260040161062d90615784565b6000806000610da16120be565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610e1957600080fd5b505af1158015610e2d573d6000803e3d6000fd5b50505050610e396124f1565b505050565b60008082806020019051810190610e5591906152c0565b909250905033731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e14610ea55760405162461bcd60e51b815260206004820152600560248201526421736f6c6f60d81b604482015260640161062d565b6001600160a01b0385163014610ef15760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b216b4b734ba34b0ba37b960791b604482015260640161062d565b610efb8282612605565b5050505050565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5157600080fd5b505afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190614eb6565b6001600160a01b0316336001600160a01b031614610fd65760405162461bcd60e51b815260206004820152600a6024820152690858585d994b5c1bdbdb60b21b604482015260640161062d565b600a5462010000900460ff166110235760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b216b33630b9b416b637b0b760711b604482015260640161062d565b6001600160a01b038416301461106f5760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b216b4b734ba34b0ba37b960791b604482015260640161062d565b60008686600081811061109257634e487b7160e01b600052603260045260246000fd5b90506020020135898960008181106110ba57634e487b7160e01b600052603260045260246000fd5b905060200201356110cb91906158a4565b905061110e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612605915050565b5060019a9950505050505050505050565b604051639f2b283360e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f2b28339060240160206040518083038186803b15801561118157600080fd5b505afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190615355565b6111c1611cdd565b10905090565b60606111d3600761272b565b905090565b6111e133610d70565b6111fd5760405162461bcd60e51b815260040161062d90615784565b6112076000612738565b611212600019612738565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561126d57600080fd5b505afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190614eb6565b6001600160a01b0316336001600160a01b0316146112d55760405162461bcd60e51b815260040161062d906157b4565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561132357600080fd5b505afa158015611337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135b9190615355565b81106113a05760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b604482015260640161062d565b816113ab5760045491505b603b82116113f35760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b604482015260640161062d565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b61145233610d70565b61146e5760405162461bcd60e51b815260040161062d90615784565b611212565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114e75760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604482015260640161062d565b6001600160a01b03811661153d5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161062d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a057600080fd5b505afa1580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d89190614eb6565b6001600160a01b0316146116275760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161062d565b6116308161292d565b6001546040516370a0823160e01b81523060048201526116c49183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561167957600080fd5b505afa15801561168d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b19190615355565b6001546001600160a01b03169190612a05565b6040516370a0823160e01b81523060048201526106849082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561172957600080fd5b505afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190615355565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612a05565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156117eb57600080fd5b505afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118239190614eb6565b6001600160a01b0316336001600160a01b0316146118535760405162461bcd60e51b815260040161062d906157b4565b6001600160a01b0381166118a95760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161062d565b6002546001600160a01b03828116911614156118ff5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161062d565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156119b457600080fd5b505afa1580156119c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ec9190614eb6565b6001600160a01b0316336001600160a01b031614611a1c5760405162461bcd60e51b815260040161062d906157b4565b600a805460ff1916821515179055610684565b60405163331faf7160e21b81523060048201526000906111d390733d9819210a31b4961b30ef54be2aed79b9c9cd3b9063cc7ebdc4906024015b60206040518083038186803b158015611a8157600080fd5b505afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab99190615355565b612a68565b611ac733610d70565b611ae35760405162461bcd60e51b815260040161062d90615784565b6002546001600160a01b0316611b335760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161062d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611bb55760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161062d565b611bbe81610810565b15611c025760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161062d565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611c4257600254611c3d906001600160a01b031647612c0a565b610684565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611c8457600080fd5b505afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc9190615355565b600254909150611cd9906001600160a01b03848116911683612a05565b5050565b600d546040805163bd6d894d60e01b815290516000926001600160a01b03169163bd6d894d91600480830192602092919082900301818787803b158015611d2357600080fd5b505af1158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b9190615355565b50611d64612d23565b6040516370a0823160e01b81523060048201526111d39073c00e94cb662c3520282e6f5717214004a7f26888906370a0823190602401611a69565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611df857600080fd5b505afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190614eb6565b6001600160a01b0316336001600160a01b031614611e605760405162461bcd60e51b815260040161062d906157b4565b600d54604051638e8f294b60e01b81526001600160a01b039091166004820152600090733d9819210a31b4961b30ef54be2aed79b9c9cd3b90638e8f294b9060240160606040518083038186803b158015611eba57600080fd5b505afa158015611ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef29190615215565b509150611f079050655af3107a4000826158bc565b8210611f555760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642d6d61782d626f72726f772d6c696d69740000000000000000604482015260640161062d565b828211611fa45760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e000000604482015260640161062d565b600b54600c546040805192835260208301869052820152606081018390527f0e68fa4c4a80a75427bcce81b711855825bd765ea0e6e15e330653b2437db78e9060800160405180910390a150600b91909155600c55565b6000612010836001600160a01b038416612df1565b9392505050565b6000612010836001600160a01b038416612e40565b6106847f000000000000000000000000000000000000000000000000000000000000000061176183612f5d565b81156120815761207d731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e826132d5565b6009555b50600a80549115156101000261ff0019909216919091179055565b6001600160a01b03811660009081526001830160205260408120541515612010565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561212657600080fd5b505afa15801561213a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215e9190615355565b60405163228bfd9f60e01b815230600482015290915060009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063228bfd9f906024016101006040518083038186803b1580156121c657600080fd5b505afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190615257565b975050509550505050506122317f0000000000000000000000000000000000000000000000000000000000000000613456565b600d54604051633af9e66960e01b81523060048201526000916001600160a01b031690633af9e66990602401602060405180830381600087803b15801561227757600080fd5b505af115801561228b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122af9190615355565b600d546040516395dd919360e01b81523060048201529192506000916001600160a01b03909116906395dd91939060240160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190615355565b9050600061233e82846158fb565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156123a357600080fd5b505afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db9190615355565b905060006123e982846158a4565b9050600087821115612443576123ff88836158fb565b9b508b831161241957612412838d6158fb565b905061243e565b612423898d6158a4565b83106124315788995061243e565b61243b8c846158fb565b99505b612450565b61244d82896158fb565b9a505b600061245c8b8b6158fb565b9050600061246a83836158a4565b905080156124a057600061247d82612f5d565b90508381111561249e5761249184826158fb565b61249b908e6158a4565b9c505b505b6124a8610cb6565b9098509650881580156124ba57508715155b80156124c4575086155b156124e1576124d460001961350a565b6124de888f6158a4565b9d505b5050505050505050505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561255357600080fd5b505afa158015612567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258b9190615355565b905060008061259b83600161371f565b915091506125a883613914565b6125b282826139df565b6125bc90836158fb565b915060005b6000831180156125d2575060068111155b156125ff576125e18383613af2565b6125eb90846158fb565b9250806125f78161593e565b9150506125c1565b50505050565b6000808380602001905181019061261c919061536d565b6040516370a0823160e01b815230600482015291935091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561268357600080fd5b505afa158015612697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bb9190615355565b9050828110156126fc5760405162461bcd60e51b815260206004820152600c60248201526b11931054d217d1905253115160a21b604482015260640161062d565b81156127195761270b83613be7565b6127148461350a565b610efb565b61272281613914565b610efb84613cb2565b6060600061201083613d7d565b61278c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613dd9565b600d546127c6906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613dd9565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561281757600080fd5b505afa15801561282b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284f9190615355565b81101561290257600354604051636e74a6f760e01b8152600481018390526128f0916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d49190614eb6565b73c00e94cb662c3520282e6f5717214004a7f268889084613dd9565b806128fa8161593e565b9150506127c9565b506106847f000000000000000000000000000000000000000000000000000000000000000082613efd565b600d5460408051637e062a3560e11b815290516001600160a01b039283169284169163fc0c546a916004808301926020929190829003018186803b15801561297457600080fd5b505afa158015612988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ac9190614eb6565b6001600160a01b0316146129f85760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b604482015260640161062d565b6000600b556106846124f1565b6040516001600160a01b038316602482015260448101829052610e3990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613fbe565b6000808215612b3857600354604051631d1f307960e31b815273c00e94cb662c3520282e6f5717214004a7f2688860048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018690529091169063e8f983c89060640160006040518083038186803b158015612af757600080fd5b505afa158015612b0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b33919081019061509b565b509150505b600080612b43610cb6565b6040516370a0823160e01b81523060048201529193509150819083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612bab57600080fd5b505afa158015612bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be39190615355565b612bed90866158a4565b612bf791906158a4565b612c0191906158fb565b95945050505050565b80471015612c5a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161062d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ca7576040519150601f19603f3d011682016040523d82523d6000602084013e612cac565b606091505b5050905080610e395760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161062d565b604080516001808252818301909252600091602080830190803683375050600d5482519293506001600160a01b031691839150600090612d7357634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015260405162e1ed9760e51b8152733d9819210a31b4961b30ef54be2aed79b9c9cd3b90631c3db2e090612dc3903090859060040161556a565b600060405180830381600087803b158015612ddd57600080fd5b505af1158015610efb573d6000803e3d6000fd5b6000818152600183016020526040812054612e3857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610887565b506000610887565b60008181526001830160205260408120548015612f53576000612e646001836158fb565b8554909150600090612e78906001906158fb565b9050818114612ef9576000866000018281548110612ea657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612ed757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612f1857634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610887565b6000915050610887565b6000806000612f6d84600061371f565b91509150801561302d57612f8182826139df565b612f8b90836158fb565b915060005b600083118015612fa15750600a8111155b15612fcf57612fb1836001613af2565b612fbb90846158fb565b925080612fc78161593e565b915050612f90565b821561302b57600080612fe0610cb6565b915091506000600c5460001461300c57600c54612fff612710846158dc565b61300991906158bc565b90505b600061301882856158fb565b905080891115613026578098505b505050505b505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561308f57600080fd5b505afa1580156130a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c79190615355565b600d54604051633af9e66960e01b81523060048201529192506001600160a01b031690633af9e66990602401602060405180830381600087803b15801561310d57600080fd5b505af1158015613121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131459190615355565b85111561321c575060006131787f0000000000000000000000000000000000000000000000000000000000000000613456565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156131d757600080fd5b505afa1580156131eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320f9190615355565b61321990866158fb565b94505b6132258561350a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561328757600080fd5b505afa15801561329b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132bf9190615355565b90506132cb82826158fb565b9695505050505050565b6000808390506000816001600160a01b031663295c39a56040518163ffffffff1660e01b815260040160206040518083038186803b15801561331657600080fd5b505afa15801561332a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334e9190615355565b90506000805b8281101561340d5760405163062bd3e960e01b8152600481018290526001600160a01b0385169063062bd3e99060240160206040518083038186803b15801561339c57600080fd5b505afa1580156133b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d49190614eb6565b9150856001600160a01b0316826001600160a01b031614156133fb57935061088792505050565b806134058161593e565b915050613354565b5060405162461bcd60e51b815260206004820152601b60248201527f6e6f2d6d61726b657449642d666f756e642d666f722d746f6b656e0000000000604482015260640161062d565b61345e612d23565b6040516370a0823160e01b815230600482015260009073c00e94cb662c3520282e6f5717214004a7f26888906370a082319060240160206040518083038186803b1580156134ab57600080fd5b505afa1580156134bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e39190615355565b90508015611cd957611cd973c00e94cb662c3520282e6f5717214004a7f268888383614090565b60001981141561365457600d546040516370a0823160e01b81523060048201526001600160a01b039091169063db006a759082906370a082319060240160206040518083038186803b15801561355f57600080fd5b505afa158015613573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135979190615355565b6040518263ffffffff1660e01b81526004016135b591815260200190565b602060405180830381600087803b1580156135cf57600080fd5b505af11580156135e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136079190615355565b15611c3d5760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c6564000000604482015260640161062d565b600d5460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e390602401602060405180830381600087803b15801561369a57600080fd5b505af11580156136ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d29190615355565b156106845760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c6564000000604482015260640161062d565b600d54604051633af9e66960e01b8152306004820152600091829182916001600160a01b031690633af9e66990602401602060405180830381600087803b15801561376957600080fd5b505af115801561377d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a19190615355565b600d546040516395dd919360e01b81523060048201529192506000916001600160a01b03909116906395dd91939060240160206040518083038186803b1580156137ea57600080fd5b505afa1580156137fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138229190615355565b9050600b546000141561383c5792506001915061390d9050565b600061384882846158fb565b905060008661386e5787821161385f576000613869565b61386988836158fb565b613878565b61387888836158a4565b90506000600c5461271061388c91906158fb565b600c5461389990846158dc565b6138a391906158bc565b90506000600b546127106138b791906158fb565b600b546138c490856158dc565b6138ce91906158bc565b9050818511156138ed57600196506138e681866158fb565b9750613906565b80851015613906576000965061390385826158fb565b97505b5050505050505b9250929050565b600d5460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561395a57600080fd5b505af115801561396e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139929190615355565b156106845760405162461bcd60e51b815260206004820152601960248201527f737570706c792d746f2d636f6d706f756e642d6661696c656400000000000000604482015260640161062d565b600a546000908190610100900460ff1680156139fb5750600084115b15613a6c5760008484604051602001613a209291909182521515602082015260400190565b6040516020818303038152906040529050613a5c7f00000000000000000000000000000000000000000000000000000000000000008683614161565b9150613a6882866158fb565b9450505b600a5460ff168015613a7b5750825b8015613a875750600084115b156120105760008484604051602001613aac9291909182521515602082015260400190565b6040516020818303038152906040529050613ae87f0000000000000000000000000000000000000000000000000000000000000000868361446a565b612c0190836158a4565b6000806000613aff610cb6565b91509150806000148015613b105750835b15613b2057600092505050610887565b600d54604051638e8f294b60e01b81526001600160a01b039091166004820152600090733d9819210a31b4961b30ef54be2aed79b9c9cd3b90638e8f294b9060240160606040518083038186803b158015613b7a57600080fd5b505afa158015613b8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb29190615215565b509150508415613bcf57613bc88684848461480a565b9350613bde565b613bdb86848484614870565b93505b50505092915050565b600d5460405163073a938160e11b8152600481018390526001600160a01b0390911690630e75270290602401602060405180830381600087803b158015613c2d57600080fd5b505af1158015613c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c659190615355565b156106845760405162461bcd60e51b815260206004820152601860248201527f72657061792d746f2d636f6d706f756e642d6661696c65640000000000000000604482015260640161062d565b600d5460405163317afabb60e21b8152600481018390526001600160a01b039091169063c5ebeaec90602401602060405180830381600087803b158015613cf857600080fd5b505af1158015613d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d309190615355565b156106845760405162461bcd60e51b815260206004820152601b60248201527f626f72726f772d66726f6d2d636f6d706f756e642d6661696c65640000000000604482015260640161062d565b606081600001805480602002602001604051908101604052809291908181526020018280548015613dcd57602002820191906000526020600020905b815481526020019060010190808311613db9575b50505050509050919050565b801580613e625750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613e2857600080fd5b505afa158015613e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e609190615355565b155b613ecd5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161062d565b6040516001600160a01b038316602482015260448101829052610e3990849063095ea7b360e01b90606401612a31565b613f256001600160a01b038316731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e83613dd9565b611cd973b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613f7557600080fd5b505afa158015613f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fad9190614eb6565b6001600160a01b0384169083613dd9565b6000614013826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149529092919063ffffffff16565b805190915015610e39578080602001905181019061403191906151f9565b610e395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161062d565b600060065461271014156140a5576001614153565b6040516358fac00360e01b81526001600160a01b0380861660048301526024820184905284166044820152610e10606482015261415390730f1f5a87f99f0918e6c81f16e59f3518698221ff906358fac0039060840160206040518083038186803b15801561411357600080fd5b505afa158015614127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061414b9190615355565b600654614969565b90506125ff8484848461498c565b600a54600090610100900460ff166141bb5760405162461bcd60e51b815260206004820152601d60248201527f647964782d666c6173682d6c6f616e2d69732d6e6f742d616374697665000000604482015260640161062d565b6040516370a0823160e01b8152731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e60048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561421157600080fd5b505afa158015614225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142499190615355565b905080841115614257578093505b60006142648560026158a4565b90506000848260405160200161427b92919061574f565b60408051808303601f19018152600380845260808401909252925060009190816020015b6142a7614de1565b81526020019060019003908161429f5790505090506142c860095488614b4d565b816000815181106142e957634e487b7160e01b600052603260045260246000fd5b60200260200101819052506142fd82614bd7565b8160018151811061431e57634e487b7160e01b600052603260045260246000fd5b602002602001018190525061433560095484614c45565b8160028151811061435657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161437857505060408051808201825260008082526020918201528151808301909252308252600190820152909150816000815181106143e757634e487b7160e01b600052603260045260246000fd5b602090810291909101015260405163a67a6a4560e01b8152731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e9063a67a6a459061442b908490869060040161561f565b600060405180830381600087803b15801561444557600080fd5b505af1158015614459573d6000803e3d6000fd5b50999b9a5050505050505050505050565b600a5460009060ff166144bf5760405162461bcd60e51b815260206004820152601d60248201527f616176652d666c6173682d6c6f616e2d69732d6e6f742d616374697665000000604482015260640161062d565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c56001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561450e57600080fd5b505afa158015614522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145469190614eb6565b6040516321f8a72160e01b8152600160f81b600482015290915060009073b53c1a33016b2dc2ff3653530bff1848a515c8c5906321f8a7219060240160206040518083038186803b15801561459a57600080fd5b505afa1580156145ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d29190614eb6565b6040516335ea6a7560e01b81526001600160a01b0388811660048301529192506000918316906335ea6a75906024016101406040518083038186803b15801561461a57600080fd5b505afa15801561462e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061465291906153f2565b505050505050505050905080861115614669578095505b6040805160018082528183019092526000916020808301908036833701905050905087816000815181106146ad57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050878160008151811061470c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061475e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001600a60026101000a81548160ff021916908315150217905550856001600160a01b031663ab9c4b5d30858585308e60006040518863ffffffff1660e01b81526004016147be979695949392919061558e565b600060405180830381600087803b1580156147d857600080fd5b505af11580156147ec573d6000803e3d6000fd5b5050600a805462ff00001916905550989a9950505050505050505050565b6000808215614833578261482685670de0b6b3a76400006158dc565b61483091906158bc565b90505b61483d81866158fb565b915083821061484a578391505b858210614855578591505b61485e8261350a565b61486782613be7565b50949350505050565b600080670de0b6b3a764000061488684876158dc565b61489091906158bc565b905061489c84826158fb565b91508582106148a9578591505b6148b282613cb2565b6040516370a0823160e01b8152306004820152614867907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561491557600080fd5b505afa158015614929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061494d9190615355565b613914565b60606149618484600085614c80565b949350505050565b600061271061497883826158fb565b61498290856158dc565b61201091906158bc565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b1580156149e757600080fd5b505afa1580156149fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614a23919081019061509b565b9250925092508360001415614a3757600193505b8115614b4457600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b158015614a8157600080fd5b505afa158015614a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab99190614eb6565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401614aec9594939291906157eb565b600060405180830381600087803b158015614b0657600080fd5b505af1158015614b1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614b42919081019061514a565b505b50505050505050565b614b55614de1565b604080516101008101825260018152600060208083018290528351608081018552828152929384019291908201905b81526020016000815260200185815250815260200184815260200160008152602001306001600160a01b031681526020016000815260200160405180602001604052806000815250815250905092915050565b614bdf614de1565b6040805161010081018252600881526000602080830182905283516080810185528281529293840192919082019081526020016000815260006020918201819052918352820181905260408201819052306060830152608082015260a001929092525090565b614c4d614de1565b60408051610100810182526000808252602080830182905283516080810185526001815292938401929190820190614b84565b606082471015614ce15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161062d565b843b614d2f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062d565b600080866001600160a01b03168587604051614d4b919061554e565b60006040518083038185875af1925050503d8060008114614d88576040519150601f19603f3d011682016040523d82523d6000602084013e614d8d565b606091505b5091509150614d9d828286614da8565b979650505050505050565b60608315614db7575081612010565b825115614dc75782518084602001fd5b8160405162461bcd60e51b815260040161062d9190615771565b604080516101008101825260008082526020820152908101614e25604080516080810190915260008082526020820190815260200160008152602001600081525090565b8152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001606081525090565b60008083601f840112614e68578182fd5b50813567ffffffffffffffff811115614e7f578182fd5b6020830191508360208260051b850101111561390d57600080fd5b600060208284031215614eab578081fd5b8135612010816159ab565b600060208284031215614ec7578081fd5b8151612010816159ab565b60008060008385036080811215614ee7578283fd5b8435614ef2816159ab565b935060206040601f1983011215614f07578384fd5b614f116040615827565b915080860135614f20816159ab565b825260408601358183015290925060608501359067ffffffffffffffff821115614f48578283fd5b818601915086601f830112614f5b578283fd5b8135614f6e614f698261587c565b615827565b8181528883838601011115614f81578485fd5b818385018483013784838383010152809450505050509250925092565b600080600080600080600080600060a08a8c031215614fbb578485fd5b893567ffffffffffffffff80821115614fd2578687fd5b614fde8d838e01614e57565b909b50995060208c0135915080821115614ff6578687fd5b6150028d838e01614e57565b909950975060408c013591508082111561501a578687fd5b6150268d838e01614e57565b909750955060608c0135915061503b826159ab565b90935060808b01359080821115615050578384fd5b818c0191508c601f830112615063578384fd5b813581811115615071578485fd5b8d6020828501011115615082578485fd5b6020830194508093505050509295985092959850929598565b6000806000606084860312156150af578283fd5b835167ffffffffffffffff8111156150c5578384fd5b8401601f810186136150d5578384fd5b805160206150e5614f6983615858565b8083825282820191508285018a848660051b8801011115615104578889fd5b8895505b8486101561512f57805161511b816159ab565b835260019590950194918301918301615108565b50918801516040909801519199979850909695505050505050565b6000602080838503121561515c578182fd5b825167ffffffffffffffff811115615172578283fd5b8301601f81018513615182578283fd5b8051615190614f6982615858565b80828252848201915084840188868560051b87010111156151af578687fd5b8694505b838510156151d15780518352600194909401939185019185016151b3565b50979650505050505050565b6000602082840312156151ee578081fd5b8135612010816159c0565b60006020828403121561520a578081fd5b8151612010816159c0565b600080600060608486031215615229578081fd5b8351615234816159c0565b60208501516040860151919450925061524c816159c0565b809150509250925092565b600080600080600080600080610100898b031215615273578182fd5b885161527e816159c0565b809850506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600080604083850312156152d2578182fd5b825167ffffffffffffffff8111156152e8578283fd5b8301601f810185136152f8578283fd5b8051615306614f698261587c565b81815286602083850101111561531a578485fd5b61532b826020830160208601615912565b60209590950151949694955050505050565b60006020828403121561534e578081fd5b5035919050565b600060208284031215615366578081fd5b5051919050565b6000806040838503121561537f578182fd5b825191506020830151615391816159c0565b809150509250929050565b600080604083850312156153ae578182fd5b50508035926020909101359150565b600080600080608085870312156153d2578182fd5b505082516020840151604085015160609095015191969095509092509050565b6000806000806000806000806000806101408b8d031215615411578384fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015164ffffffffff81168114615466578182fd5b809150509295989b9194979a5092959850565b6000815180845260208085019450808401835b838110156154b15781516001600160a01b03168752958201959082019060010161548c565b509495945050505050565b6000815180845260208085019450808401835b838110156154b1578151875295820195908201906001016154cf565b60008151808452615503816020860160208601615912565b601f01601f19169290920160200192915050565b805115158252602081015161552b8161599b565b6020830152604081015161553e8161599b565b6040830152606090810151910152565b60008251615560818460208701615912565b9190910192915050565b6001600160a01b038316815260406020820181905260009061496190830184615479565b600060018060a01b03808a16835260e060208401526155b060e084018a615479565b83810360408501526155c2818a6154bc565b905083810360608501526155d681896154bc565b9050818716608085015283810360a08501526155f281876154eb565b9250505061ffff831660c083015298975050505050505050565b6000602082526120106020830184615479565b6040808252835182820181905260009190606090818501906020808901865b8381101561566c57815180516001600160a01b0316865283015183860152938601939082019060010161563e565b50508683038188015287518084528184019250600581901b84018201898301885b8381101561573e57601f1987840301865281516101608151600981106156b5576156b561596f565b855281870151878601528a8201516156cf8c870182615517565b508982015160c081818801526080840151915060e0828189015260a085015192506157066101008901846001600160a01b03169052565b90840151610120880152909201516101408601829052915061572a818601836154eb565b97870197945050509084019060010161568d565b50909b9a5050505050505050505050565b60006040825261576260408301856154eb565b90508260208301529392505050565b60006020825261201060208301846154eb565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600086825285602083015260a0604083015261580a60a0830186615479565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561585057615850615985565b604052919050565b600067ffffffffffffffff82111561587257615872615985565b5060051b60200190565b600067ffffffffffffffff82111561589657615896615985565b50601f01601f191660200190565b600082198211156158b7576158b7615959565b500190565b6000826158d757634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156158f6576158f6615959565b500290565b60008282101561590d5761590d615959565b500390565b60005b8381101561592d578181015183820152602001615915565b838111156125ff5750506000910152565b600060001982141561595257615952615959565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600281106106845761068461596f565b6001600160a01b038116811461068457600080fd5b801515811461068457600080fdfea264697066735822122076362b47c7457590a1607a6b0d6497904fa419e840373d6fd691878d3ee9912a64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "callFunction(address,(address,uint256),bytes)": {
        "details": "DyDx calls this function after doing flash loan"
      },
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "details": "Aave will call this function after doing flash loan"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Compound calculate COMP accrued and store it when user interact with Compound contracts, i.e. deposit, withdraw or transfer tokens. So compAccrued() will return stored COMP accrued amount, which is olderFor up to date value check totalValueCurrent()"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral tokenClaimed COMP will stay in strategy until next rebalance"
      },
      "updateBorrowRatio(uint256,uint256)": {
        "details": "It is possible to set 0 as _minBorrowRatio to not borrow anything",
        "params": {
          "_maxBorrowRatio": "Maximum % we want to borrow",
          "_minBorrowRatio": "Minimum % we want to borrow"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit LINK in Compound and also borrow LINK based on leverage condition",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "currentBorrowRatio()": {
        "notice": "Current borrow ratio, calculated as current borrow divide by max allowed borrow Return value is based on basis points, i.e. 7500 = 75% ratio"
      },
      "getPosition()": {
        "notice": "Return supply and borrow position. Position may return few block old value"
      },
      "isLossMaking()": {
        "notice": "Calculate current position using claimed COMP and current borrow."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value using COMP accrued, supply and borrow position"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value based on COMP claimed, supply and borrow position"
      },
      "updateBorrowRatio(uint256,uint256)": {
        "notice": "Update upper and lower borrow ratio"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14295,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "WETH",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14300,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "receiptToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14306,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14309,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)5259"
      },
      {
        "astId": 14312,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 14315,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14318,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14321,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "_keepers",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)4299_storage"
      },
      {
        "astId": 3091,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "dyDxMarketId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3097,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "isAaveActive",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3100,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "isDyDxActive",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3170,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "awaitingFlash",
        "offset": 2,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 19672,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "minBorrowRatio",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 19675,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "maxBorrowRatio",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 19678,
        "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
        "label": "cToken",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CToken)5389"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CToken)5389": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)5259": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4299_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4298,
            "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3997,
            "contract": "contracts/strategies/compound/CompoundLeverageStrategyLINK.sol:CompoundLeverageStrategyLINK",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}