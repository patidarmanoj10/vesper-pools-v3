{
  "address": "0x6A71539014C2B8c8ff961b91F559153aBA725Af3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIdx",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "DepositFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCrvSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedCrvSlippage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOOSTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CVX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amtNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "calcWithdrawLpAs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpToWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableRewardsInCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAsCollateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coinDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvLp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "contract IStableSwapUnderlying",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvxCrvRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalConversionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositError",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getLpValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_i",
          "type": "uint256"
        }
      ],
      "name": "getLpValueAs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClaimRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isClaimRewards",
          "type": "bool"
        }
      ],
      "name": "updateClaimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateCrvSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdRateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c598ead85712b3a3ebd77b2e3a52db3327f6ed999c97ba9108fa56ddd6433c2",
  "receipt": {
    "to": null,
    "from": "0x1CbfaE0367a9B1e4Ac2c158E57B5F00cCb337271",
    "contractAddress": "0x6A71539014C2B8c8ff961b91F559153aBA725Af3",
    "transactionIndex": 205,
    "gasUsed": "6058764",
    "logsBloom": "0x
    "blockHash": "0xdaf0c288fde980a50a10f3b97e99faf29a48445eeb6ed595c2442d84a98e82ab",
    "transactionHash": "0x1c598ead85712b3a3ebd77b2e3a52db3327f6ed999c97ba9108fa56ddd6433c2",
    "logs": [],
    "blockNumber": 14143057,
    "cumulativeGasUsed": "19521077",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x83c608b3997db00B5C6D93746785857Cd22d4495",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710",
    0,
    "Convex4PoolStrategyMUSDPoolMUSD"
  ],
  "solcInputHash": "ff1d0286c3412f729bf267337685d236",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIdx\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"DepositFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCrvSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedCrvSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOSTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amtNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"calcWithdrawLpAs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewardsInCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAsCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"contract IStableSwapUnderlying\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalConversionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositError\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getLpValueAs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimRewards\",\"type\":\"bool\"}],\"name\":\"updateClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"updateCrvSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"claimableRewardsInCollateral()\":{\"details\":\"Claimable rewards estimated into pool's collateral value\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals.\"},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"setRewardTokens(address[])\":{\"details\":\"convex pool can add new rewards. This method refresh list.\"},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Report total value in collateral token\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value of asset under management\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol\":\"Convex4PoolStrategyMUSDPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/convex/IConvex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IConvex {\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    // deposit lp tokens and stake\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    // deposit all lp tokens and stake\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    // withdraw lp tokens\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    // withdraw all lp tokens\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    // claim crv + extra rewards\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    // claim  rewards on stash (msg.sender == stash)\\n    function claimRewards(uint256 _pid, address _gauge) external returns (bool);\\n\\n    // delegate address votes on dao (needs to be voteDelegate)\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external returns (bool);\\n\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns (bool);\\n}\\n\\ninterface Rewards {\\n    function pid() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256) external view returns (address);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function stake(uint256) external returns (bool);\\n\\n    function stakeAll() external returns (bool);\\n\\n    function stakeFor(address, uint256) external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAll(bool claim) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function getReward() external returns (bool);\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function donate(uint256 _amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x54043703fa761092e67cd1a48c109518c7ae8e30b44bd58b78c84185508b8323\",\"license\":\"MIT\"},\"contracts/interfaces/convex/IConvexToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IConvexToken {\\n    function maxSupply() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function reductionPerCliff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1de19f13f746964026891b251deee40d177ff8f3f2e8cc2e5d8016350e5aac0\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\ninterface IDeposit4x {\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x73394d04b248364881ca481c162ea12d1db8ea98a8341e6123dcabd8f1f1acd2\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IDepositZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\ninterface IDepositZap4x {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(\\n        address _pool,\\n        uint256 _amount,\\n        uint256[4] memory _min_amounts\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd5c0c0936a08994420353a17fca31d90a748d6628265c3447f20e9ec608cc232\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Not a complete interface, but should have what we need\\ninterface ILiquidityGaugeV2 is IERC20 {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address, address) external returns (uint256);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function reward_integral(address) external view returns (uint256);\\n\\n    function reward_integral_for(address, address) external view returns (uint256);\\n\\n    function lp_token() external view returns (address);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\\n    function claimable_reward(address addr, address token) external view override returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0xbef06cb6dada77250c856cd508dc62e1059c6dc333fa08b94e100672aae8d65e\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IMetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable func-name-mixedcase*/\\npragma solidity 0.8.3;\\n\\ninterface IMetapoolFactory {\\n    function get_underlying_coins(address _pool) external view returns (address[8] memory _coins);\\n\\n    function get_underlying_decimals(address _pool) external view returns (uint256[8] memory _decimals);\\n}\\n\",\"keccak256\":\"0x62bda23db6e8fcb65ea30d0c06cd7c8ff25a160630f8fd623ed965893d005d97\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IStableSwapV2 {\\n    function coins(int128 i) external view returns (address);\\n}\\n\\ninterface IStableSwapUnderlying is IStableSwap {\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap2x is IStableSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap3x is IStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap4x is IStableSwap {\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[2] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[3] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[4] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x535c76ea0e71d0a78375eb7575e877721a00625d038ae76e47186746e5cc66c2\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x847383c018c99992963c94c37b641ef7272cbc0ef38d4b17759b6f4423e43090\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf2335cb2ab1ae53919cb05ef89b3c0b223565c2ddb2e3d972a25e471230d417\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    // Function to get pricePerShare from V2 pools\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938b275f1e200fabee7dec960f95f7c82e934de107e12a2acac487d624d190c4\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration.\\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            (bool _success, bytes memory _returnData) =\\n                address(swapManager).call(\\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\\n                );\\n            if (_success) {\\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n                return (0, false);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0x5b96b930f1ddb6914b7545e1f25e80f63e98eeb76537174e4b53d9cdd8ad4a18\",\"license\":\"MIT\"},\"contracts/strategies/convex/4Pool/Convex4PoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../../curve/4Pool/Crv4PoolStrategy.sol\\\";\\nimport \\\"../ConvexStrategyBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Curve 4Pool and stake lp token to convex.\\nabstract contract Convex4PoolStrategy is Crv4PoolStrategy, ConvexStrategyBase {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _crvDeposit,\\n        address _crvPool,\\n        address _crvLp,\\n        address _gauge,\\n        uint256 _collateralIdx,\\n        uint256 _convexPoolId,\\n        string memory _name\\n    )\\n        Crv4PoolStrategy(_pool, _swapManager, _crvDeposit, _crvPool, _crvLp, _gauge, _collateralIdx, _name)\\n        ConvexStrategyBase(_crvLp, _convexPoolId)\\n    {\\n        oracleRouterIdx = 0;\\n    }\\n\\n    /// @dev convex pool can add new rewards. This method refresh list.\\n    function setRewardTokens(\\n        address[] memory /*_rewardTokens*/\\n    ) external override onlyKeeper {\\n        rewardTokens = _getRewardTokens();\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n        _setupOracles();\\n    }\\n\\n    function updateClaimRewards(bool _isClaimRewards) external onlyGovernor {\\n        isClaimRewards = _isClaimRewards;\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        IERC20(crvLp).safeApprove(BOOSTER, _amount);\\n        super._approveToken(_amount);\\n    }\\n\\n    function _claimRewards() internal override {\\n        require(Rewards(cvxCrvRewards).getReward(address(this), true), \\\"reward-claim-failed\\\");\\n    }\\n\\n    function _stakeAllLp() internal override {\\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\\n        if (balance != 0) {\\n            require(IConvex(BOOSTER).deposit(convexPoolId, balance, true), \\\"booster-deposit-failed\\\");\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal override {\\n        Rewards(cvxCrvRewards).withdrawAllAndUnwrap(isClaimRewards);\\n    }\\n\\n    function _unstakeLp(uint256 _amount) internal override {\\n        if (_amount != 0) {\\n            require(Rewards(cvxCrvRewards).withdrawAndUnwrap(_amount, false), \\\"withdraw-and-unwrap-failed\\\");\\n        }\\n    }\\n\\n    function totalStaked() public view override returns (uint256 total) {\\n        total = Rewards(cvxCrvRewards).balanceOf(address(this));\\n    }\\n\\n    function totalLp() public view override returns (uint256 total) {\\n        total = IERC20(crvLp).balanceOf(address(this)) + Rewards(cvxCrvRewards).balanceOf(address(this));\\n    }\\n\\n    /// @dev Claimable rewards estimated into pool's collateral value\\n    function claimableRewardsInCollateral() public view virtual override returns (uint256 rewardAsCollateral) {\\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = _claimableRewards();\\n        for (uint256 i = 0; i < _claimableRewardsInfo.length; i++) {\\n            if (_claimableRewardsInfo[i].amount != 0) {\\n                (, uint256 _reward, ) =\\n                    swapManager.bestOutputFixedInput(\\n                        _claimableRewardsInfo[i].token,\\n                        address(collateralToken),\\n                        _claimableRewardsInfo[i].amount\\n                    );\\n                rewardAsCollateral += _reward;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1123b585c4260e6850147e7c5e24c3f674484440a44fa8ab55c09b31029ab46a\",\"license\":\"MIT\"},\"contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./Convex4PoolStrategy.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ncontract Convex4PoolStrategyMUSDPool is Convex4PoolStrategy {\\n    // MUSD-3CRV Metapool\\n    // Composed of [ MUSD , [ DAI, USDC, USDT ]]\\n\\n    // MUSD LP Token\\n    address internal constant CRV_LP = 0x1AEf73d49Dedc4b1778d0706583995958Dc862e6;\\n    // MUSD Pool\\n    address internal constant CRV_POOL = 0x8474DdbE98F5aA3179B3B3F5942D724aFcdec9f6;\\n    // MUSD Deposit Contract\\n    address internal constant CRV_DEPOSIT = 0x803A2B40c5a9BB2B86DD630B274Fa2A9202874C2;\\n    // MUSD Gauge\\n    address internal constant GAUGE = 0x5f626c30EC1215f4EdCc9982265E8b1F411D1352;\\n    // Convex Pool ID for MUSD-3CRV\\n    uint256 internal constant CONVEX_POOL_ID = 14;\\n\\n    address private constant THREEPOOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        uint256 _collateralIdx,\\n        string memory _name\\n    )\\n        Convex4PoolStrategy(\\n            _pool,\\n            _swapManager,\\n            CRV_DEPOSIT,\\n            CRV_POOL,\\n            CRV_LP,\\n            GAUGE,\\n            _collateralIdx,\\n            CONVEX_POOL_ID,\\n            _name\\n        )\\n    {\\n        oracleRouterIdx = 1;\\n    }\\n\\n    function _init(\\n        address _crvPool,\\n        uint256 /* _n */\\n    ) internal virtual override {\\n        coins.push(IStableSwap(_crvPool).coins(0));\\n        coinDecimals.push(IERC20Metadata(coins[0]).decimals());\\n        for (uint256 i = 0; i < 3; i++) {\\n            coins.push(IStableSwap(THREEPOOL).coins(i));\\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\\n        }\\n    }\\n\\n    function _depositToCurve(uint256 _amt) internal virtual override returns (bool) {\\n        if (_amt != 0) {\\n            uint256[2] memory _depositAmounts;\\n            _depositAmounts[collIdx] = _amt;\\n            uint256[4] memory _depositAmountsZap;\\n            _depositAmountsZap[collIdx] = _amt;\\n\\n            uint256 _expectedOut =\\n                _calcAmtOutAfterSlippage(\\n                    IStableSwap2x(address(crvPool)).calc_token_amount(_depositAmounts, true),\\n                    crvSlippage\\n                );\\n\\n            uint256 _minLpAmount =\\n                ((_amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\\n            if (_expectedOut > _minLpAmount) _minLpAmount = _expectedOut;\\n            // solhint-disable-next-line no-empty-blocks\\n            try IDeposit4x(crvDeposit).add_liquidity(_depositAmountsZap, _minLpAmount) {} catch Error(\\n                string memory _reason\\n            ) {\\n                emit DepositFailed(_reason);\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x610013d146a2f69da52eff0b77ae7ec22f44d83a5b75bfca2edef1464627e6ba\",\"license\":\"MIT\"},\"contracts/strategies/convex/ConvexStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/convex/IConvex.sol\\\";\\nimport \\\"../../interfaces/convex/IConvexToken.sol\\\";\\n\\n// Convex Strategies common variables and helper functions\\nabstract contract ConvexStrategyBase {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    address public constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\\n    address public immutable cvxCrvRewards;\\n    uint256 public immutable convexPoolId;\\n    bool public isClaimRewards;\\n    uint256 internal constant SUSHISWAP_ROUTER_INDEX = 1;\\n\\n    struct ClaimableRewardInfo {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    constructor(address _crvLp, uint256 _convexPoolId) {\\n        (address _lp, , , address _reward, , ) = IConvex(BOOSTER).poolInfo(_convexPoolId);\\n        require(_lp == address(_crvLp), \\\"incorrect-lp-token\\\");\\n        cvxCrvRewards = _reward;\\n        convexPoolId = _convexPoolId;\\n    }\\n\\n    function _getRewardTokens() internal view returns (address[] memory) {\\n        uint256 extraRewardCount;\\n        for (uint256 i = 0; i < Rewards(cvxCrvRewards).extraRewardsLength(); i++) {\\n            Rewards rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\\n            // Some pool has CVX as extra rewards but other do not. CVX still reward token\\n            if (rewardContract.rewardToken() != CRV && rewardContract.rewardToken() != CVX) {\\n                extraRewardCount++;\\n            }\\n        }\\n        address[] memory _rewardTokens = new address[](extraRewardCount + 2);\\n        _rewardTokens[0] = CRV;\\n        _rewardTokens[1] = CVX;\\n        uint256 index = 2;\\n        for (uint256 i = 0; i < Rewards(cvxCrvRewards).extraRewardsLength(); i++) {\\n            Rewards rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\\n            // CRV and CVX already added in array\\n            if (rewardContract.rewardToken() != CRV && rewardContract.rewardToken() != CVX) {\\n                _rewardTokens[index] = rewardContract.rewardToken();\\n                index++;\\n            }\\n        }\\n        return _rewardTokens;\\n    }\\n\\n    /// @dev Returns a list of (token, amount) for all rewards claimable in a Convex Pool\\n    function _claimableRewards() internal view returns (ClaimableRewardInfo[] memory) {\\n        uint256 _extraRewardCount = Rewards(cvxCrvRewards).extraRewardsLength();\\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = new ClaimableRewardInfo[](_extraRewardCount + 2);\\n        uint256 _baseReward = Rewards(cvxCrvRewards).earned(address(this));\\n\\n        // CVX rewards are minted proportionally to baseReward (CRV)\\n        uint256 _cvxReward = _calculateCVXRewards(_baseReward);\\n        _claimableRewardsInfo[0] = ClaimableRewardInfo(CRV, _baseReward);\\n        _claimableRewardsInfo[1] = ClaimableRewardInfo(CVX, _cvxReward);\\n\\n        // Don't care if there are additional CRV, or CVX in extraRewards\\n        // total amount will be summed together in claimableRewardsInCollateral()\\n        for (uint256 i = 0; i < _extraRewardCount; i++) {\\n            Rewards _rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\\n            _claimableRewardsInfo[2 + i] = ClaimableRewardInfo(\\n                _rewardContract.rewardToken(),\\n                _rewardContract.earned(address(this))\\n            );\\n        }\\n        return _claimableRewardsInfo;\\n    }\\n\\n    // TODO: review this again.  There may be substitute\\n    function _calculateCVXRewards(uint256 _claimableCrvRewards) internal view returns (uint256 _total) {\\n        // CVX Rewards are minted based on CRV rewards claimed upon withdraw\\n        // This will calculate the CVX amount based on CRV rewards accrued\\n        // without having to claim CRV rewards first\\n        // ref 1: https://github.com/convex-eth/platform/blob/main/contracts/contracts/Cvx.sol#L61-L76\\n        // ref 2: https://github.com/convex-eth/platform/blob/main/contracts/contracts/Booster.sol#L458-L466\\n\\n        uint256 _reductionPerCliff = IConvexToken(CVX).reductionPerCliff();\\n        uint256 _totalSupply = IConvexToken(CVX).totalSupply();\\n        uint256 _maxSupply = IConvexToken(CVX).maxSupply();\\n        uint256 _cliff = _totalSupply / _reductionPerCliff;\\n        uint256 _totalCliffs = 1000;\\n\\n        if (_cliff < _totalCliffs) {\\n            //for reduction% take inverse of current cliff\\n            uint256 _reduction = _totalCliffs - _cliff;\\n            //reduce\\n            _total = (_claimableCrvRewards * _reduction) / _totalCliffs;\\n\\n            //supply cap check\\n            uint256 _amtTillMax = _maxSupply - _totalSupply;\\n            if (_total > _amtTillMax) {\\n                _total = _amtTillMax;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x371fa0c6dfe2e8c6a44597d5401247d7e4c7e55508d2a118582819e93fa91ccf\",\"license\":\"MIT\"},\"contracts/strategies/curve/4Pool/Crv4PoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../../../interfaces/curve/IDeposit.sol\\\";\\nimport \\\"../../Strategy.sol\\\";\\nimport \\\"../CrvPoolStrategyBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve 4Pool and earn interest.\\nabstract contract Crv4PoolStrategy is CrvPoolStrategyBase {\\n    using SafeERC20 for IERC20;\\n\\n    // No. of pooled tokens in the Pool\\n    uint256 private constant N = 4;\\n\\n    // Legacy Curve Deposit Helper contract for pure 4Pools\\n    // e.g: for sUSD 4Pool, deposit contract is: 0xfcba3e75865d2d561be8d220616520c171f12851\\n    // Offers same functionalities as DepositZap for Metapools with a different interface\\n    address public crvDeposit;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _crvDeposit,\\n        address _crvPool,\\n        address _crvLp,\\n        address _gauge,\\n        uint256 _collateralIdx,\\n        string memory _name\\n    ) CrvPoolStrategyBase(_pool, _crvPool, _crvLp, _gauge, _swapManager, _collateralIdx, N, _name) {\\n        require(IDeposit4x(_crvDeposit).token() == _crvLp, \\\"invalid-deposit-contract\\\");\\n        crvDeposit = _crvDeposit;\\n        require(ILiquidityGaugeV2(_gauge).lp_token() == _crvLp, \\\"invalid-gauge\\\");\\n    }\\n\\n    function _init(address _crvPool, uint256 _n) internal virtual override {\\n        for (uint256 i = 0; i < _n; i++) {\\n            coins.push(IStableSwapV2(_crvPool).coins(int128((int256(i)))));\\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        collateralToken.safeApprove(crvDeposit, _amount);\\n        IERC20(crvLp).safeApprove(crvDeposit, _amount);\\n    }\\n\\n    function _depositToCurve(uint256 amt) internal virtual override returns (bool) {\\n        if (amt != 0) {\\n            uint256[4] memory _depositAmounts;\\n            _depositAmounts[collIdx] = amt;\\n            uint256 _expectedOut =\\n                _calcAmtOutAfterSlippage(\\n                    IStableSwap4xUnderlying(address(crvPool)).calc_token_amount(_depositAmounts, true),\\n                    crvSlippage\\n                );\\n\\n            uint256 _minLpAmount =\\n                ((amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\\n            if (_expectedOut > _minLpAmount) _minLpAmount = _expectedOut;\\n            // solhint-disable-next-line no-empty-blocks\\n            try IDeposit4x(crvDeposit).add_liquidity(_depositAmounts, _minLpAmount) {} catch Error(\\n                string memory _reason\\n            ) {\\n                emit DepositFailed(_reason);\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _withdrawAsFromCrvPool(\\n        uint256 _lpAmount,\\n        uint256 _minAmt,\\n        uint256 _i\\n    ) internal virtual override {\\n        IDeposit4x(crvDeposit).remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(_i)), _minAmt);\\n    }\\n\\n    function getLpValueAs(uint256 _lpAmount, uint256 _i) public view virtual override returns (uint256) {\\n        return\\n            (_lpAmount != 0)\\n                ? IDeposit4x(crvDeposit).calc_withdraw_one_coin(_lpAmount, SafeCast.toInt128(int256(_i)))\\n                : 0;\\n    }\\n\\n    function _claimRewards() internal virtual override {\\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf256b19b21c8f03ed1b1bca117f8c2ce14f32551128799684faab48cbc34b48d\",\"license\":\"MIT\"},\"contracts/strategies/curve/CrvBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\nimport \\\"../../interfaces/curve/IMetapoolFactory.sol\\\";\\nimport \\\"../../interfaces/curve/IDepositZap.sol\\\";\\n\\nabstract contract CrvBase {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CRV_MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address public CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    IStableSwapUnderlying public immutable crvPool;\\n    address public immutable crvLp;\\n    address public immutable crvGauge;\\n\\n    constructor(\\n        address _pool,\\n        address _lp,\\n        address _gauge\\n    ) {\\n        require(_pool != address(0x0), \\\"CRVMgr: invalid curve pool\\\");\\n        require(_lp != address(0x0), \\\"CRVMgr: invalid lp token\\\");\\n        require(_gauge != address(0x0), \\\"CRVMgr: invalid gauge\\\");\\n\\n        crvPool = IStableSwapUnderlying(_pool);\\n        crvLp = _lp;\\n        crvGauge = _gauge;\\n    }\\n\\n    function _minimumLpPrice(uint256 _safeRate) internal view returns (uint256) {\\n        return ((crvPool.get_virtual_price() * _safeRate) / 1e18);\\n    }\\n\\n    function _withdrawAsFromCrvPool(\\n        uint256 _lpAmount,\\n        uint256 _minAmt,\\n        uint256 i\\n    ) internal virtual {\\n        crvPool.remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(i)), _minAmt);\\n    }\\n\\n    function _withdrawAllAs(uint256 i) internal virtual {\\n        uint256 lpAmt = IERC20(crvLp).balanceOf(address(this));\\n        if (lpAmt != 0) {\\n            crvPool.remove_liquidity_one_coin(lpAmt, SafeCast.toInt128(int256(i)), 0);\\n        }\\n    }\\n\\n    function calcWithdrawLpAs(uint256 _amtNeeded, uint256 i)\\n        public\\n        view\\n        returns (uint256 lpToWithdraw, uint256 unstakeAmt)\\n    {\\n        uint256 lp = getLp();\\n        uint256 tlp = totalLp();\\n        lpToWithdraw = (_amtNeeded * tlp) / getLpValueAs(tlp, i);\\n        lpToWithdraw = (lpToWithdraw > tlp) ? tlp : lpToWithdraw;\\n        if (lpToWithdraw > lp) {\\n            unstakeAmt = lpToWithdraw - lp;\\n        }\\n    }\\n\\n    function getLpValueAs(uint256 _lpAmount, uint256 i) public view virtual returns (uint256) {\\n        return (_lpAmount != 0) ? crvPool.calc_withdraw_one_coin(_lpAmount, SafeCast.toInt128(int256(i))) : 0;\\n    }\\n\\n    // While this is inaccurate in terms of slippage, this gives us the\\n    // best estimate (least manipulatable value) to calculate share price\\n    function getLpValue(uint256 _lpAmount) public view virtual returns (uint256) {\\n        return (_lpAmount != 0) ? (crvPool.get_virtual_price() * _lpAmount) / 1e18 : 0;\\n    }\\n\\n    function setCheckpoint() external {\\n        _setCheckpoint();\\n    }\\n\\n    // requires that gauge has approval for lp token\\n    function _stakeAllLp() internal virtual {\\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\\n        if (balance != 0) {\\n            ILiquidityGaugeV2(crvGauge).deposit(balance);\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal virtual {\\n        _unstakeLp(IERC20(crvGauge).balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLp(uint256 _amount) internal virtual {\\n        if (_amount != 0) {\\n            ILiquidityGaugeV2(crvGauge).withdraw(_amount);\\n        }\\n    }\\n\\n    function _claimRewards() internal virtual {\\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\\n    }\\n\\n    function _setCheckpoint() internal virtual {\\n        ILiquidityGaugeV2(crvGauge).user_checkpoint(address(this));\\n    }\\n\\n    function totalStaked() public view virtual returns (uint256 total) {\\n        total = IERC20(crvGauge).balanceOf(address(this));\\n    }\\n\\n    function totalLp() public view virtual returns (uint256 total) {\\n        total = getLp() + IERC20(crvGauge).balanceOf(address(this));\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function getLp() public view virtual returns (uint256 total) {\\n        total = IERC20(crvLp).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xcd71fa956116af5443a2ea5638c1e181686c0b0da01b964540185f16d2ffbc47\",\"license\":\"MIT\"},\"contracts/strategies/curve/CrvPoolStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"./CrvBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\\nabstract contract CrvPoolStrategyBase is CrvBase, Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    mapping(address => bool) internal reservedToken;\\n\\n    uint256 public immutable collIdx;\\n    uint256 public usdRate;\\n    uint256 public usdRateTimestamp;\\n\\n    address[] public coins;\\n    uint256[] public coinDecimals;\\n    address[] public rewardTokens;\\n    bool public depositError;\\n\\n    uint256 public crvSlippage = 10; // 10000 is 100%; 10 is 0.1%\\n    uint256 public decimalConversionFactor; // It will be used in converting value to/from 18 decimals\\n\\n    // No. of pooled tokens in the Pool\\n    uint256 internal immutable n;\\n    event UpdatedCrvSlippage(uint256 oldCrvSlippage, uint256 newCrvSlippage);\\n\\n    event DepositFailed(string reason);\\n\\n    constructor(\\n        address _pool,\\n        address _crvPool,\\n        address _crvLp,\\n        address _crvGauge,\\n        address _swapManager,\\n        uint256 _collateralIdx,\\n        uint256 _n,\\n        string memory _name\\n    )\\n        CrvBase(_crvPool, _crvLp, _crvGauge) // 3Pool Manager\\n        Strategy(_pool, _swapManager, _crvLp)\\n    {\\n        require(_collateralIdx < _n, \\\"invalid-collateral\\\");\\n\\n        n = _n;\\n        reservedToken[_crvLp] = true;\\n        reservedToken[CRV] = true;\\n        collIdx = _collateralIdx;\\n        _init(_crvPool, _n);\\n        require(coins[_collateralIdx] == address(IVesperPool(_pool).token()), \\\"collateral-mismatch\\\");\\n        // Assuming token supports 18 or less decimals. _init will initialize coins array\\n        uint256 _decimals = IERC20Metadata(coins[_collateralIdx]).decimals();\\n        decimalConversionFactor = 10**(18 - _decimals);\\n        NAME = _name;\\n        rewardTokens.push(CRV);\\n    }\\n\\n    /// @dev Rewards token in gauge can be updated any time. Governor can set reward tokens\\n    /// Different version of gauge has different method to read reward tokens better governor set it\\n    function setRewardTokens(address[] memory _rewardTokens) external virtual onlyGovernor {\\n        rewardTokens = _rewardTokens;\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            require(\\n                _rewardTokens[i] != receiptToken &&\\n                    _rewardTokens[i] != address(collateralToken) &&\\n                    _rewardTokens[i] != pool &&\\n                    _rewardTokens[i] != crvLp,\\n                \\\"Invalid reward token\\\"\\n            );\\n            reservedToken[_rewardTokens[i]] = true;\\n        }\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n        _setupOracles();\\n    }\\n\\n    function updateCrvSlippage(uint256 _newCrvSlippage) external onlyGovernor {\\n        require(_newCrvSlippage < 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedCrvSlippage(crvSlippage, _newCrvSlippage);\\n        crvSlippage - _newCrvSlippage;\\n    }\\n\\n    /// @dev Claimable rewards estimated into pool's collateral value\\n    function claimableRewardsInCollateral() public view virtual returns (uint256 rewardAsCollateral) {\\n        //Total Mintable - Previously minted\\n        uint256 claimable =\\n            ILiquidityGaugeV2(crvGauge).integrate_fraction(address(this)) -\\n                ITokenMinter(CRV_MINTER).minted(address(this), crvGauge);\\n        if (claimable != 0) {\\n            (, rewardAsCollateral, ) = swapManager.bestOutputFixedInput(CRV, address(collateralToken), claimable);\\n        }\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals.\\n    function convertFrom18(uint256 _amount) public view returns (uint256) {\\n        return _amount / decimalConversionFactor;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return reservedToken[_token];\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value) {\\n        _value =\\n            collateralToken.balanceOf(address(this)) +\\n            convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage)) +\\n            claimableRewardsInCollateral();\\n    }\\n\\n    function _setupOracles() internal virtual override {\\n        _safeCreateOrUpdateOracle(CRV, WETH);\\n        for (uint256 i = 0; i < n; i++) {\\n            _safeCreateOrUpdateOracle(coins[i], WETH);\\n        }\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            _safeCreateOrUpdateOracle(rewardTokens[i], WETH);\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates Oracle pair preventing revert if it doesn't exist in a DEX\\n     */\\n    function _safeCreateOrUpdateOracle(address _tokenA, address _tokenB) internal {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            // solhint-disable no-empty-blocks\\n            try swapManager.createOrUpdateOracle(_tokenA, _tokenB, oraclePeriod, i) {\\n                break;\\n            } catch Error(\\n                string memory /* reason */\\n            ) {}\\n            // solhint-enable no-empty-blocks\\n        }\\n    }\\n\\n    // given the rates of 3 stablecoins compared with a common denominator\\n    // return the lowest divided by the highest\\n    function _getSafeUsdRate() internal returns (uint256) {\\n        // use a stored rate if we've looked it up recently\\n        if (usdRateTimestamp > block.timestamp - oraclePeriod && usdRate != 0) return usdRate;\\n        // otherwise, calculate a rate and store it.\\n        uint256 lowest;\\n        uint256 highest;\\n        for (uint256 i = 0; i < n; i++) {\\n            // get the rate for $1\\n            (uint256 rate, bool isValid) = _consultOracle(coins[i], WETH, 10**coinDecimals[i]);\\n            if (isValid) {\\n                if (lowest == 0 || rate < lowest) {\\n                    lowest = rate;\\n                }\\n                if (highest < rate) {\\n                    highest = rate;\\n                }\\n            }\\n        }\\n        // We only need to check one of them because if a single valid rate is returned,\\n        // highest == lowest and highest > 0 && lowest > 0\\n        require(lowest != 0, \\\"no-oracle-rates\\\");\\n        usdRateTimestamp = block.timestamp;\\n        usdRate = (lowest * 1e18) / highest;\\n        return usdRate;\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(crvPool), _amount);\\n        for (uint256 j = 0; j < swapManager.N_DEX(); j++) {\\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\\n                IERC20(rewardTokens[i]).safeApprove(address(swapManager.ROUTERS(j)), _amount);\\n            }\\n            collateralToken.safeApprove(address(swapManager.ROUTERS(j)), _amount);\\n        }\\n        IERC20(crvLp).safeApprove(crvGauge, _amount);\\n    }\\n\\n    function _init(address _crvPool, uint256 _n) internal virtual {\\n        for (uint256 i = 0; i < _n; i++) {\\n            coins.push(IStableSwapUnderlying(_crvPool).coins(i));\\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\\n        }\\n    }\\n\\n    function _reinvest() internal override {\\n        depositError = false;\\n        uint256 amt = collateralToken.balanceOf(address(this));\\n        depositError = !_depositToCurve(amt);\\n        _stakeAllLp();\\n    }\\n\\n    function _depositToCurve(uint256 amt) internal virtual returns (bool) {\\n        if (amt != 0) {\\n            uint256[3] memory depositAmounts;\\n            depositAmounts[collIdx] = amt;\\n            uint256 expectedOut =\\n                _calcAmtOutAfterSlippage(\\n                    IStableSwap3xUnderlying(address(crvPool)).calc_token_amount(depositAmounts, true),\\n                    crvSlippage\\n                );\\n            uint256 minLpAmount =\\n                ((amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\\n            if (expectedOut > minLpAmount) minLpAmount = expectedOut;\\n            // solhint-disable-next-line no-empty-blocks\\n            try IStableSwap3xUnderlying(address(crvPool)).add_liquidity(depositAmounts, minLpAmount) {} catch Error(\\n                string memory reason\\n            ) {\\n                emit DepositFailed(reason);\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        // This adds some gas but will save loss on exchange fees\\n        uint256 balanceHere = collateralToken.balanceOf(address(this));\\n        if (_amount > balanceHere) {\\n            _unstakeAndWithdrawAsCollateral(_amount - balanceHere);\\n        }\\n        collateralToken.safeTransfer(pool, _amount);\\n    }\\n\\n    function _unstakeAndWithdrawAsCollateral(uint256 _amount) internal returns (uint256 toWithdraw) {\\n        if (_amount == 0) return 0;\\n        uint256 i = collIdx;\\n        (uint256 lpToWithdraw, uint256 unstakeAmt) = calcWithdrawLpAs(_amount, i);\\n        _unstakeLp(unstakeAmt);\\n        uint256 minAmtOut =\\n            convertFrom18(\\n                (lpToWithdraw * _calcAmtOutAfterSlippage(_minimumLpPrice(_getSafeUsdRate()), crvSlippage)) / 1e18\\n            );\\n        _withdrawAsFromCrvPool(lpToWithdraw, minAmtOut, i);\\n        toWithdraw = collateralToken.balanceOf(address(this));\\n        if (toWithdraw > _amount) toWithdraw = _amount;\\n    }\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     */\\n    function _beforeMigration(\\n        address /*_newStrategy*/\\n    ) internal override {\\n        _unstakeAllLp();\\n    }\\n\\n    /**\\n     * @notice Curve pool may have more than one reward token. Child contract should override _claimRewards\\n     */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        _claimRewards();\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            uint256 _amt = IERC20(rewardTokens[i]).balanceOf(address(this));\\n            if (_amt != 0) {\\n                uint256 _minAmtOut;\\n                if (swapSlippage < 10000) {\\n                    (uint256 _minWethOut, bool _isValid) = _consultOracle(rewardTokens[i], WETH, _amt);\\n                    (uint256 _minTokenOut, bool _isValidTwo) = _consultOracle(WETH, _toToken, _minWethOut);\\n                    require(_isValid, \\\"stale-reward-oracle\\\");\\n                    require(_isValidTwo, \\\"stale-collateral-oracle\\\");\\n                    _minAmtOut = _calcAmtOutAfterSlippage(_minTokenOut, swapSlippage);\\n                }\\n                _safeSwap(rewardTokens[i], _toToken, _amt, _minAmtOut);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @param _extra additional amount to unstake and withdraw, in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt, uint256 _extra) internal returns (uint256 _payback) {\\n        _payback = _unstakeAndWithdrawAsCollateral(_excessDebt + _extra);\\n        // we dont want to return a value greater than we need to\\n        if (_payback > _excessDebt) _payback = _excessDebt;\\n    }\\n\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage));\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    function _realizeGross(uint256 _totalDebt)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _toUnstake\\n        )\\n    {\\n        uint256 baseline = collateralToken.balanceOf(address(this));\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 newBalance = collateralToken.balanceOf(address(this));\\n        _profit = newBalance - baseline;\\n\\n        uint256 _collateralBalance =\\n            baseline + convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage));\\n        if (_collateralBalance > _totalDebt) {\\n            _profit += _collateralBalance - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n\\n        if (_profit > _loss) {\\n            _profit = _profit - _loss;\\n            _loss = 0;\\n            if (_profit > newBalance) _toUnstake = _profit - newBalance;\\n        } else {\\n            _loss = _loss - _profit;\\n            _profit = 0;\\n        }\\n    }\\n\\n    function _generateReport()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        uint256 _toUnstake;\\n        (_profit, _loss, _toUnstake) = _realizeGross(_totalDebt);\\n        // only make call to unstake and withdraw once\\n        _payback = _liquidate(_excessDebt, _toUnstake);\\n    }\\n\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n        if (!depositError) {\\n            uint256 _depositLoss = _realizeLoss(IVesperPool(pool).totalDebtOf(address(this)));\\n            IVesperPool(pool).reportLoss(_depositLoss);\\n        }\\n    }\\n\\n    // Unused\\n    /* solhint-disable no-empty-blocks */\\n\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\\n\\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {}\\n}\\n\",\"keccak256\":\"0x0f8374a181b598da4c82a637b1917f680716a11049496126ae25dc96f440bd28\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a0604052600080546001600160a01b031990811673d533a949740bb3306d119cc777fa900ba034cd521782556001805490911673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2179055610e10600555600655612710600755600a6012553480156200006d57600080fd5b506040516200728838038062007288833981016040819052620000909162000e7d565b838373803a2b40c5a9bb2b86dd630b274fa2a9202874c2738474ddbe98f5aa3179b3b3f5942d724afcdec9f6731aef73d49dedc4b1778d0706583995958dc862e6735f626c30ec1215f4edcc9982265e8b1f411d135287600e8884828a8a8a8a858a8a89878585858a8660048787848789818962000112565b60405180910390fd5b6001600160a01b0382166200016a5760405162461bcd60e51b815260206004820152601860248201527f4352564d67723a20696e76616c6964206c7020746f6b656e0000000000000000604482015260640162000109565b6001600160a01b038116620001c25760405162461bcd60e51b815260206004820152601560248201527f4352564d67723a20696e76616c69642067617567650000000000000000000000604482015260640162000109565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526001600160a01b0383166200023c5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f000000000000000000000000604482015260640162000109565b6001600160a01b038216620002895760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640162000109565b600480546001600160a01b0319166001600160a01b03848116919091178255606085901b6001600160601b0319166101005260408051637e062a3560e11b815290519186169263fc0c546a928282019260209290829003018186803b158015620002f257600080fd5b505afa15801562000307573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032d919062000dc1565b60601b6001600160601b03191660e052600280546001600160a01b0319166001600160a01b0383161790556200037a620003643390565b60086200099260201b620022a41790919060201c565b620003bc5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640162000109565b505050818310620004055760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000109565b6101408290526001600160a01b038681166000908152600b60205260408082208054600160ff1991821681179092558354909416835291208054909216179055610120839052620004578783620009b2565b876001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200049157600080fd5b505afa158015620004a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cc919062000dc1565b6001600160a01b0316600e8481548110620004f757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316146200055b5760405162461bcd60e51b815260206004820152601360248201527f636f6c6c61746572616c2d6d69736d6174636800000000000000000000000000604482015260640162000109565b6000600e84815481106200057f57634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163313ce56760e01b815290516001600160a01b039092169263313ce56792600480840193829003018186803b158015620005c957600080fd5b505afa158015620005de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000604919062000f89565b60ff16905062000616816012620010e1565b6200062390600a62000ff9565b60135581516200063b90600a90602085019062000d1b565b50601060008054906101000a90046001600160a01b03169080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050505050836001600160a01b0316866001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620006e557600080fd5b505afa158015620006fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000720919062000dc1565b6001600160a01b031614620007785760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642d6465706f7369742d636f6e74726163740000000000000000604482015260640162000109565b85601460006101000a8154816001600160a01b0302191690836001600160a01b03160217905550836001600160a01b0316836001600160a01b03166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b158015620007e357600080fd5b505afa158015620007f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200081e919062000dc1565b6001600160a01b031614620008665760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642d676175676560981b604482015260640162000109565b5050604051631526fe2760e01b8152600481018890526000965086955073f403c135812408bfbe8713b5a23a04b3d48aae319450631526fe2793506024019150620008ae9050565b60c06040518083038186803b158015620008c757600080fd5b505afa158015620008dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000902919062000de7565b5050935050509150836001600160a01b0316826001600160a01b031614620009625760405162461bcd60e51b815260206004820152601260248201527134b731b7b93932b1ba16b63816ba37b5b2b760711b604482015260640162000109565b60601b6001600160601b03191661016052506101805250506001600655506200119b9a5050505050505050505050565b6000620009a9836001600160a01b03841662000cc9565b90505b92915050565b60405163c661065760e01b815260006004820152600e906001600160a01b0384169063c66106579060240160206040518083038186803b158015620009f657600080fd5b505afa15801562000a0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a31919062000dc1565b81546001810183556000928352602083200180546001600160a01b0319166001600160a01b0392909216919091179055600e8054600f929062000a8457634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163313ce56760e01b815290516001600160a01b039092169263313ce56792600480840193829003018186803b15801562000ace57600080fd5b505afa15801562000ae3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b09919062000f89565b815460018101835560009283526020832060ff9092169101555b600381101562000cc45760405163c661065760e01b815260048101829052600e9073bebc44782c7db0a1a60cb6fe97d0b483032ff1c79063c66106579060240160206040518083038186803b15801562000b7c57600080fd5b505afa15801562000b91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bb7919062000dc1565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055600e8054600f91908390811062000c1057634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163313ce56760e01b815290516001600160a01b039092169263313ce56792600480840193829003018186803b15801562000c5a57600080fd5b505afa15801562000c6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c95919062000f89565b81546001810183556000928352602090922060ff9091169101558062000cbb8162001138565b91505062000b23565b505050565b600081815260018301602052604081205462000d1257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620009ac565b506000620009ac565b82805462000d2990620010fb565b90600052602060002090601f01602090048101928262000d4d576000855562000d98565b82601f1062000d6857805160ff191683800117855562000d98565b8280016001018555821562000d98579182015b8281111562000d9857825182559160200191906001019062000d7b565b5062000da692915062000daa565b5090565b5b8082111562000da6576000815560010162000dab565b60006020828403121562000dd3578081fd5b815162000de08162001182565b9392505050565b60008060008060008060c0878903121562000e00578182fd5b865162000e0d8162001182565b602088015190965062000e208162001182565b604088015190955062000e338162001182565b606088015190945062000e468162001182565b608088015190935062000e598162001182565b60a0880151909250801515811462000e6f578182fd5b809150509295509295509295565b6000806000806080858703121562000e93578384fd5b845162000ea08162001182565b8094505060208086015162000eb58162001182565b6040870151606088015191955093506001600160401b038082111562000ed9578384fd5b818801915088601f83011262000eed578384fd5b81518181111562000f025762000f026200116c565b604051601f8201601f19908116603f0116810190838211818310171562000f2d5762000f2d6200116c565b816040528281528b8684870101111562000f45578687fd5b8693505b8284101562000f68578484018601518185018701529285019262000f49565b8284111562000f7957868684830101525b989b979a50959850505050505050565b60006020828403121562000f9b578081fd5b815160ff8116811462000de0578182fd5b80825b600180861162000fc0575062000ff0565b81870482111562000fd55762000fd562001156565b8086161562000fe357918102915b9490941c93800262000faf565b94509492505050565b6000620009a96000198484600082620010155750600162000de0565b81620010245750600062000de0565b81600181146200103d576002811462001048576200107c565b600191505062000de0565b60ff8411156200105c576200105c62001156565b6001841b91508482111562001075576200107562001156565b5062000de0565b5060208310610133831016604e8410600b8410161715620010b4575081810a83811115620010ae57620010ae62001156565b62000de0565b620010c3848484600162000fac565b808604821115620010d857620010d862001156565b02949350505050565b600082821015620010f657620010f662001156565b500390565b600181811c908216806200111057607f821691505b602082108114156200113257634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200114f576200114f62001156565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200119857600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c61012051610140516101605160601c61018051615ea3620013e56000396000818161074501526143cd01526000818161061601528181610cf7015281816115da015281816122d4015281816123e30152818161256b015281816127730152818161282201528181612b1201528181612bc101528181614535015281816149b20152615139015260008181612ecb0152614ab901526000818161044301528181613c6401528181613fdc0152818161402a015261411a015260008181610395015281816107f3015281816109f101528181610e2a01528181610f8d015281816110990152818161124c015281816114280152818161149d0152818161155501528181611787015281816119dd01528181611acd01528181611b6a01528181611dc701528181613078015281816131c001528181613260015261469c01526000818161066b01528181610b9301528181611cfa01528181611d9e01528181611fc8015281816120ce01528181612fa6015281816130560152818161334601528181613a7e01528181613cf601528181613d9a01528181613e3b01528181613e790152818161467a015281816146ce01526149010152600081816107ab01528181613131015261496a01526000818161058801528181610d930152818161167901528181612e6601528181613ab8015281816143310152614948015260008181610692015281816109440152818161408a0152818161417b015281816146f00152614c1e0152615ea36000f3fe608060405234801561001057600080fd5b50600436106103195760003560e01c8063817b1cd2116101a9578063c609d46c116100ef578063e00af4a71161009d578063e00af4a71461072d578063e529ee9514610740578063e645c20214610767578063ec78e8321461076f578063fb589de214610782578063fc0c546a14610795578063fd57a4df146107a6578063ffa1ad74146107cd57610319565b8063c609d46c146106c7578063c6610657146106da578063cd2d7ebe146106ed578063ce5494bb146106f6578063d2c35ce814610709578063d4c3eea01461071c578063d572fd7f1461072457610319565b8063a3f4df7e11610157578063a3f4df7e146105fc578063a7404b7014610611578063a923b2a614610638578063aa1018861461064b578063b026e22714610653578063b2016bd414610666578063b20fdc0d1461068d578063c415b95c146106b457610319565b8063817b1cd2146105aa57806385cf1c55146105b25780638fe91ffb146105ba578063945c9142146105c3578063951dc22c146105d657806396dd5a78146105eb57806399b71d5c146105f457610319565b806342189c8f1161026e57806374db9ad41161021c57806374db9ad414610506578063759cb53b1461052157806375b0ffd11461053c57806379b37a861461055757806379d5279f146105605780637bb7bed1146105685780637d7c2a1c1461057b5780637f44579b1461058357610319565b806342189c8f14610478578063440d7248146104815780634c36fad7146104ad57806367f5e4b8146104c05780636fe702c0146104d3578063709d039d146104e057806372db30f3146104f357610319565b8063201e81a8116102cb578063201e81a8146103d5578063242c135d146103e85780632e1a7d4d146103f0578063319a444d14610403578063379173bb1461042b57806337d265db1461043e5780634032b72b1461046557610319565b806304f4efc51461031e578063058062b3146103335780630acd095b1461035957806314ae9f2e1461037d57806316f0115b146103905780631aedeabe146103c45780631eb69b77146103cd575b600080fd5b61033161032c36600461581a565b6107f1565b005b61034661034136600461581a565b61092a565b6040519081526020015b60405180910390f35b60145461036d90600160a01b900460ff1681565b6040519015158152602001610350565b61033161038b3660046155bd565b6109ef565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6040516103509190615933565b61034660075481565b610346610b01565b6103316103e33660046155f5565b610c7a565b610346610cdd565b6103316103fe36600461581a565b610e27565b61041661041136600461584a565b610e78565b60408051928352602083019190915201610350565b61034661043936600461584a565b610ee2565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6103316104733660046155bd565b610f8b565b61034660055481565b61036d61048f3660046155bd565b6001600160a01b03166000908152600b602052604090205460ff1690565b6103316104bb3660046155bd565b611097565b6103316104ce36600461581a565b61124a565b60115461036d9060ff1681565b6004546103b7906001600160a01b031681565b61034661050136600461581a565b61136d565b6103b773d061d61a4d941c39e5453435b6345dc261c2fce081565b6103b7734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b6103b773f403c135812408bfbe8713b5a23a04b3d48aae3181565b610346600c5481565b61033161138e565b6103b761057636600461581a565b611398565b6103316113c2565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6103466115c0565b61034661165f565b61034660135481565b6000546103b7906001600160a01b031681565b6105de6116ae565b604051610350919061596b565b610346600d5481565b6103316116bd565b6106046116f7565b60405161035091906159f0565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b61033161064636600461584a565b611785565b6103316119ae565b6014546103b7906001600160a01b031681565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6003546103b7906001600160a01b031681565b6103316106d53660046157e2565b6119db565b6103b76106e836600461581a565b611aba565b61034660065481565b6103316107043660046155bd565b611aca565b6103316107173660046155bd565b611dc5565b610346611f8e565b61034660125481565b61033161073b3660046155bd565b612057565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b61034661228a565b6002546103b7906001600160a01b031681565b61034661079036600461581a565b612294565b6002546001600160a01b03166103b7565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b610604604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561084a57600080fd5b505afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088291906155d9565b6001600160a01b0316336001600160a01b0316146108bb5760405162461bcd60e51b81526004016108b290615a83565b60405180910390fd5b61271081106108dc5760405162461bcd60e51b81526004016108b290615a53565b60125460408051918252602082018390527f92a63de30132f370b1c9f477f770f1e326f1423d1b569641a4728fa610569f86910160405180910390a1806012546109269190615cb7565b5050565b6000816109385760006109e7565b670de0b6b3a7640000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d39190615832565b6109dd9190615c98565b6109e79190615b64565b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4857600080fd5b505afa158015610a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8091906155d9565b6001600160a01b0316336001600160a01b031614610ab05760405162461bcd60e51b81526004016108b290615a83565b610abb6008826122b9565b610afe5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016108b2565b50565b600080610b0c6122ce565b905060005b8151811015610c7557818181518110610b3a57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151600014610c635760045482516000916001600160a01b03169063e8f983c890859085908110610b8557634e487b7160e01b600052603260045260246000fd5b6020026020010151600001517f0000000000000000000000000000000000000000000000000000000000000000868681518110610bd257634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518463ffffffff1660e01b8152600401610bfc93929190615947565b60006040518083038186803b158015610c1457600080fd5b505afa158015610c28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c50919081019061569a565b509150610c5f90508185615b4c565b9350505b80610c6d81615d5b565b915050610b11565b505090565b610c87335b600890612749565b610ca35760405162461bcd60e51b81526004016108b290615a23565b610cab61276b565b8051610cbf9160109160209091019061550b565b50610cca6000612e59565b610cd5600019612e59565b610afe612eaa565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610d2c903090600401615933565b60206040518083038186803b158015610d4457600080fd5b505afa158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190615832565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610dc8903090600401615933565b60206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190615832565b610e229190615b4c565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e6f5760405162461bcd60e51b81526004016108b290615aba565b610afe81612f8c565b6000806000610e8561165f565b90506000610e91610cdd565b9050610e9d8186610ee2565b610ea78288615c98565b610eb19190615b64565b9350808411610ec05783610ec2565b805b935081841115610ed957610ed68285615cb7565b92505b50509250929050565b600082610ef0576000610f82565b6014546001600160a01b031663cc2b27d784610f0b8561309d565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b158015610f4a57600080fd5b505afa158015610f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f829190615832565b90505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c91906155d9565b6001600160a01b0316336001600160a01b03161461104c5760405162461bcd60e51b81526004016108b290615a83565b6110576008826122a4565b610afe5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016108b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156110f057600080fd5b505afa158015611104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112891906155d9565b6001600160a01b0316336001600160a01b0316146111585760405162461bcd60e51b81526004016108b290615a83565b6001600160a01b0381166111a35760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016108b2565b6004546001600160a01b03828116911614156111ee5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016108b2565b6004546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db91906155d9565b6001600160a01b0316336001600160a01b03161461130b5760405162461bcd60e51b81526004016108b290615a83565b61271081111561132d5760405162461bcd60e51b81526004016108b290615a53565b60075460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600755565b600f818154811061137d57600080fd5b600091825260209091200154905081565b61139661311a565b565b601081815481106113a857600080fd5b6000918252602090912001546001600160a01b0316905081565b6113cb33610c7f565b6113e75760405162461bcd60e51b81526004016108b290615a23565b60008060006113f46131b8565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b5050505061148c613322565b60115460ff166115bb57600061153c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016114e79190615933565b60206040518083038186803b1580156114ff57600080fd5b505afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115379190615832565b6133ee565b6040516306eeb69360e51b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ddd6d26090602401600060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b50505050505b505050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061160f903090600401615933565b60206040518083038186803b15801561162757600080fd5b505afa15801561163b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e229190615832565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061160f903090600401615933565b6060610e22600861341f565b90565b6116c633610c7f565b6116e25760405162461bcd60e51b81526004016108b290615a23565b6116ec6000612e59565b611396600019612e59565b600a805461170490615cfa565b80601f016020809104026020016040519081016040528092919081815260200182805461173090615cfa565b801561177d5780601f106117525761010080835404028352916020019161177d565b820191906000526020600020905b81548152906001019060200180831161176057829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156117de57600080fd5b505afa1580156117f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181691906155d9565b6001600160a01b0316336001600160a01b0316146118465760405162461bcd60e51b81526004016108b290615a83565b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b15801561188857600080fd5b505afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c09190615832565b81106119055760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016108b2565b816119105760055491505b603b82116119585760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016108b2565b6005546006546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600591909155600655565b6119b733610c7f565b6119d35760405162461bcd60e51b81526004016108b290615a23565b611396612eaa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3457600080fd5b505afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6c91906155d9565b6001600160a01b0316336001600160a01b031614611a9c5760405162461bcd60e51b81526004016108b290615a83565b60148054911515600160a01b0260ff60a01b19909216919091179055565b600e81815481106113a857600080fd5b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611b125760405162461bcd60e51b81526004016108b290615aba565b6001600160a01b038116611b685760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016108b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bcb57600080fd5b505afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0391906155d9565b6001600160a01b031614611c525760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016108b2565b611c5b8161342c565b6002546040516370a0823160e01b8152611cf49183916001600160a01b03909116906370a0823190611c91903090600401615933565b60206040518083038186803b158015611ca957600080fd5b505afa158015611cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce19190615832565b6002546001600160a01b03169190613434565b610afe817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d449190615933565b60206040518083038186803b158015611d5c57600080fd5b505afa158015611d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d949190615832565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190613434565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1e57600080fd5b505afa158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5691906155d9565b6001600160a01b0316336001600160a01b031614611e865760405162461bcd60e51b81526004016108b290615a83565b6001600160a01b038116611edc5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016108b2565b6003546001600160a01b0382811691161415611f325760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016108b2565b6003546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611f98610b01565b611fb1610790611fa9610341610cdd565b601254613497565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611ffd903090600401615933565b60206040518083038186803b15801561201557600080fd5b505afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d9190615832565b610e189190615b4c565b61206033610c7f565b61207c5760405162461bcd60e51b81526004016108b290615a23565b6003546001600160a01b03166120cc5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016108b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561214e5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016108b2565b6001600160a01b0381166000908152600b602052604090205460ff16156121ae5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016108b2565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156121ee576003546121e9906001600160a01b0316476134ba565b610afe565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061221d903090600401615933565b60206040518083038186803b15801561223557600080fd5b505afa158015612249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226d9190615832565b600354909150610926906001600160a01b03848116911683613434565b6000610e22611f8e565b6000601354826109e79190615b64565b6000610f82836001600160a01b0384166135d3565b6000610f82836001600160a01b038416613622565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b15801561232b57600080fd5b505afa15801561233f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123639190615832565b90506000612372826002615b4c565b6001600160401b0381111561239757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156123dc57816020015b60408051808201909152600080825260208201528152602001906001900390816123b55790505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316628cc262306040518263ffffffff1660e01b815260040161242c9190615933565b60206040518083038186803b15801561244457600080fd5b505afa158015612458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247c9190615832565b905060006124898261373f565b9050604051806040016040528073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b0316815260200183815250836000815181106124de57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b03168152602001828152508360018151811061253c57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b8481101561273f57604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b1580156125b557600080fd5b505afa1580156125c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ed91906155d9565b90506040518060400160405280826001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561263357600080fd5b505afa158015612647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266b91906155d9565b6001600160a01b03168152602001826001600160a01b0316628cc262306040518263ffffffff1660e01b81526004016126a49190615933565b60206040518083038186803b1580156126bc57600080fd5b505afa1580156126d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f49190615832565b905285612702846002615b4c565b8151811061272057634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061273790615d5b565b91505061254a565b5091935050505090565b6001600160a01b03811660009081526001830160205260408120541515610f82565b60606000805b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b1580156127ca57600080fd5b505afa1580156127de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128029190615832565b811015612a0857604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b15801561286c57600080fd5b505afa158015612880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a491906155d9565b905073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156128fd57600080fd5b505afa158015612911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293591906155d9565b6001600160a01b0316141580156129e25750734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561299e57600080fd5b505afa1580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d691906155d9565b6001600160a01b031614155b156129f557826129f181615d5b565b9350505b5080612a0081615d5b565b915050612771565b506000612a16826002615b4c565b6001600160401b03811115612a3b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a64578160200160208202803683370190505b50905073d533a949740bb3306d119cc777fa900ba034cd5281600081518110612a9d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81600181518110612af357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152600260005b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b158015612b6957600080fd5b505afa158015612b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba19190615832565b811015612e5057604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4391906155d9565b905073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612c9c57600080fd5b505afa158015612cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd491906155d9565b6001600160a01b031614158015612d815750734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3d57600080fd5b505afa158015612d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7591906155d9565b6001600160a01b031614155b15612e3d57806001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612dbf57600080fd5b505afa158015612dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df791906155d9565b848481518110612e1757634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015282612e3981615d5b565b9350505b5080612e4881615d5b565b915050612b10565b50909250505090565b612ea16001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673f403c135812408bfbe8713b5a23a04b3d48aae3183613940565b610afe81613a64565b600054600154612ec6916001600160a01b039081169116613ae1565b60005b7f0000000000000000000000000000000000000000000000000000000000000000811015612f4857612f36600e8281548110612f1557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001546001600160a01b039182169116613ae1565b80612f4081615d5b565b915050612ec9565b5060005b601054811015610afe57612f7a60108281548110612f1557634e487b7160e01b600052603260045260246000fd5b80612f8481615d5b565b915050612f4c565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612fdb903090600401615933565b60206040518083038186803b158015612ff357600080fd5b505afa158015613007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302b9190615832565b905080821115613049576130476130428284615cb7565b613c53565b505b6109266001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084613434565b600060016001607f1b031982121580156130ba57506001607f1b82125b6131165760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016108b2565b5090565b604051634b82009360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634b82009390613166903090600401615933565b602060405180830381600087803b15801561318057600080fd5b505af1158015613194573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe91906157fe565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b815260040161320a9190615933565b60206040518083038186803b15801561322257600080fd5b505afa158015613236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325a9190615832565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016132aa9190615933565b60206040518083038186803b1580156132c257600080fd5b505afa1580156132d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fa9190615832565b9050600061330782613d92565b919750955090506133188382613fa8565b9350505050909192565b6011805460ff191690556040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061337b903090600401615933565b60206040518083038186803b15801561339357600080fd5b505afa1580156133a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cb9190615832565b90506133d681613fc8565b6011805460ff19169115919091179055610afe614317565b600080613402610790611fa9610341610cdd565b905082811015613419576134168184615cb7565b91505b50919050565b60606000613416836144b5565b610afe614511565b6040516001600160a01b0383166024820152604481018290526115bb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261459b565b60006127106134a68382615cb7565b6134b09085615c98565b610f829190615b64565b8047101561350a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108b2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613557576040519150601f19603f3d011682016040523d82523d6000602084013e61355c565b606091505b50509050806115bb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108b2565b600081815260018301602052604081205461361a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f85565b506000610f85565b60008181526001830160205260408120548015613735576000613646600183615cb7565b855490915060009061365a90600190615cb7565b90508181146136db57600086600001828154811061368857634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106136b957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806136fa57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610f85565b6000915050610f85565b600080734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b031663aa74e6226040518163ffffffff1660e01b815260040160206040518083038186803b15801561378f57600080fd5b505afa1580156137a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c79190615832565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561381857600080fd5b505afa15801561382c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138509190615832565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b031663d5abeb016040518163ffffffff1660e01b815260040160206040518083038186803b1580156138a157600080fd5b505afa1580156138b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d99190615832565b905060006138e78484615b64565b90506103e8808210156139365760006139008383615cb7565b90508161390d828a615c98565b6139179190615b64565b965060006139258686615cb7565b905080881115613933578097505b50505b5050505050919050565b8015806139c95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561398f57600080fd5b505afa1580156139a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c79190615832565b155b613a345760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108b2565b6040516001600160a01b0383166024820152604481018290526115bb90849063095ea7b360e01b90606401613460565b613a6d8161466d565b601454613aa7906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613940565b601454610afe906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613940565b60005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b158015613b2657600080fd5b505afa158015613b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5e9190615832565b8110156115bb5760048054600554604051630f30f2d360e21b81526001600160a01b03878116948201949094528584166024820152604481019190915260648101849052911690633cc3cb4c90608401602060405180830381600087803b158015613bc857600080fd5b505af1925050508015613bf8575060408051601f3d908101601f19168201909252613bf5918101906155d9565b60015b613c3b57613c04615da2565b806308c379a01415613c2a5750613c19615db9565b80613c245750613c2c565b50613c36565b505b3d6000803e3d6000fd5b613c41565b506115bb565b80613c4b81615d5b565b915050613ae4565b600081613c62575060006109ea565b7f0000000000000000000000000000000000000000000000000000000000000000600080613c908584610e78565b91509150613c9d8161498f565b6000613cd2670de0b6b3a7640000613cbe611fa9613cb9614a82565b614c10565b613cc89086615c98565b6107909190615b64565b9050613cdf838286614c75565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613d2b903090600401615933565b60206040518083038186803b158015613d4357600080fd5b505afa158015613d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d7b9190615832565b945085851115613d89578594505b50505050919050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613de49190615933565b60206040518083038186803b158015613dfc57600080fd5b505afa158015613e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e349190615832565b9050613e5f7f0000000000000000000000000000000000000000000000000000000000000000614cf5565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613eae903090600401615933565b60206040518083038186803b158015613ec657600080fd5b505afa158015613eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613efe9190615832565b9050613f0a8282615cb7565b94506000613f1f610790611fa9610341610cdd565b613f299084615b4c565b905086811115613f4e57613f3d8782615cb7565b613f479087615b4c565b9550613f5b565b613f588188615cb7565b94505b84861115613f8d57613f6d8587615cb7565b95506000945081861115613f8857613f858287615cb7565b93505b613f9e565b613f978686615cb7565b9450600095505b5050509193909250565b6000613fb76130428385615b4c565b905082811115610f85575090919050565b6000811561430f57613fd861556c565b82817f00000000000000000000000000000000000000000000000000000000000000006002811061401957634e487b7160e01b600052603260045260246000fd5b602002015261402661558a565b83817f00000000000000000000000000000000000000000000000000000000000000006004811061406757634e487b7160e01b600052603260045260246000fd5b602002015260405163ed8e84f360e01b8152600090614112906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ed8e84f3906140c290879060019060040161597e565b60206040518083038186803b1580156140da57600080fd5b505afa1580156140ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa99190615832565b90506000600f7f00000000000000000000000000000000000000000000000000000000000000008154811061415757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154601261416e9190615cb7565b61417990600a615bca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156141d257600080fd5b505afa1580156141e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061420a9190615832565b614212614a82565b61421c9089615c98565b6142269190615b64565b6142309190615c98565b90508082111561423d5750805b60145460405162a6cbcd60e21b81526001600160a01b039091169063029b2f349061426e90869085906004016159b8565b600060405180830381600087803b15801561428857600080fd5b505af1925050508015614299575060015b61430a576142a5615da2565b806308c379a01415613c2a57506142ba615db9565b806142c55750613c2c565b7f63299ad14374170063e6f2e5559417926f3a23da67eefa83fc2e9bf9f21e915c816040516142f491906159f0565b60405180910390a16000955050505050506109ea565b505050505b506001919050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190614366903090600401615933565b60206040518083038186803b15801561437e57600080fd5b505afa158015614392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143b69190615832565b90508015610afe576040516321d0683360e11b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290526001604482015273f403c135812408bfbe8713b5a23a04b3d48aae31906343a0d06690606401602060405180830381600087803b15801561443857600080fd5b505af115801561444c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061447091906157fe565b610afe5760405162461bcd60e51b8152602060048201526016602482015275189bdbdcdd195c8b59195c1bdcda5d0b59985a5b195960521b60448201526064016108b2565b60608160000180548060200260200160405190810160405280929190818152602001828054801561450557602002820191906000526020600020905b8154815260200190600101908083116144f1575b50505050509050919050565b6014546040516324f81cd160e11b8152600160a01b90910460ff16151560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349f039a290602401600060405180830381600087803b15801561458157600080fd5b505af1158015614595573d6000803e3d6000fd5b50505050565b60006145f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614f2d9092919063ffffffff16565b8051909150156115bb578080602001905181019061460e91906157fe565b6115bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108b2565b6146c16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613940565b6147156001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613940565b60005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b15801561475a57600080fd5b505afa15801561476e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147929190615832565b81101561493a5760005b6010548110156148765760048054604051636e74a6f760e01b8152918201849052614864916001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156147ee57600080fd5b505afa158015614802573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061482691906155d9565b846010848154811061484857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169190613940565b8061486e81615d5b565b91505061479c565b5060048054604051636e74a6f760e01b8152918201839052614928916001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156148bf57600080fd5b505afa1580156148d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148f791906155d9565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084613940565b8061493281615d5b565b915050614718565b50610afe6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613940565b8015610afe57604051636197390160e11b815260048101829052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c32e720290604401602060405180830381600087803b1580156149fe57600080fd5b505af1158015614a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a3691906157fe565b610afe5760405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d616e642d756e777261702d6661696c656400000000000060448201526064016108b2565b600060055442614a929190615cb7565b600d54118015614aa35750600c5415155b15614ab15750600c546116ba565b60008060005b7f0000000000000000000000000000000000000000000000000000000000000000811015614ba357600080614b63600e8481548110614b0657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600154600f80546001600160a01b03938416939092169187908110614b4757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600a614b5e9190615bca565b614f46565b915091508015614b8e57841580614b7957508482105b15614b82578194505b81841015614b8e578193505b50508080614b9b90615d5b565b915050614ab7565b5081614be35760405162461bcd60e51b815260206004820152600f60248201526e6e6f2d6f7261636c652d726174657360881b60448201526064016108b2565b42600d5580614bfa83670de0b6b3a7640000615c98565b614c049190615b64565b600c8190559250505090565b6000670de0b6b3a7640000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561099b57600080fd5b6014546001600160a01b0316631a4d01d284614c908461309d565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260448101859052606401600060405180830381600087803b158015614cd857600080fd5b505af1158015614cec573d6000803e3d6000fd5b50505050505050565b614cfd61511d565b60005b60105481101561092657600060108281548110614d2d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190614d66903090600401615933565b60206040518083038186803b158015614d7e57600080fd5b505afa158015614d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614db69190615832565b90508015614f1a5760006127106007541015614ed757600080614e1560108681548110614df357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001546001600160a01b03918216911686614f46565b60015491935091506000908190614e36906001600160a01b03168986614f46565b9150915082614e7d5760405162461bcd60e51b81526020600482015260136024820152727374616c652d7265776172642d6f7261636c6560681b60448201526064016108b2565b80614ec45760405162461bcd60e51b81526020600482015260176024820152767374616c652d636f6c6c61746572616c2d6f7261636c6560481b60448201526064016108b2565b614ed082600754613497565b9450505050505b614f1860108481548110614efb57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03168584846151ff565b505b5080614f2581615d5b565b915050614d00565b6060614f3c84846000856153aa565b90505b9392505050565b60008060005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b158015614f8e57600080fd5b505afa158015614fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fc69190615832565b81101561510c57600454600554604080516001600160a01b038a811660208301528981168284015260608201899052608082019390935260a08082018690528251808303909101815260c08201909252600093849316916150339163b67bb24d60e01b919060e0016158e6565b60408051601f198184030181529082905261504d91615917565b6000604051808303816000865af19150503d806000811461508a576040519150601f19603f3d011682016040523d82523d6000602084013e61508f565b606091505b509150915081156150f757600080828060200190518101906150b1919061586b565b5091509150600554426150c49190615cb7565b811180156150d157508115155b156150e6575094506001935061511592505050565b600080965096505050505050615115565b5050808061510490615d5b565b915050614f4c565b50600080915091505b935093915050565b604051637050ccd960e01b8152306004820152600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637050ccd990604401602060405180830381600087803b15801561518557600080fd5b505af1158015615199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151bd91906157fe565b6113965760405162461bcd60e51b81526020600482015260136024820152721c995dd85c990b58db185a5b4b59985a5b1959606a1b60448201526064016108b2565b60048054604051631d1f307960e31b8152600092839283926001600160a01b039091169163e8f983c891615239918b918b918b9101615947565b60006040518083038186803b15801561525157600080fd5b505afa158015615265573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261528d919081019061569a565b92509250925083600014156152a157600193505b8115614cec5760048054604051636e74a6f760e01b81529182018390526001600160a01b031690636e74a6f79060240160206040518083038186803b1580156152e957600080fd5b505afa1580156152fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061532191906155d9565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401615354959493929190615aed565b600060405180830381600087803b15801561536e57600080fd5b505af1158015615382573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115b59190810190615752565b60608247101561540b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108b2565b843b6154595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108b2565b600080866001600160a01b031685876040516154759190615917565b60006040518083038185875af1925050503d80600081146154b2576040519150601f19603f3d011682016040523d82523d6000602084013e6154b7565b606091505b50915091506154c78282866154d2565b979650505050505050565b606083156154e1575081614f3f565b8251156154f15782518084602001fd5b8160405162461bcd60e51b81526004016108b291906159f0565b828054828255906000526020600020908101928215615560579160200282015b8281111561556057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061552b565b506131169291506155a8565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b8082111561311657600081556001016155a9565b6000602082840312156155ce578081fd5b8135614f3f81615e4a565b6000602082840312156155ea578081fd5b8151614f3f81615e4a565b60006020808385031215615607578182fd5b82356001600160401b0381111561561c578283fd5b8301601f8101851361562c578283fd5b803561563781615b29565b6040516156448282615d2f565b8281528481019150838501600584901b85018601891015615663578687fd5b8694505b8385101561568e57803561567a81615e4a565b835260019490940193918501918501615667565b50979650505050505050565b6000806000606084860312156156ae578182fd5b83516001600160401b038111156156c3578283fd5b8401601f810186136156d3578283fd5b805160206156e082615b29565b6040516156ed8282615d2f565b8381528281019150848301600585901b860184018b101561570c578788fd5b8795505b8486101561573757805161572381615e4a565b835260019590950194918301918301615710565b50918801516040909801519199979850909695505050505050565b60006020808385031215615764578182fd5b82516001600160401b03811115615779578283fd5b8301601f81018513615789578283fd5b805161579481615b29565b6040516157a18282615d2f565b8281528481019150838501600584901b850186018910156157c0578687fd5b8694505b8385101561568e5780518352600194909401939185019185016157c4565b6000602082840312156157f3578081fd5b8135614f3f81615e5f565b60006020828403121561580f578081fd5b8151614f3f81615e5f565b60006020828403121561582b578081fd5b5035919050565b600060208284031215615843578081fd5b5051919050565b6000806040838503121561585c578182fd5b50508035926020909101359150565b60008060006060848603121561587f578283fd5b8351925060208401519150604084015161589881615e5f565b809150509250925092565b6000815180845260208085019450808401835b838110156158db5781516001600160a01b0316875295820195908201906001016158b6565b509495945050505050565b6001600160e01b0319831681528151600090615909816004850160208701615cce565b919091016004019392505050565b60008251615929818460208701615cce565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208252610f8260208301846158a3565b60608101818460005b60028110156159a6578151835260209283019290910190600101615987565b50505082151560408301529392505050565b60a08101818460005b60048110156159e05781518352602092830192909101906001016159c1565b5050508260808301529392505050565b6000602082528251806020840152615a0f816040850160208701615cce565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b602080825260169082015275696e76616c69642d736c6970706167652d76616c756560501b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600086825285602083015260a06040830152615b0c60a08301866158a3565b6001600160a01b0394909416606083015250608001529392505050565b60006001600160401b03821115615b4257615b42615d8c565b5060051b60200190565b60008219821115615b5f57615b5f615d76565b500190565b600082615b7f57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611615b965750615bc1565b818704821115615ba857615ba8615d76565b80861615615bb557918102915b9490941c938002615b87565b94509492505050565b6000610f826000198484600082615be357506001614f3f565b81615bf057506000614f3f565b8160018114615c065760028114615c1057615c3d565b6001915050614f3f565b60ff841115615c2157615c21615d76565b6001841b915084821115615c3757615c37615d76565b50614f3f565b5060208310610133831016604e8410600b8410161715615c70575081810a83811115615c6b57615c6b615d76565b614f3f565b615c7d8484846001615b84565b808604821115615c8f57615c8f615d76565b02949350505050565b6000816000190483118215151615615cb257615cb2615d76565b500290565b600082821015615cc957615cc9615d76565b500390565b60005b83811015615ce9578181015183820152602001615cd1565b838111156145955750506000910152565b600181811c90821680615d0e57607f821691505b6020821081141561341957634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b0381118282101715615d5457615d54615d8c565b6040525050565b6000600019821415615d6f57615d6f615d76565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156116ba57600481823e5160e01c90565b600060443d1015615dc9576116ba565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715615dfa5750505050506116ba565b8285019150815181811115615e14575050505050506116ba565b843d8701016020828501011115615e30575050505050506116ba565b615e3f60208286010187615d2f565b509094505050505090565b6001600160a01b0381168114610afe57600080fd5b8015158114610afe57600080fdfea26469706673582212203c2a90d207ffc59941ea9a2563295463f4b8421f3f7c596f027b3abc13f1dee664736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103195760003560e01c8063817b1cd2116101a9578063c609d46c116100ef578063e00af4a71161009d578063e00af4a71461072d578063e529ee9514610740578063e645c20214610767578063ec78e8321461076f578063fb589de214610782578063fc0c546a14610795578063fd57a4df146107a6578063ffa1ad74146107cd57610319565b8063c609d46c146106c7578063c6610657146106da578063cd2d7ebe146106ed578063ce5494bb146106f6578063d2c35ce814610709578063d4c3eea01461071c578063d572fd7f1461072457610319565b8063a3f4df7e11610157578063a3f4df7e146105fc578063a7404b7014610611578063a923b2a614610638578063aa1018861461064b578063b026e22714610653578063b2016bd414610666578063b20fdc0d1461068d578063c415b95c146106b457610319565b8063817b1cd2146105aa57806385cf1c55146105b25780638fe91ffb146105ba578063945c9142146105c3578063951dc22c146105d657806396dd5a78146105eb57806399b71d5c146105f457610319565b806342189c8f1161026e57806374db9ad41161021c57806374db9ad414610506578063759cb53b1461052157806375b0ffd11461053c57806379b37a861461055757806379d5279f146105605780637bb7bed1146105685780637d7c2a1c1461057b5780637f44579b1461058357610319565b806342189c8f14610478578063440d7248146104815780634c36fad7146104ad57806367f5e4b8146104c05780636fe702c0146104d3578063709d039d146104e057806372db30f3146104f357610319565b8063201e81a8116102cb578063201e81a8146103d5578063242c135d146103e85780632e1a7d4d146103f0578063319a444d14610403578063379173bb1461042b57806337d265db1461043e5780634032b72b1461046557610319565b806304f4efc51461031e578063058062b3146103335780630acd095b1461035957806314ae9f2e1461037d57806316f0115b146103905780631aedeabe146103c45780631eb69b77146103cd575b600080fd5b61033161032c36600461581a565b6107f1565b005b61034661034136600461581a565b61092a565b6040519081526020015b60405180910390f35b60145461036d90600160a01b900460ff1681565b6040519015158152602001610350565b61033161038b3660046155bd565b6109ef565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6040516103509190615933565b61034660075481565b610346610b01565b6103316103e33660046155f5565b610c7a565b610346610cdd565b6103316103fe36600461581a565b610e27565b61041661041136600461584a565b610e78565b60408051928352602083019190915201610350565b61034661043936600461584a565b610ee2565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6103316104733660046155bd565b610f8b565b61034660055481565b61036d61048f3660046155bd565b6001600160a01b03166000908152600b602052604090205460ff1690565b6103316104bb3660046155bd565b611097565b6103316104ce36600461581a565b61124a565b60115461036d9060ff1681565b6004546103b7906001600160a01b031681565b61034661050136600461581a565b61136d565b6103b773d061d61a4d941c39e5453435b6345dc261c2fce081565b6103b7734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b6103b773f403c135812408bfbe8713b5a23a04b3d48aae3181565b610346600c5481565b61033161138e565b6103b761057636600461581a565b611398565b6103316113c2565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6103466115c0565b61034661165f565b61034660135481565b6000546103b7906001600160a01b031681565b6105de6116ae565b604051610350919061596b565b610346600d5481565b6103316116bd565b6106046116f7565b60405161035091906159f0565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b61033161064636600461584a565b611785565b6103316119ae565b6014546103b7906001600160a01b031681565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6003546103b7906001600160a01b031681565b6103316106d53660046157e2565b6119db565b6103b76106e836600461581a565b611aba565b61034660065481565b6103316107043660046155bd565b611aca565b6103316107173660046155bd565b611dc5565b610346611f8e565b61034660125481565b61033161073b3660046155bd565b612057565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b61034661228a565b6002546103b7906001600160a01b031681565b61034661079036600461581a565b612294565b6002546001600160a01b03166103b7565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b610604604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561084a57600080fd5b505afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088291906155d9565b6001600160a01b0316336001600160a01b0316146108bb5760405162461bcd60e51b81526004016108b290615a83565b60405180910390fd5b61271081106108dc5760405162461bcd60e51b81526004016108b290615a53565b60125460408051918252602082018390527f92a63de30132f370b1c9f477f770f1e326f1423d1b569641a4728fa610569f86910160405180910390a1806012546109269190615cb7565b5050565b6000816109385760006109e7565b670de0b6b3a7640000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d39190615832565b6109dd9190615c98565b6109e79190615b64565b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4857600080fd5b505afa158015610a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8091906155d9565b6001600160a01b0316336001600160a01b031614610ab05760405162461bcd60e51b81526004016108b290615a83565b610abb6008826122b9565b610afe5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016108b2565b50565b600080610b0c6122ce565b905060005b8151811015610c7557818181518110610b3a57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151600014610c635760045482516000916001600160a01b03169063e8f983c890859085908110610b8557634e487b7160e01b600052603260045260246000fd5b6020026020010151600001517f0000000000000000000000000000000000000000000000000000000000000000868681518110610bd257634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040518463ffffffff1660e01b8152600401610bfc93929190615947565b60006040518083038186803b158015610c1457600080fd5b505afa158015610c28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c50919081019061569a565b509150610c5f90508185615b4c565b9350505b80610c6d81615d5b565b915050610b11565b505090565b610c87335b600890612749565b610ca35760405162461bcd60e51b81526004016108b290615a23565b610cab61276b565b8051610cbf9160109160209091019061550b565b50610cca6000612e59565b610cd5600019612e59565b610afe612eaa565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610d2c903090600401615933565b60206040518083038186803b158015610d4457600080fd5b505afa158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190615832565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610dc8903090600401615933565b60206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190615832565b610e229190615b4c565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e6f5760405162461bcd60e51b81526004016108b290615aba565b610afe81612f8c565b6000806000610e8561165f565b90506000610e91610cdd565b9050610e9d8186610ee2565b610ea78288615c98565b610eb19190615b64565b9350808411610ec05783610ec2565b805b935081841115610ed957610ed68285615cb7565b92505b50509250929050565b600082610ef0576000610f82565b6014546001600160a01b031663cc2b27d784610f0b8561309d565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b158015610f4a57600080fd5b505afa158015610f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f829190615832565b90505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c91906155d9565b6001600160a01b0316336001600160a01b03161461104c5760405162461bcd60e51b81526004016108b290615a83565b6110576008826122a4565b610afe5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016108b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156110f057600080fd5b505afa158015611104573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112891906155d9565b6001600160a01b0316336001600160a01b0316146111585760405162461bcd60e51b81526004016108b290615a83565b6001600160a01b0381166111a35760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016108b2565b6004546001600160a01b03828116911614156111ee5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016108b2565b6004546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a357600080fd5b505afa1580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db91906155d9565b6001600160a01b0316336001600160a01b03161461130b5760405162461bcd60e51b81526004016108b290615a83565b61271081111561132d5760405162461bcd60e51b81526004016108b290615a53565b60075460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600755565b600f818154811061137d57600080fd5b600091825260209091200154905081565b61139661311a565b565b601081815481106113a857600080fd5b6000918252602090912001546001600160a01b0316905081565b6113cb33610c7f565b6113e75760405162461bcd60e51b81526004016108b290615a23565b60008060006113f46131b8565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b5050505061148c613322565b60115460ff166115bb57600061153c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016114e79190615933565b60206040518083038186803b1580156114ff57600080fd5b505afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115379190615832565b6133ee565b6040516306eeb69360e51b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ddd6d26090602401600060405180830381600087803b1580156115a157600080fd5b505af11580156115b5573d6000803e3d6000fd5b50505050505b505050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061160f903090600401615933565b60206040518083038186803b15801561162757600080fd5b505afa15801561163b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e229190615832565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061160f903090600401615933565b6060610e22600861341f565b90565b6116c633610c7f565b6116e25760405162461bcd60e51b81526004016108b290615a23565b6116ec6000612e59565b611396600019612e59565b600a805461170490615cfa565b80601f016020809104026020016040519081016040528092919081815260200182805461173090615cfa565b801561177d5780601f106117525761010080835404028352916020019161177d565b820191906000526020600020905b81548152906001019060200180831161176057829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156117de57600080fd5b505afa1580156117f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181691906155d9565b6001600160a01b0316336001600160a01b0316146118465760405162461bcd60e51b81526004016108b290615a83565b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b15801561188857600080fd5b505afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c09190615832565b81106119055760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016108b2565b816119105760055491505b603b82116119585760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016108b2565b6005546006546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600591909155600655565b6119b733610c7f565b6119d35760405162461bcd60e51b81526004016108b290615a23565b611396612eaa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3457600080fd5b505afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6c91906155d9565b6001600160a01b0316336001600160a01b031614611a9c5760405162461bcd60e51b81526004016108b290615a83565b60148054911515600160a01b0260ff60a01b19909216919091179055565b600e81815481106113a857600080fd5b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611b125760405162461bcd60e51b81526004016108b290615aba565b6001600160a01b038116611b685760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016108b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bcb57600080fd5b505afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0391906155d9565b6001600160a01b031614611c525760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016108b2565b611c5b8161342c565b6002546040516370a0823160e01b8152611cf49183916001600160a01b03909116906370a0823190611c91903090600401615933565b60206040518083038186803b158015611ca957600080fd5b505afa158015611cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce19190615832565b6002546001600160a01b03169190613434565b610afe817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d449190615933565b60206040518083038186803b158015611d5c57600080fd5b505afa158015611d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d949190615832565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190613434565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1e57600080fd5b505afa158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5691906155d9565b6001600160a01b0316336001600160a01b031614611e865760405162461bcd60e51b81526004016108b290615a83565b6001600160a01b038116611edc5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016108b2565b6003546001600160a01b0382811691161415611f325760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016108b2565b6003546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611f98610b01565b611fb1610790611fa9610341610cdd565b601254613497565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611ffd903090600401615933565b60206040518083038186803b15801561201557600080fd5b505afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d9190615832565b610e189190615b4c565b61206033610c7f565b61207c5760405162461bcd60e51b81526004016108b290615a23565b6003546001600160a01b03166120cc5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016108b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561214e5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016108b2565b6001600160a01b0381166000908152600b602052604090205460ff16156121ae5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016108b2565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156121ee576003546121e9906001600160a01b0316476134ba565b610afe565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061221d903090600401615933565b60206040518083038186803b15801561223557600080fd5b505afa158015612249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226d9190615832565b600354909150610926906001600160a01b03848116911683613434565b6000610e22611f8e565b6000601354826109e79190615b64565b6000610f82836001600160a01b0384166135d3565b6000610f82836001600160a01b038416613622565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b15801561232b57600080fd5b505afa15801561233f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123639190615832565b90506000612372826002615b4c565b6001600160401b0381111561239757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156123dc57816020015b60408051808201909152600080825260208201528152602001906001900390816123b55790505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316628cc262306040518263ffffffff1660e01b815260040161242c9190615933565b60206040518083038186803b15801561244457600080fd5b505afa158015612458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247c9190615832565b905060006124898261373f565b9050604051806040016040528073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b0316815260200183815250836000815181106124de57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b03168152602001828152508360018151811061253c57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b8481101561273f57604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b1580156125b557600080fd5b505afa1580156125c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ed91906155d9565b90506040518060400160405280826001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561263357600080fd5b505afa158015612647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266b91906155d9565b6001600160a01b03168152602001826001600160a01b0316628cc262306040518263ffffffff1660e01b81526004016126a49190615933565b60206040518083038186803b1580156126bc57600080fd5b505afa1580156126d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f49190615832565b905285612702846002615b4c565b8151811061272057634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061273790615d5b565b91505061254a565b5091935050505090565b6001600160a01b03811660009081526001830160205260408120541515610f82565b60606000805b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b1580156127ca57600080fd5b505afa1580156127de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128029190615832565b811015612a0857604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b15801561286c57600080fd5b505afa158015612880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a491906155d9565b905073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156128fd57600080fd5b505afa158015612911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293591906155d9565b6001600160a01b0316141580156129e25750734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561299e57600080fd5b505afa1580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d691906155d9565b6001600160a01b031614155b156129f557826129f181615d5b565b9350505b5080612a0081615d5b565b915050612771565b506000612a16826002615b4c565b6001600160401b03811115612a3b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a64578160200160208202803683370190505b50905073d533a949740bb3306d119cc777fa900ba034cd5281600081518110612a9d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81600181518110612af357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152600260005b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b158015612b6957600080fd5b505afa158015612b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba19190615832565b811015612e5057604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4391906155d9565b905073d533a949740bb3306d119cc777fa900ba034cd526001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612c9c57600080fd5b505afa158015612cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd491906155d9565b6001600160a01b031614158015612d815750734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0316816001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3d57600080fd5b505afa158015612d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7591906155d9565b6001600160a01b031614155b15612e3d57806001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015612dbf57600080fd5b505afa158015612dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df791906155d9565b848481518110612e1757634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015282612e3981615d5b565b9350505b5080612e4881615d5b565b915050612b10565b50909250505090565b612ea16001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673f403c135812408bfbe8713b5a23a04b3d48aae3183613940565b610afe81613a64565b600054600154612ec6916001600160a01b039081169116613ae1565b60005b7f0000000000000000000000000000000000000000000000000000000000000000811015612f4857612f36600e8281548110612f1557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001546001600160a01b039182169116613ae1565b80612f4081615d5b565b915050612ec9565b5060005b601054811015610afe57612f7a60108281548110612f1557634e487b7160e01b600052603260045260246000fd5b80612f8481615d5b565b915050612f4c565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612fdb903090600401615933565b60206040518083038186803b158015612ff357600080fd5b505afa158015613007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302b9190615832565b905080821115613049576130476130428284615cb7565b613c53565b505b6109266001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084613434565b600060016001607f1b031982121580156130ba57506001607f1b82125b6131165760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016108b2565b5090565b604051634b82009360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634b82009390613166903090600401615933565b602060405180830381600087803b15801561318057600080fd5b505af1158015613194573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe91906157fe565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b815260040161320a9190615933565b60206040518083038186803b15801561322257600080fd5b505afa158015613236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325a9190615832565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016132aa9190615933565b60206040518083038186803b1580156132c257600080fd5b505afa1580156132d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fa9190615832565b9050600061330782613d92565b919750955090506133188382613fa8565b9350505050909192565b6011805460ff191690556040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061337b903090600401615933565b60206040518083038186803b15801561339357600080fd5b505afa1580156133a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cb9190615832565b90506133d681613fc8565b6011805460ff19169115919091179055610afe614317565b600080613402610790611fa9610341610cdd565b905082811015613419576134168184615cb7565b91505b50919050565b60606000613416836144b5565b610afe614511565b6040516001600160a01b0383166024820152604481018290526115bb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261459b565b60006127106134a68382615cb7565b6134b09085615c98565b610f829190615b64565b8047101561350a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108b2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613557576040519150601f19603f3d011682016040523d82523d6000602084013e61355c565b606091505b50509050806115bb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108b2565b600081815260018301602052604081205461361a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f85565b506000610f85565b60008181526001830160205260408120548015613735576000613646600183615cb7565b855490915060009061365a90600190615cb7565b90508181146136db57600086600001828154811061368857634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106136b957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806136fa57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610f85565b6000915050610f85565b600080734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b031663aa74e6226040518163ffffffff1660e01b815260040160206040518083038186803b15801561378f57600080fd5b505afa1580156137a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c79190615832565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561381857600080fd5b505afa15801561382c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138509190615832565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b031663d5abeb016040518163ffffffff1660e01b815260040160206040518083038186803b1580156138a157600080fd5b505afa1580156138b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d99190615832565b905060006138e78484615b64565b90506103e8808210156139365760006139008383615cb7565b90508161390d828a615c98565b6139179190615b64565b965060006139258686615cb7565b905080881115613933578097505b50505b5050505050919050565b8015806139c95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561398f57600080fd5b505afa1580156139a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c79190615832565b155b613a345760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108b2565b6040516001600160a01b0383166024820152604481018290526115bb90849063095ea7b360e01b90606401613460565b613a6d8161466d565b601454613aa7906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613940565b601454610afe906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613940565b60005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b158015613b2657600080fd5b505afa158015613b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5e9190615832565b8110156115bb5760048054600554604051630f30f2d360e21b81526001600160a01b03878116948201949094528584166024820152604481019190915260648101849052911690633cc3cb4c90608401602060405180830381600087803b158015613bc857600080fd5b505af1925050508015613bf8575060408051601f3d908101601f19168201909252613bf5918101906155d9565b60015b613c3b57613c04615da2565b806308c379a01415613c2a5750613c19615db9565b80613c245750613c2c565b50613c36565b505b3d6000803e3d6000fd5b613c41565b506115bb565b80613c4b81615d5b565b915050613ae4565b600081613c62575060006109ea565b7f0000000000000000000000000000000000000000000000000000000000000000600080613c908584610e78565b91509150613c9d8161498f565b6000613cd2670de0b6b3a7640000613cbe611fa9613cb9614a82565b614c10565b613cc89086615c98565b6107909190615b64565b9050613cdf838286614c75565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613d2b903090600401615933565b60206040518083038186803b158015613d4357600080fd5b505afa158015613d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d7b9190615832565b945085851115613d89578594505b50505050919050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613de49190615933565b60206040518083038186803b158015613dfc57600080fd5b505afa158015613e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e349190615832565b9050613e5f7f0000000000000000000000000000000000000000000000000000000000000000614cf5565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613eae903090600401615933565b60206040518083038186803b158015613ec657600080fd5b505afa158015613eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613efe9190615832565b9050613f0a8282615cb7565b94506000613f1f610790611fa9610341610cdd565b613f299084615b4c565b905086811115613f4e57613f3d8782615cb7565b613f479087615b4c565b9550613f5b565b613f588188615cb7565b94505b84861115613f8d57613f6d8587615cb7565b95506000945081861115613f8857613f858287615cb7565b93505b613f9e565b613f978686615cb7565b9450600095505b5050509193909250565b6000613fb76130428385615b4c565b905082811115610f85575090919050565b6000811561430f57613fd861556c565b82817f00000000000000000000000000000000000000000000000000000000000000006002811061401957634e487b7160e01b600052603260045260246000fd5b602002015261402661558a565b83817f00000000000000000000000000000000000000000000000000000000000000006004811061406757634e487b7160e01b600052603260045260246000fd5b602002015260405163ed8e84f360e01b8152600090614112906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ed8e84f3906140c290879060019060040161597e565b60206040518083038186803b1580156140da57600080fd5b505afa1580156140ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa99190615832565b90506000600f7f00000000000000000000000000000000000000000000000000000000000000008154811061415757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154601261416e9190615cb7565b61417990600a615bca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156141d257600080fd5b505afa1580156141e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061420a9190615832565b614212614a82565b61421c9089615c98565b6142269190615b64565b6142309190615c98565b90508082111561423d5750805b60145460405162a6cbcd60e21b81526001600160a01b039091169063029b2f349061426e90869085906004016159b8565b600060405180830381600087803b15801561428857600080fd5b505af1925050508015614299575060015b61430a576142a5615da2565b806308c379a01415613c2a57506142ba615db9565b806142c55750613c2c565b7f63299ad14374170063e6f2e5559417926f3a23da67eefa83fc2e9bf9f21e915c816040516142f491906159f0565b60405180910390a16000955050505050506109ea565b505050505b506001919050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190614366903090600401615933565b60206040518083038186803b15801561437e57600080fd5b505afa158015614392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143b69190615832565b90508015610afe576040516321d0683360e11b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290526001604482015273f403c135812408bfbe8713b5a23a04b3d48aae31906343a0d06690606401602060405180830381600087803b15801561443857600080fd5b505af115801561444c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061447091906157fe565b610afe5760405162461bcd60e51b8152602060048201526016602482015275189bdbdcdd195c8b59195c1bdcda5d0b59985a5b195960521b60448201526064016108b2565b60608160000180548060200260200160405190810160405280929190818152602001828054801561450557602002820191906000526020600020905b8154815260200190600101908083116144f1575b50505050509050919050565b6014546040516324f81cd160e11b8152600160a01b90910460ff16151560048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349f039a290602401600060405180830381600087803b15801561458157600080fd5b505af1158015614595573d6000803e3d6000fd5b50505050565b60006145f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614f2d9092919063ffffffff16565b8051909150156115bb578080602001905181019061460e91906157fe565b6115bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108b2565b6146c16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613940565b6147156001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613940565b60005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b15801561475a57600080fd5b505afa15801561476e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147929190615832565b81101561493a5760005b6010548110156148765760048054604051636e74a6f760e01b8152918201849052614864916001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156147ee57600080fd5b505afa158015614802573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061482691906155d9565b846010848154811061484857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169190613940565b8061486e81615d5b565b91505061479c565b5060048054604051636e74a6f760e01b8152918201839052614928916001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156148bf57600080fd5b505afa1580156148d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148f791906155d9565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084613940565b8061493281615d5b565b915050614718565b50610afe6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613940565b8015610afe57604051636197390160e11b815260048101829052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c32e720290604401602060405180830381600087803b1580156149fe57600080fd5b505af1158015614a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a3691906157fe565b610afe5760405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d616e642d756e777261702d6661696c656400000000000060448201526064016108b2565b600060055442614a929190615cb7565b600d54118015614aa35750600c5415155b15614ab15750600c546116ba565b60008060005b7f0000000000000000000000000000000000000000000000000000000000000000811015614ba357600080614b63600e8481548110614b0657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600154600f80546001600160a01b03938416939092169187908110614b4757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600a614b5e9190615bca565b614f46565b915091508015614b8e57841580614b7957508482105b15614b82578194505b81841015614b8e578193505b50508080614b9b90615d5b565b915050614ab7565b5081614be35760405162461bcd60e51b815260206004820152600f60248201526e6e6f2d6f7261636c652d726174657360881b60448201526064016108b2565b42600d5580614bfa83670de0b6b3a7640000615c98565b614c049190615b64565b600c8190559250505090565b6000670de0b6b3a7640000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561099b57600080fd5b6014546001600160a01b0316631a4d01d284614c908461309d565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260448101859052606401600060405180830381600087803b158015614cd857600080fd5b505af1158015614cec573d6000803e3d6000fd5b50505050505050565b614cfd61511d565b60005b60105481101561092657600060108281548110614d2d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190614d66903090600401615933565b60206040518083038186803b158015614d7e57600080fd5b505afa158015614d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614db69190615832565b90508015614f1a5760006127106007541015614ed757600080614e1560108681548110614df357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001546001600160a01b03918216911686614f46565b60015491935091506000908190614e36906001600160a01b03168986614f46565b9150915082614e7d5760405162461bcd60e51b81526020600482015260136024820152727374616c652d7265776172642d6f7261636c6560681b60448201526064016108b2565b80614ec45760405162461bcd60e51b81526020600482015260176024820152767374616c652d636f6c6c61746572616c2d6f7261636c6560481b60448201526064016108b2565b614ed082600754613497565b9450505050505b614f1860108481548110614efb57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03168584846151ff565b505b5080614f2581615d5b565b915050614d00565b6060614f3c84846000856153aa565b90505b9392505050565b60008060005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b158015614f8e57600080fd5b505afa158015614fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fc69190615832565b81101561510c57600454600554604080516001600160a01b038a811660208301528981168284015260608201899052608082019390935260a08082018690528251808303909101815260c08201909252600093849316916150339163b67bb24d60e01b919060e0016158e6565b60408051601f198184030181529082905261504d91615917565b6000604051808303816000865af19150503d806000811461508a576040519150601f19603f3d011682016040523d82523d6000602084013e61508f565b606091505b509150915081156150f757600080828060200190518101906150b1919061586b565b5091509150600554426150c49190615cb7565b811180156150d157508115155b156150e6575094506001935061511592505050565b600080965096505050505050615115565b5050808061510490615d5b565b915050614f4c565b50600080915091505b935093915050565b604051637050ccd960e01b8152306004820152600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637050ccd990604401602060405180830381600087803b15801561518557600080fd5b505af1158015615199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151bd91906157fe565b6113965760405162461bcd60e51b81526020600482015260136024820152721c995dd85c990b58db185a5b4b59985a5b1959606a1b60448201526064016108b2565b60048054604051631d1f307960e31b8152600092839283926001600160a01b039091169163e8f983c891615239918b918b918b9101615947565b60006040518083038186803b15801561525157600080fd5b505afa158015615265573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261528d919081019061569a565b92509250925083600014156152a157600193505b8115614cec5760048054604051636e74a6f760e01b81529182018390526001600160a01b031690636e74a6f79060240160206040518083038186803b1580156152e957600080fd5b505afa1580156152fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061532191906155d9565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401615354959493929190615aed565b600060405180830381600087803b15801561536e57600080fd5b505af1158015615382573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115b59190810190615752565b60608247101561540b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108b2565b843b6154595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108b2565b600080866001600160a01b031685876040516154759190615917565b60006040518083038185875af1925050503d80600081146154b2576040519150601f19603f3d011682016040523d82523d6000602084013e6154b7565b606091505b50915091506154c78282866154d2565b979650505050505050565b606083156154e1575081614f3f565b8251156154f15782518084602001fd5b8160405162461bcd60e51b81526004016108b291906159f0565b828054828255906000526020600020908101928215615560579160200282015b8281111561556057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061552b565b506131169291506155a8565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b8082111561311657600081556001016155a9565b6000602082840312156155ce578081fd5b8135614f3f81615e4a565b6000602082840312156155ea578081fd5b8151614f3f81615e4a565b60006020808385031215615607578182fd5b82356001600160401b0381111561561c578283fd5b8301601f8101851361562c578283fd5b803561563781615b29565b6040516156448282615d2f565b8281528481019150838501600584901b85018601891015615663578687fd5b8694505b8385101561568e57803561567a81615e4a565b835260019490940193918501918501615667565b50979650505050505050565b6000806000606084860312156156ae578182fd5b83516001600160401b038111156156c3578283fd5b8401601f810186136156d3578283fd5b805160206156e082615b29565b6040516156ed8282615d2f565b8381528281019150848301600585901b860184018b101561570c578788fd5b8795505b8486101561573757805161572381615e4a565b835260019590950194918301918301615710565b50918801516040909801519199979850909695505050505050565b60006020808385031215615764578182fd5b82516001600160401b03811115615779578283fd5b8301601f81018513615789578283fd5b805161579481615b29565b6040516157a18282615d2f565b8281528481019150838501600584901b850186018910156157c0578687fd5b8694505b8385101561568e5780518352600194909401939185019185016157c4565b6000602082840312156157f3578081fd5b8135614f3f81615e5f565b60006020828403121561580f578081fd5b8151614f3f81615e5f565b60006020828403121561582b578081fd5b5035919050565b600060208284031215615843578081fd5b5051919050565b6000806040838503121561585c578182fd5b50508035926020909101359150565b60008060006060848603121561587f578283fd5b8351925060208401519150604084015161589881615e5f565b809150509250925092565b6000815180845260208085019450808401835b838110156158db5781516001600160a01b0316875295820195908201906001016158b6565b509495945050505050565b6001600160e01b0319831681528151600090615909816004850160208701615cce565b919091016004019392505050565b60008251615929818460208701615cce565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208252610f8260208301846158a3565b60608101818460005b60028110156159a6578151835260209283019290910190600101615987565b50505082151560408301529392505050565b60a08101818460005b60048110156159e05781518352602092830192909101906001016159c1565b5050508260808301529392505050565b6000602082528251806020840152615a0f816040850160208701615cce565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b602080825260169082015275696e76616c69642d736c6970706167652d76616c756560501b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600086825285602083015260a06040830152615b0c60a08301866158a3565b6001600160a01b0394909416606083015250608001529392505050565b60006001600160401b03821115615b4257615b42615d8c565b5060051b60200190565b60008219821115615b5f57615b5f615d76565b500190565b600082615b7f57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611615b965750615bc1565b818704821115615ba857615ba8615d76565b80861615615bb557918102915b9490941c938002615b87565b94509492505050565b6000610f826000198484600082615be357506001614f3f565b81615bf057506000614f3f565b8160018114615c065760028114615c1057615c3d565b6001915050614f3f565b60ff841115615c2157615c21615d76565b6001841b915084821115615c3757615c37615d76565b50614f3f565b5060208310610133831016604e8410600b8410161715615c70575081810a83811115615c6b57615c6b615d76565b614f3f565b615c7d8484846001615b84565b808604821115615c8f57615c8f615d76565b02949350505050565b6000816000190483118215151615615cb257615cb2615d76565b500290565b600082821015615cc957615cc9615d76565b500390565b60005b83811015615ce9578181015183820152602001615cd1565b838111156145955750506000910152565b600181811c90821680615d0e57607f821691505b6020821081141561341957634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b0381118282101715615d5457615d54615d8c565b6040525050565b6000600019821415615d6f57615d6f615d76565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156116ba57600481823e5160e01c90565b600060443d1015615dc9576116ba565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715615dfa5750505050506116ba565b8285019150815181811115615e14575050505050506116ba565b843d8701016020828501011115615e30575050505050506116ba565b615e3f60208286010187615d2f565b509094505050505090565b6001600160a01b0381168114610afe57600080fd5b8015158114610afe57600080fdfea26469706673582212203c2a90d207ffc59941ea9a2563295463f4b8421f3f7c596f027b3abc13f1dee664736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "claimableRewardsInCollateral()": {
        "details": "Claimable rewards estimated into pool's collateral value"
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals."
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "setRewardTokens(address[])": {
        "details": "convex pool can add new rewards. This method refresh list."
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Report total value in collateral token"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value of asset under management"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28911,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "CRV",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14823,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "WETH",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14828,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "receiptToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14834,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "feeCollector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 14837,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "swapManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISwapManager)5259"
      },
      {
        "astId": 14840,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14843,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14846,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14849,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "_keepers",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)4299_storage"
      },
      {
        "astId": 29328,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "NAME",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 29335,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "reservedToken",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29339,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "usdRate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 29341,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "usdRateTimestamp",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 29344,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "coins",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 29347,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "coinDecimals",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 29350,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 29352,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "depositError",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 29355,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "crvSlippage",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 29357,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "decimalConversionFactor",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 28540,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "crvDeposit",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 26912,
        "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
        "label": "isClaimRewards",
        "offset": 20,
        "slot": "20",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwapManager)5259": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4299_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4298,
            "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3997,
            "contract": "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol:Convex4PoolStrategyMUSDPool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}