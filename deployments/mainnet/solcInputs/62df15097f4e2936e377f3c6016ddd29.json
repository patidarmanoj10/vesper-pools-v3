{
  "language": "Solidity",
  "sources": {
    "contracts/Governed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\ncontract Governed is Context {\n    address public governor;\n    address private proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor {\n        require(governor == _msgSender(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    /**\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * Can only be called by the current owner.\n     */\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\n        //solhint-disable-next-line reason-string\n        require(_proposedGovernor != address(0), \"proposed-governor-is-zero-address\");\n        proposedGovernor = _proposedGovernor;\n    }\n\n    /**\n     * @dev Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        //solhint-disable-next-line reason-string\n        require(proposedGovernor == _msgSender(), \"caller-is-not-the-proposed-governor\");\n        emit UpdatedGovernor(governor, proposedGovernor);\n        governor = proposedGovernor;\n        proposedGovernor = address(0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/strategies/maker/CollateralManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../Governed.sol\";\nimport \"../../interfaces//maker/IMakerDAO.sol\";\nimport \"../../interfaces/vesper/ICollateralManager.sol\";\n\ncontract DSMath {\n    uint256 internal constant RAY = 10**27;\n    uint256 internal constant WAD = 10**18;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = ((x * y) + (WAD / 2)) / WAD;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = ((x * WAD) + (y / 2)) / y;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = ((x * y) + (RAY / 2)) / RAY;\n    }\n\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\n        rad = wad * RAY;\n    }\n\n    /// @notice It will work only if _dec < 18\n    function convertTo18(uint256 _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = _amt * 10**(18 - _dec);\n    }\n}\n\ncontract CollateralManager is ICollateralManager, DSMath, ReentrancyGuard, Governed {\n    using SafeERC20 for IERC20;\n\n    // Vault number to collateral type\n    mapping(uint256 => bytes32) public collateralType;\n    // Vault owner to vault num mapping\n    mapping(address => uint256) public override vaultNum;\n    // Collateral type to Gem join address of that type\n    mapping(bytes32 => address) public mcdGemJoin;\n\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public override mcdManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public mcdDaiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public mcdSpot = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n    address public mcdJug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n    address public treasury;\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\n\n    event AddedGemJoin(address indexed gemJoin, bytes32 ilk);\n    event CreatedVault(address indexed owner, uint256 indexed vaultNum, bytes32 indexed collateralType);\n    event TransferredVaultOwnership(uint256 indexed vaultNum, address indexed previousOwner, address indexed newOwner);\n    event UpdatedMCDAddresses(address mcdManager, address mcdDaiJoin, address mcdSpot, address mcdJug);\n    event UpdatedTreasury(address indexed previousTreasury, address indexed newTreasury);\n\n    modifier onlyVaultOwner() {\n        require(vaultNum[msg.sender] != 0, \"caller-doesn't-own-any-vault\");\n        _;\n    }\n\n    /**\n     * @dev Add gemJoin adapter address from Maker in mapping\n     * @param _gemJoins Array of gem join addresses\n     */\n    function addGemJoin(address[] calldata _gemJoins) external override onlyGovernor {\n        require(_gemJoins.length != 0, \"no-gemJoin-address\");\n        for (uint256 i; i < _gemJoins.length; i++) {\n            address gemJoin = _gemJoins[i];\n            bytes32 ilk = GemJoinLike(gemJoin).ilk();\n            mcdGemJoin[ilk] = gemJoin;\n            emit AddedGemJoin(gemJoin, ilk);\n        }\n    }\n\n    /**\n     * @notice Create new Maker vault\n     * @dev Store caller of this function as vault owner.\n     * @param _collateralType Collateral type for Maker vault\n     * @return _vaultNum Newly created vault number\n     */\n    function createVault(bytes32 _collateralType) external override returns (uint256 _vaultNum) {\n        require(vaultNum[msg.sender] == 0, \"caller-owns-another-vault\");\n        ManagerLike manager = ManagerLike(mcdManager);\n        _vaultNum = manager.open(_collateralType, address(this));\n        manager.cdpAllow(_vaultNum, address(this), 1);\n\n        vaultNum[msg.sender] = _vaultNum;\n        collateralType[_vaultNum] = _collateralType;\n        emit CreatedVault(msg.sender, _vaultNum, _collateralType);\n    }\n\n    /**\n     * @notice Transfer vault ownership to another address/strategy\n     * @param _newOwner Address of new owner of vault\n     */\n    function transferVaultOwnership(address _newOwner) external override onlyVaultOwner {\n        _transferVaultOwnership(vaultNum[msg.sender], msg.sender, _newOwner);\n    }\n\n    /**\n     * @notice Transfer vault ownership to another address/strategy\n     * @param _vaultNum Number of vault being transferred\n     * @param _owner Address of owner of vault\n     * @param _newOwner Address of new owner of vault\n     */\n    function transferVaultOwnership(\n        uint256 _vaultNum,\n        address _owner,\n        address _newOwner\n    ) external onlyGovernor {\n        require(_vaultNum != 0, \"vault-number-is-zero\");\n        require(_owner != address(0), \"owner-address-zero\");\n        _transferVaultOwnership(_vaultNum, _owner, _newOwner);\n    }\n\n    /**\n     * @dev Update MCD addresses.\n     */\n    function updateMCDAddresses(\n        address _mcdManager,\n        address _mcdDaiJoin,\n        address _mcdSpot,\n        address _mcdJug\n    ) external onlyGovernor {\n        require(_mcdManager != address(0), \"mcdManager-address-is-zero\");\n        require(_mcdDaiJoin != address(0), \"mcdDaiJoin-address-is-zero\");\n        require(_mcdSpot != address(0), \"mcdSpot-address-is-zero\");\n        require(_mcdJug != address(0), \"mcdJug-address-is-zero\");\n        mcdManager = _mcdManager;\n        mcdDaiJoin = _mcdDaiJoin;\n        mcdSpot = _mcdSpot;\n        mcdJug = _mcdJug;\n        emit UpdatedMCDAddresses(_mcdManager, _mcdDaiJoin, _mcdSpot, _mcdJug);\n    }\n\n    /**\n     * @notice Update treasure address\n     */\n    function updateTreasury(address _treasury) external onlyGovernor {\n        require(_treasury != address(0), \"treasury-address-is-zero\");\n        emit UpdatedTreasury(treasury, _treasury);\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Deposit ERC20 collateral.\n     * @param _amount ERC20 amount to deposit.\n     */\n    function depositCollateral(uint256 _amount) external override nonReentrant onlyVaultOwner {\n        uint256 _vaultNum = vaultNum[msg.sender];\n        // Receives Gem amount, approve and joins it into the vat.\n        // Also convert amount to 18 decimal\n        _amount = _joinGem(mcdGemJoin[collateralType[_vaultNum]], _amount);\n\n        ManagerLike manager = ManagerLike(mcdManager);\n        // Locks Gem amount into the CDP\n        VatLike(manager.vat()).frob(\n            collateralType[_vaultNum],\n            manager.urns(_vaultNum),\n            address(this),\n            address(this),\n            int256(_amount),\n            0\n        );\n    }\n\n    /**\n     * @dev Withdraw collateral.\n     * @param _amount Collateral amount to withdraw.\n     */\n    function withdrawCollateral(uint256 _amount) external override nonReentrant onlyVaultOwner {\n        uint256 _vaultNum = vaultNum[msg.sender];\n        ManagerLike manager = ManagerLike(mcdManager);\n        GemJoinLike gemJoin = GemJoinLike(mcdGemJoin[collateralType[_vaultNum]]);\n        uint256 amount18 = convertTo18(gemJoin.dec(), _amount);\n        // Unlocks Gem amount18 from the CDP\n        manager.frob(_vaultNum, -int256(amount18), 0);\n        // Moves Gem amount18 from the CDP urn to this address\n        manager.flux(_vaultNum, address(this), amount18);\n        // Exits Gem amount to this address as a token\n        gemJoin.exit(address(this), _amount);\n        // Send Gem to pool's address\n        IERC20(gemJoin.gem()).safeTransfer(msg.sender, _amount);\n    }\n\n    /**\n     * @dev Payback borrowed DAI.\n     * @param _amount Dai amount to payback.\n     */\n    function payback(uint256 _amount) external override onlyVaultOwner {\n        uint256 _vaultNum = vaultNum[msg.sender];\n        ManagerLike manager = ManagerLike(mcdManager);\n        address urn = manager.urns(_vaultNum);\n        address vat = manager.vat();\n        bytes32 ilk = collateralType[_vaultNum];\n        // Calculate dai debt\n        uint256 _daiDebt = _getVaultDebt(ilk, urn, vat);\n        require(_daiDebt >= _amount, \"paying-excess-debt\");\n        // Approve and join dai in vat\n        _joinDai(urn, _amount);\n        manager.frob(_vaultNum, 0, _getWipeAmount(ilk, urn, vat));\n    }\n\n    /**\n     * @notice Borrow DAI.\n     * @dev In edge case, when we hit DAI mint limit, we might end up borrowing\n     * less than what is being asked.\n     * @param _amount Dai amount to borrow. Actual borrow amount may be less than \"amount\"\n     */\n    function borrow(uint256 _amount) external override onlyVaultOwner {\n        uint256 _vaultNum = vaultNum[msg.sender];\n        ManagerLike manager = ManagerLike(mcdManager);\n        address vat = manager.vat();\n        // Safety check in scenario where current debt and request borrow will exceed max dai limit\n        uint256 _maxAmount = _maxAvailableDai(vat, collateralType[_vaultNum]);\n        if (_amount > _maxAmount) {\n            _amount = _maxAmount;\n        }\n\n        // Generates debt in the CDP\n        manager.frob(_vaultNum, 0, _getBorrowAmount(vat, manager.urns(_vaultNum), _vaultNum, _amount));\n        // Moves the DAI amount (balance in the vat in rad) to pool's address\n        manager.move(_vaultNum, address(this), toRad(_amount));\n        // Allows adapter to access to pool's DAI balance in the vat\n        if (VatLike(vat).can(address(this), mcdDaiJoin) == 0) {\n            VatLike(vat).hope(mcdDaiJoin);\n        }\n        // Exits DAI as a token to user's address\n        DaiJoinLike(mcdDaiJoin).exit(msg.sender, _amount);\n    }\n\n    /// @dev sweep given ERC20 token to treasury pool\n    function sweepErc20(address _fromToken) external {\n        require(treasury != address(0), \"treasury-not-set\");\n        uint256 amount = IERC20(_fromToken).balanceOf(address(this));\n        IERC20(_fromToken).safeTransfer(treasury, amount);\n    }\n\n    /**\n     * @dev Get current dai debt of vault.\n     * @param _vaultOwner Address of vault owner\n     */\n    function getVaultDebt(address _vaultOwner) external view override returns (uint256 daiDebt) {\n        uint256 _vaultNum = vaultNum[_vaultOwner];\n        require(_vaultNum != 0, \"invalid-vault-number\");\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\n        address _vat = ManagerLike(mcdManager).vat();\n        bytes32 _ilk = collateralType[_vaultNum];\n        daiDebt = _getVaultDebt(_ilk, _urn, _vat);\n    }\n\n    /**\n     * @dev Get current collateral balance of vault.\n     * @param _vaultOwner Address of vault owner\n     */\n    function getVaultBalance(address _vaultOwner) external view override returns (uint256 collateralLocked) {\n        uint256 _vaultNum = vaultNum[_vaultOwner];\n        require(_vaultNum != 0, \"invalid-vault-number\");\n        address _vat = ManagerLike(mcdManager).vat();\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\n        (collateralLocked, ) = VatLike(_vat).urns(collateralType[_vaultNum], _urn);\n    }\n\n    /**\n     * @dev Calculate state based on withdraw amount.\n     * @param _vaultOwner Address of vault owner\n     * @param _amount Collateral amount to withdraw.\n     */\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\n        external\n        view\n        override\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        )\n    {\n        uint256 _vaultNum = vaultNum[_vaultOwner];\n        require(_vaultNum != 0, \"invalid-vault-number\");\n        (collateralLocked, daiDebt, collateralUsdRate, collateralRatio, minimumDebt) = getVaultInfo(_vaultOwner);\n\n        GemJoinLike _gemJoin = GemJoinLike(mcdGemJoin[collateralType[vaultNum[_vaultOwner]]]);\n        uint256 _amount18 = convertTo18(_gemJoin.dec(), _amount);\n        require(_amount18 <= collateralLocked, \"insufficient-collateral-locked\");\n        collateralLocked = collateralLocked - _amount18;\n        collateralRatio = _getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\n    }\n\n    /**\n     * @dev Get vault info\n     * @param _vaultOwner Address of vault owner\n     */\n    function getVaultInfo(address _vaultOwner)\n        public\n        view\n        override\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        )\n    {\n        uint256 _vaultNum = vaultNum[_vaultOwner];\n        require(_vaultNum != 0, \"invalid-vault-number\");\n        (collateralLocked, collateralUsdRate, daiDebt, minimumDebt) = _getVaultInfo(_vaultNum);\n        collateralRatio = _getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\n    }\n\n    /**\n     * @notice Get max available DAI safe to borrow for given collateral type.\n     * @param _collateralType Collateral type.\n     */\n    function maxAvailableDai(bytes32 _collateralType) public view returns (uint256) {\n        return _maxAvailableDai(ManagerLike(mcdManager).vat(), _collateralType);\n    }\n\n    /**\n     * @notice Get max available DAI safe to borrow\n     * @dev Calculation based on current DAI debt and DAI limit for given collateral type.\n     * @param _vat Vat address\n     * @param _collateralType Vault collateral type.\n     */\n    function _maxAvailableDai(address _vat, bytes32 _collateralType) internal view returns (uint256) {\n        // Get stable coin Art(debt) [wad], rate [ray], line [rad]\n        //solhint-disable-next-line var-name-mixedcase\n        (uint256 Art, uint256 rate, , uint256 line, ) = VatLike(_vat).ilks(_collateralType);\n        // Calculate total issued debt is Art * rate [rad]\n        // Calculate total available dai [wad]\n        uint256 _totalAvailableDai = (line - (Art * rate)) / RAY;\n        // For safety reason, return 99% of available\n        return (_totalAvailableDai * 99) / 100;\n    }\n\n    function _joinDai(address _urn, uint256 _amount) internal {\n        DaiJoinLike _daiJoin = DaiJoinLike(mcdDaiJoin);\n        // Transfer Dai from strategy or pool to here\n        IERC20(DAI).safeTransferFrom(msg.sender, address(this), _amount);\n        // Approves adapter to move dai.\n        IERC20(DAI).safeApprove(mcdDaiJoin, 0);\n        IERC20(DAI).safeApprove(mcdDaiJoin, _amount);\n        // Joins DAI into the vat\n        _daiJoin.join(_urn, _amount);\n    }\n\n    function _joinGem(address _adapter, uint256 _amount) internal returns (uint256) {\n        GemJoinLike gemJoin = GemJoinLike(_adapter);\n\n        IERC20 token = IERC20(gemJoin.gem());\n        // Transfer token from strategy or pool to here\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        // Approves adapter to take the Gem amount\n        token.safeApprove(_adapter, 0);\n        token.safeApprove(_adapter, _amount);\n        // Joins Gem collateral into the vat\n        gemJoin.join(address(this), _amount);\n        // Convert amount to 18 decimal\n        return convertTo18(gemJoin.dec(), _amount);\n    }\n\n    /**\n     * @dev Get borrow dai amount.\n     */\n    function _getBorrowAmount(\n        address _vat,\n        address _urn,\n        uint256 _vaultNum,\n        uint256 _wad\n    ) internal returns (int256 amount) {\n        // Updates stability fee rate\n        uint256 rate = JugLike(mcdJug).drip(collateralType[_vaultNum]);\n        // Gets DAI balance of the urn in the vat\n        uint256 dai = VatLike(_vat).dai(_urn);\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\n        if (dai < _wad * RAY) {\n            // Calculates the needed amt so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\n            amount = int256(((_wad * RAY) - dai) / rate);\n            // This is needed due lack of precision. It might need to sum an extra amt wei (for the given DAI wad amount)\n            amount = (uint256(amount) * rate) < (_wad * RAY) ? amount + 1 : amount;\n        }\n    }\n\n    /// @notice Transfer vault ownership\n    function _transferVaultOwnership(\n        uint256 _vaultNum,\n        address _owner,\n        address _newOwner\n    ) internal onlyGovernor {\n        require(_newOwner != address(0), \"new-owner-address-is-zero\");\n        require(vaultNum[_owner] == _vaultNum, \"invalid-vault-num\");\n        require(vaultNum[_newOwner] == 0, \"new-owner-owns-another-vault\");\n\n        vaultNum[_newOwner] = _vaultNum;\n        vaultNum[_owner] = 0;\n        emit TransferredVaultOwnership(_vaultNum, _owner, _newOwner);\n    }\n\n    /**\n     * @dev Get Vault Debt Amount.\n     */\n    function _getVaultDebt(\n        bytes32 _ilk,\n        address _urn,\n        address _vat\n    ) internal view returns (uint256 wad) {\n        // Get normalized debt [wad]\n        (, uint256 art) = VatLike(_vat).urns(_ilk, _urn);\n        // Get stable coin rate [ray]\n        (, uint256 rate, , , ) = VatLike(_vat).ilks(_ilk);\n        // Get balance from vat [rad]\n        uint256 dai = VatLike(_vat).dai(_urn);\n        wad = _getVaultDebt(art, rate, dai);\n    }\n\n    function _getVaultInfo(uint256 _vaultNum)\n        internal\n        view\n        returns (\n            uint256 collateralLocked,\n            uint256 collateralUsdRate,\n            uint256 daiDebt,\n            uint256 minimumDebt\n        )\n    {\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\n        address _vat = ManagerLike(mcdManager).vat();\n        bytes32 _ilk = collateralType[_vaultNum];\n        // Get minimum liquidation ratio [ray]\n        (, uint256 mat) = SpotterLike(mcdSpot).ilks(_ilk);\n        // Get collateral locked and normalized debt [wad] [wad]\n        (uint256 ink, uint256 art) = VatLike(_vat).urns(_ilk, _urn);\n        // Get stable coin and collateral rate  and min debt [ray] [ray] [rad]\n        (, uint256 rate, uint256 spot, , uint256 dust) = VatLike(_vat).ilks(_ilk);\n\n        collateralLocked = ink;\n        daiDebt = _getVaultDebt(art, rate, VatLike(_vat).dai(_urn));\n        minimumDebt = dust / RAY;\n        // Calculate collateral rate in 18 decimals\n        collateralUsdRate = rmul(mat, spot) / 10**9;\n    }\n\n    /**\n     * @dev Get Payback amount.\n     * @notice We need to fetch latest art, rate and dai to calculate payback amount.\n     */\n    function _getWipeAmount(\n        bytes32 _ilk,\n        address _urn,\n        address _vat\n    ) internal view returns (int256 amount) {\n        // Get normalize debt, rate and dai balance from Vat\n        (, uint256 _art) = VatLike(_vat).urns(_ilk, _urn);\n        (, uint256 _rate, , , ) = VatLike(_vat).ilks(_ilk);\n        uint256 _dai = VatLike(_vat).dai(_urn);\n\n        // Uses the whole dai balance in the vat to reduce the debt\n        amount = int256(_dai / _rate);\n        // Checks the calculated amt is not higher than urn.art (total debt), otherwise uses its value\n        amount = uint256(amount) <= _art ? -amount : -int256(_art);\n    }\n\n    /// @notice Get collateral ratio\n    function _getCollateralRatio(\n        uint256 _collateralLocked,\n        uint256 _collateralRate,\n        uint256 _daiDebt\n    ) internal pure returns (uint256) {\n        if (_collateralLocked == 0) {\n            return 0;\n        }\n\n        if (_daiDebt == 0) {\n            return MAX_UINT_VALUE;\n        }\n\n        require(_collateralRate != 0, \"collateral-rate-is-zero\");\n        return wdiv(wmul(_collateralLocked, _collateralRate), _daiDebt);\n    }\n\n    /// @notice Get vault debt\n    function _getVaultDebt(\n        uint256 _art,\n        uint256 _rate,\n        uint256 _dai\n    ) internal pure returns (uint256 wad) {\n        if (_dai < (_art * _rate)) {\n            uint256 rad = ((_art * _rate) - _dai);\n            wad = rad / RAY;\n            wad = (wad * RAY) < rad ? wad + 1 : wad;\n        } else {\n            wad = 0;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/maker/IMakerDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface ManagerLike {\n    function cdpCan(\n        address,\n        uint256,\n        address\n    ) external view returns (uint256);\n\n    function ilks(uint256) external view returns (bytes32);\n\n    function owns(uint256) external view returns (address);\n\n    function urns(uint256) external view returns (address);\n\n    function vat() external view returns (address);\n\n    function open(bytes32, address) external returns (uint256);\n\n    function give(uint256, address) external;\n\n    function cdpAllow(\n        uint256,\n        address,\n        uint256\n    ) external;\n\n    function urnAllow(address, uint256) external;\n\n    function frob(\n        uint256,\n        int256,\n        int256\n    ) external;\n\n    function flux(\n        uint256,\n        address,\n        uint256\n    ) external;\n\n    function move(\n        uint256,\n        address,\n        uint256\n    ) external;\n\n    function exit(\n        address,\n        uint256,\n        address,\n        uint256\n    ) external;\n\n    function quit(uint256, address) external;\n\n    function enter(address, uint256) external;\n\n    function shift(uint256, uint256) external;\n}\n\ninterface VatLike {\n    function can(address, address) external view returns (uint256);\n\n    function ilks(bytes32)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function dai(address) external view returns (uint256);\n\n    function urns(bytes32, address) external view returns (uint256, uint256);\n\n    function frob(\n        bytes32,\n        address,\n        address,\n        address,\n        int256,\n        int256\n    ) external;\n\n    function hope(address) external;\n\n    function nope(address) external;\n\n    function move(\n        address,\n        address,\n        uint256\n    ) external;\n}\n\ninterface GemJoinLike {\n    function dec() external view returns (uint256);\n\n    function gem() external view returns (address);\n\n    function ilk() external view returns (bytes32);\n\n    function join(address, uint256) external payable;\n\n    function exit(address, uint256) external;\n}\n\ninterface DaiJoinLike {\n    function vat() external returns (VatLike);\n\n    function dai() external view returns (address);\n\n    function join(address, uint256) external payable;\n\n    function exit(address, uint256) external;\n}\n\ninterface JugLike {\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface SpotterLike {\n    function ilks(bytes32) external view returns (address, uint256);\n}\n"
    },
    "contracts/interfaces/vesper/ICollateralManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface ICollateralManager {\n    function addGemJoin(address[] calldata _gemJoins) external;\n\n    function borrow(uint256 _amount) external;\n\n    function createVault(bytes32 _collateralType) external returns (uint256 _vaultNum);\n\n    function depositCollateral(uint256 _amount) external;\n\n    function payback(uint256 _amount) external;\n\n    function transferVaultOwnership(address _newOwner) external;\n\n    function withdrawCollateral(uint256 _amount) external;\n\n    function getVaultBalance(address _vaultOwner) external view returns (uint256 collateralLocked);\n\n    function getVaultDebt(address _vaultOwner) external view returns (uint256 daiDebt);\n\n    function getVaultInfo(address _vaultOwner)\n        external\n        view\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        );\n\n    function mcdManager() external view returns (address);\n\n    function vaultNum(address _vaultOwner) external view returns (uint256 _vaultNum);\n\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\n        external\n        view\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/strategies/maker/MakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/vesper/ICollateralManager.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in other lending pool to earn interest.\nabstract contract MakerStrategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    ICollateralManager public immutable cm;\n    bytes32 public immutable collateralType;\n    uint256 public lastRebalanceBlock;\n    uint256 public highWater;\n    uint256 public lowWater;\n    uint256 private constant WAT = 10**16;\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _receiptToken,\n        bytes32 _collateralType\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        collateralType = _collateralType;\n        cm = ICollateralManager(_cm);\n    }\n\n    /// @notice Create new Maker vault\n    function createVault() external onlyGovernor {\n        cm.createVault(collateralType);\n    }\n\n    /**\n     * @dev If pool is underwater this function will resolve underwater condition.\n     * If Debt in Maker is greater than Dai balance in lender then pool is underwater.\n     * Lowering DAI debt in Maker will resolve underwater condition.\n     * Resolve: Calculate required collateral token to lower DAI debt. Withdraw required\n     * collateral token from Maker and convert those to DAI via Uniswap.\n     * Finally payback debt in Maker using DAI.\n     * @dev Also report loss in pool.\n     */\n    function resurface() external onlyKeeper {\n        _resurface();\n    }\n\n    /**\n     * @notice Update balancing factors aka high water and low water values.\n     * Water mark values represent Collateral Ratio in Maker. For example 300 as high water\n     * means 300% collateral ratio.\n     * @param _highWater Value for high water mark.\n     * @param _lowWater Value for low water mark.\n     */\n    function updateBalancingFactor(uint256 _highWater, uint256 _lowWater) external onlyGovernor {\n        require(_lowWater != 0, \"lowWater-is-zero\");\n        require(_highWater > _lowWater, \"highWater-less-than-lowWater\");\n        highWater = _highWater * WAT;\n        lowWater = _lowWater * WAT;\n    }\n\n    /**\n     * @notice Report total value of this strategy\n     * @dev Make sure to return value in collateral token and in order to do that\n     * we are using Uniswap to get collateral amount for earned DAI.\n     */\n    function totalValue() external view virtual override returns (uint256 _totalValue) {\n        uint256 _daiBalance = _getDaiBalance();\n        uint256 _debt = cm.getVaultDebt(address(this));\n        if (_daiBalance > _debt) {\n            uint256 _daiEarned = _daiBalance - _debt;\n            (, _totalValue) = swapManager.bestPathFixedInput(DAI, address(collateralToken), _daiEarned, 0);\n        }\n        _totalValue += convertFrom18(cm.getVaultBalance(address(this)));\n    }\n\n    function vaultNum() external view returns (uint256) {\n        return cm.vaultNum(address(this));\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == receiptToken;\n    }\n\n    /**\n     * @notice Returns true if pool is underwater.\n     * @notice Underwater - If debt is greater than earning of pool.\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\n     */\n    function isUnderwater() public view virtual returns (bool) {\n        return cm.getVaultDebt(address(this)) > _getDaiBalance();\n    }\n\n    /**\n     * @notice Before migration hook. It will be called during migration\n     * @dev Transfer Maker vault ownership to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        cm.transferVaultOwnership(_newStrategy);\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        IERC20(DAI).approve(address(cm), _amount);\n        collateralToken.approve(address(cm), _amount);\n        collateralToken.approve(pool, _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            collateralToken.approve(address(swapManager.ROUTERS(i)), _amount);\n            IERC20(DAI).approve(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    function _moveDaiToMaker(uint256 _amount) internal {\n        if (_amount != 0) {\n            _withdrawDaiFromLender(_amount);\n            cm.payback(_amount);\n        }\n    }\n\n    function _moveDaiFromMaker(uint256 _amount) internal virtual {\n        cm.borrow(_amount);\n        _amount = IERC20(DAI).balanceOf(address(this));\n        _depositDaiToLender(_amount);\n    }\n\n    /**\n     * @notice Withdraw collateral to payback excess debt in pool.\n     * @param _excessDebt Excess debt of strategy in collateral token\n     * @return payback amount in collateral token. Usually it is equal to excess debt.\n     */\n    function _liquidate(uint256 _excessDebt) internal virtual override returns (uint256) {\n        _withdrawHere(_excessDebt);\n        return _excessDebt;\n    }\n\n    /**\n     * @notice Calculate earning and convert it to collateral token\n     * @dev Also claim rewards if available.\n     *      Withdraw excess DAI from lender.\n     *      Swap net earned DAI to collateral token\n     * @return profit in collateral token\n     */\n    function _realizeProfit(\n        uint256 /*_totalDebt*/\n    ) internal virtual override returns (uint256) {\n        _claimRewardsAndConvertTo(DAI);\n        _rebalanceDaiInLender();\n        uint256 _daiBalance = IERC20(DAI).balanceOf(address(this));\n        if (_daiBalance != 0) {\n            _safeSwap(DAI, address(collateralToken), _daiBalance, 1);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate collateral loss from resurface, if any\n     * @dev Difference of total debt of strategy in pool and collateral locked\n     *      in Maker vault is the loss.\n     * @return loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal virtual override returns (uint256) {\n        uint256 _collateralLocked = convertFrom18(cm.getVaultBalance(address(this)));\n        return _totalDebt > _collateralLocked ? _totalDebt - _collateralLocked : 0;\n    }\n\n    /**\n     * @notice Deposit collateral in Maker and rebalance collateral and debt in Maker.\n     * @dev Based on defined risk parameter either borrow more DAI from Maker or\n     * payback some DAI in Maker. It will try to mitigate risk of liquidation.\n     */\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            cm.depositCollateral(_collateralBalance);\n        }\n\n        (\n            uint256 _collateralLocked,\n            uint256 _currentDebt,\n            uint256 _collateralUsdRate,\n            uint256 _collateralRatio,\n            uint256 _minimumAllowedDebt\n        ) = cm.getVaultInfo(address(this));\n        uint256 _maxDebt = (_collateralLocked * _collateralUsdRate) / highWater;\n        if (_maxDebt < _minimumAllowedDebt) {\n            // Dusting Scenario:: Based on collateral locked, if our max debt is less\n            // than Maker defined minimum debt then payback whole debt and wind up.\n            _moveDaiToMaker(_currentDebt);\n        } else {\n            if (_collateralRatio > highWater) {\n                require(!isUnderwater(), \"pool-is-underwater\");\n                // Safe to borrow more DAI\n                _moveDaiFromMaker(_maxDebt - _currentDebt);\n            } else if (_collateralRatio < lowWater) {\n                // Being below low water brings risk of liquidation in Maker.\n                // Withdraw DAI from Lender and deposit in Maker\n                _moveDaiToMaker(_currentDebt - _maxDebt);\n            }\n        }\n    }\n\n    function _resurface() internal virtual {\n        uint256 _daiBalance = _getDaiBalance();\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\n        require(_daiDebt > _daiBalance, \"pool-is-above-water\");\n        uint256 _daiNeeded = _daiDebt - _daiBalance;\n        (address[] memory _path, uint256 _collateralNeeded, uint256 rIdx) =\n            swapManager.bestInputFixedOutput(address(collateralToken), DAI, _daiNeeded);\n        if (_collateralNeeded != 0) {\n            cm.withdrawCollateral(_collateralNeeded);\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\n                _collateralNeeded,\n                1,\n                _path,\n                address(this),\n                block.timestamp + 30\n            );\n            cm.payback(IERC20(DAI).balanceOf(address(this)));\n        }\n    }\n\n    function _withdraw(uint256 _amount) internal override {\n        _withdrawHere(_amount);\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n    }\n\n    // TODO do we need a safe withdraw\n    function _withdrawHere(uint256 _amount) internal {\n        (\n            uint256 collateralLocked,\n            uint256 debt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        ) = cm.whatWouldWithdrawDo(address(this), _amount);\n        if (debt != 0 && collateralRatio < lowWater) {\n            // If this withdraw results in Low Water scenario.\n            uint256 maxDebt = (collateralLocked * collateralUsdRate) / highWater;\n            if (maxDebt < minimumDebt) {\n                // This is Dusting scenario\n                _moveDaiToMaker(debt);\n            } else if (maxDebt < debt) {\n                _moveDaiToMaker(debt - maxDebt);\n            }\n        }\n        cm.withdrawCollateral(_amount);\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal virtual;\n\n    function _rebalanceDaiInLender() internal virtual;\n\n    function _withdrawDaiFromLender(uint256 _amount) internal virtual;\n\n    function _getDaiBalance() internal view virtual returns (uint256);\n}\n"
    },
    "contracts/strategies/Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../interfaces/bloq/ISwapManager.sol\";\nimport \"../interfaces/bloq/IAddressList.sol\";\nimport \"../interfaces/bloq/IAddressListFactory.sol\";\nimport \"../interfaces/vesper/IStrategy.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\nabstract contract Strategy is IStrategy, Context {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable collateralToken;\n    address public immutable receiptToken;\n    address public immutable override pool;\n    IAddressList public keepers;\n    address public override feeCollector;\n    ISwapManager public swapManager;\n\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\n\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken\n    ) {\n        require(_pool != address(0), \"pool-address-is-zero\");\n        require(_swapManager != address(0), \"sm-address-is-zero\");\n        swapManager = ISwapManager(_swapManager);\n        pool = _pool;\n        collateralToken = IERC20(IVesperPool(_pool).token());\n        receiptToken = _receiptToken;\n    }\n\n    modifier onlyGovernor {\n        require(_msgSender() == IVesperPool(pool).governor(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(keepers.contains(_msgSender()), \"caller-is-not-a-keeper\");\n        _;\n    }\n\n    modifier onlyPool() {\n        require(_msgSender() == pool, \"caller-is-not-vesper-pool\");\n        _;\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param _keeperAddress keeper address to add.\n     */\n    function addKeeper(address _keeperAddress) external onlyGovernor {\n        require(keepers.add(_keeperAddress), \"add-keeper-failed\");\n    }\n\n    /**\n     * @notice Create keeper list\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\n     */\n    function init() external onlyGovernor {\n        require(address(keepers) == address(0), \"keeper-list-already-created\");\n        // Prepare keeper list\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\n        keepers = IAddressList(_factory.createList());\n        require(keepers.add(_msgSender()), \"add-keeper-failed\");\n    }\n\n    /**\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\n     * @param _newStrategy Address of new strategy\n     */\n    function migrate(address _newStrategy) external virtual override onlyPool {\n        require(_newStrategy != address(0), \"new-strategy-address-is-zero\");\n        require(IStrategy(_newStrategy).pool() == pool, \"not-valid-new-strategy\");\n        _beforeMigration(_newStrategy);\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param _keeperAddress keeper address to remove.\n     */\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\n        require(keepers.remove(_keeperAddress), \"remove-keeper-failed\");\n    }\n\n    /**\n     * @notice Update fee collector\n     * @param _feeCollector fee collector address\n     */\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\n        require(_feeCollector != address(0), \"fee-collector-address-is-zero\");\n        require(_feeCollector != feeCollector, \"fee-collector-is-same\");\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\n        feeCollector = _feeCollector;\n    }\n\n    /**\n     * @notice Update swap manager address\n     * @param _swapManager swap manager address\n     */\n    function updateSwapManager(address _swapManager) external onlyGovernor {\n        require(_swapManager != address(0), \"sm-address-is-zero\");\n        require(_swapManager != address(swapManager), \"sm-is-same\");\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\n        swapManager = ISwapManager(_swapManager);\n    }\n\n    /// @dev Approve all required tokens\n    function approveToken() external onlyKeeper {\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n    }\n\n    /**\n     * @dev Withdraw collateral token from lending pool.\n     * @param _amount Amount of collateral token\n     */\n    function withdraw(uint256 _amount) external override onlyPool {\n        _withdraw(_amount);\n    }\n\n    /**\n     * @dev Rebalance profit, loss and investment of this strategy\n     */\n    function rebalance() external override onlyKeeper {\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _reinvest();\n    }\n\n    /**\n     * @dev sweep given token to feeCollector of strategy\n     * @param _fromToken token address to sweep\n     */\n    function sweepERC20(address _fromToken) external override onlyKeeper {\n        require(feeCollector != address(0), \"fee-collector-not-set\");\n        require(_fromToken != address(collateralToken), \"not-allowed-to-sweep-collateral\");\n        require(!isReservedToken(_fromToken), \"not-allowed-to-sweep\");\n        if (_fromToken == ETH) {\n            Address.sendValue(payable(feeCollector), address(this).balance);\n        } else {\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\n        }\n    }\n\n    /// @notice Returns address of token correspond to collateral token\n    function token() external view override returns (address) {\n        return receiptToken;\n    }\n\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\n    function convertFrom18(uint256 amount) public pure virtual returns (uint256) {\n        return amount;\n    }\n\n    /**\n     * @notice Calculate total value of asset under management\n     * @dev Report total value in collateral token\n     */\n    function totalValue() external view virtual override returns (uint256 _value);\n\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool);\n\n    /**\n     * @notice some strategy may want to prepare before doing migration. \n        Example In Maker old strategy want to give vault ownership to new strategy\n     * @param _newStrategy .\n     */\n    function _beforeMigration(address _newStrategy) internal virtual;\n\n    /**\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\n     * excess debt, if any.\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\n     */\n    function _generateReport()\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n        _profit = _realizeProfit(_totalDebt);\n        _loss = _realizeLoss(_totalDebt);\n        _payback = _liquidate(_excessDebt);\n    }\n\n    /**\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\n     * @param _from address of from token\n     * @param _to address of to token\n     * @param _amountIn Amount to be swapped\n     * @param _minAmountOut minimum acceptable return amount\n     */\n    function _safeSwap(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _minAmountOut\n    ) internal {\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\n        if (_minAmountOut == 0) _minAmountOut = 1;\n        if (amountOut != 0) {\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\n                _amountIn,\n                _minAmountOut,\n                path,\n                address(this),\n                block.timestamp + 30\n            );\n        }\n    }\n\n    function _withdraw(uint256 _amount) internal virtual;\n\n    function _approveToken(uint256 _amount) internal virtual;\n\n    // Some strategies may not have rewards hence they do not need this function.\n    //solhint-disable-next-line no-empty-blocks\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\n\n    /**\n     * @notice Withdraw collateral to payback excess debt in pool.\n     * @param _excessDebt Excess debt of strategy in collateral token\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\n     */\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\n\n    /**\n     * @notice Calculate earning and withdraw/convert it into collateral token.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return _profit Profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\n\n    /**\n     * @notice Calculate loss\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\n\n    /**\n     * @notice Reinvest collateral.\n     * @dev Once we file report back in pool, we might have some collateral in hand\n     * which we want to reinvest aka deposit in lender/provider.\n     */\n    function _reinvest() internal virtual;\n}\n"
    },
    "contracts/interfaces/bloq/ISwapManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ninterface ISwapManager {\n    event OracleCreated(address indexed _sender, address indexed _newOracle);\n\n    function N_DEX() external view returns (uint256);\n\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\n\n    function bestOutputFixedInput(\n        address _from,\n        address _to,\n        uint256 _amountIn\n    )\n        external\n        view\n        returns (\n            address[] memory path,\n            uint256 amountOut,\n            uint256 rIdx\n        );\n\n    function bestPathFixedInput(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountOut);\n\n    function bestInputFixedOutput(\n        address _from,\n        address _to,\n        uint256 _amountOut\n    )\n        external\n        view\n        returns (\n            address[] memory path,\n            uint256 amountIn,\n            uint256 rIdx\n        );\n\n    function bestPathFixedOutput(\n        address _from,\n        address _to,\n        uint256 _amountOut,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountIn);\n\n    function safeGetAmountsOut(\n        uint256 _amountIn,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function unsafeGetAmountsOut(\n        uint256 _amountIn,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function safeGetAmountsIn(\n        uint256 _amountOut,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function unsafeGetAmountsIn(\n        uint256 _amountOut,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function comparePathsFixedInput(\n        address[] memory pathA,\n        address[] memory pathB,\n        uint256 _amountIn,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountOut);\n\n    function comparePathsFixedOutput(\n        address[] memory pathA,\n        address[] memory pathB,\n        uint256 _amountOut,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountIn);\n\n    function ours(address a) external view returns (bool);\n\n    function oracleCount() external view returns (uint256);\n\n    function oracleAt(uint256 idx) external view returns (address);\n\n    function getOracle(\n        address _tokenA,\n        address _tokenB,\n        uint256 _period,\n        uint256 _i\n    ) external view returns (address);\n\n    function createOracle(\n        address _tokenA,\n        address _tokenB,\n        uint256 _period,\n        uint256 _i\n    ) external returns (address oracleAddr);\n\n    function consultForFree(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _period,\n        uint256 _i\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\n\n    /// get the data we want and pay the gas to update\n    function consult(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _period,\n        uint256 _i\n    )\n        external\n        returns (\n            uint256 amountOut,\n            uint256 lastUpdatedAt,\n            bool updated\n        );\n}\n"
    },
    "contracts/interfaces/bloq/IAddressList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IAddressList {\n    function add(address a) external returns (bool);\n\n    function remove(address a) external returns (bool);\n\n    function get(address a) external view returns (uint256);\n\n    function contains(address a) external view returns (bool);\n\n    function length() external view returns (uint256);\n\n    function grantRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/interfaces/bloq/IAddressListFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IAddressListFactory {\n    function ours(address a) external view returns (bool);\n\n    function listCount() external view returns (uint256);\n\n    function listAt(uint256 idx) external view returns (address);\n\n    function createList() external returns (address listaddr);\n}\n"
    },
    "contracts/interfaces/vesper/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IStrategy {\n    function rebalance() external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function feeCollector() external view returns (address);\n\n    function isReservedToken(address _token) external view returns (bool);\n\n    function migrate(address _newStrategy) external;\n\n    function token() external view returns (address);\n\n    function totalValue() external view returns (uint256);\n\n    function pool() external view returns (address);\n}\n"
    },
    "contracts/interfaces/vesper/IVesperPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVesperPool is IERC20 {\n    function deposit() external payable;\n\n    function deposit(uint256 _share) external;\n\n    function governor() external returns (address);\n\n    function keepers() external returns (address);\n\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external;\n\n    function resetApproval() external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function withdrawETH(uint256 _amount) external;\n\n    function whitelistedWithdraw(uint256 _amount) external;\n\n    function feeCollector() external view returns (address);\n\n    function pricePerShare() external view returns (uint256);\n\n    function token() external view returns (address);\n\n    function tokensHere() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalValue() external view returns (uint256);\n\n    function withdrawFee() external view returns (uint256);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/strategies/maker/VesperMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./MakerStrategy.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Vesper DAI pool to earn interest.\nabstract contract VesperMakerStrategy is MakerStrategy {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _vPool,\n        bytes32 _collateralType\n    ) MakerStrategy(_pool, _cm, _swapManager, _vPool, _collateralType) {\n        require(IVesperPool(_vPool).token() == DAI, \"not-a-valid-dai-pool\");\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(DAI).safeApprove(address(receiptToken), _amount);\n    }\n\n    function _getDaiBalance() internal view override returns (uint256) {\n        return (IVesperPool(receiptToken).pricePerShare() * IVesperPool(receiptToken).balanceOf(address(this))) / 1e18;\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal override {\n        IVesperPool(receiptToken).deposit(_amount);\n    }\n\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\n        uint256 _vAmount = (_amount * 1e18) / IVesperPool(receiptToken).pricePerShare();\n        IVesperPool(receiptToken).whitelistedWithdraw(_vAmount);\n    }\n\n    function _rebalanceDaiInLender() internal override {\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\n        uint256 _daiBalance = _getDaiBalance();\n        if (_daiBalance > _daiDebt) {\n            _withdrawDaiFromLender(_daiBalance - _daiDebt);\n        }\n    }\n}\n"
    },
    "contracts/strategies/maker/VesperMakerStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./VesperMakerStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract VesperMakerStrategyETH is VesperMakerStrategy {\n    string public constant NAME = \"Vesper-Maker-Strategy-ETH\";\n    string public constant VERSION = \"3.0.0\";\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _vPool\n    ) VesperMakerStrategy(_pool, _cm, _swapManager, _vPool, \"ETH-A\") {}\n}\n"
    },
    "contracts/strategies/maker/CompoundMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./MakerStrategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Compound to earn interest.\nabstract contract CompoundMakerStrategy is MakerStrategy {\n    using SafeERC20 for IERC20;\n\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n    CToken internal immutable cToken;\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _receiptToken,\n        bytes32 _collateralType\n    ) MakerStrategy(_pool, _cm, _swapManager, _receiptToken, _collateralType) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        cToken = CToken(_receiptToken);\n    }\n\n    /**\n     * @notice Report total value of this strategy\n     * @dev Make sure to return value in collateral token.\n     * @dev Total value = DAI earned + COMP earned + Collateral locked in Maker\n     */\n    function totalValue() external view virtual override returns (uint256 _totalValue) {\n        uint256 _daiBalance = _getDaiBalance();\n        uint256 _debt = cm.getVaultDebt(address(this));\n        if (_daiBalance > _debt) {\n            uint256 _daiEarned = _daiBalance - _debt;\n            (, _totalValue) = swapManager.bestPathFixedInput(DAI, address(collateralToken), _daiEarned, 0);\n        }\n\n        uint256 _compAccrued = COMPTROLLER.compAccrued(address(this));\n        if (_compAccrued != 0) {\n            (, uint256 _compAsCollateral) =\n                swapManager.bestPathFixedInput(COMP, address(collateralToken), _compAccrued, 0);\n            _totalValue += _compAsCollateral;\n        }\n        _totalValue += convertFrom18(cm.getVaultBalance(address(this)));\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == receiptToken || _token == COMP;\n    }\n\n    /**\n     * @notice Returns true if pool is underwater.\n     * @notice Underwater - If debt is greater than earning of pool.\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\n     * @dev There can be a scenario when someone calls claimComp() periodically which will\n     * leave compAccrued = 0 and pool might be underwater. Call rebalance() to liquidate COMP.\n     */\n    function isUnderwater() public view override returns (bool) {\n        uint256 _compAccrued = COMPTROLLER.compAccrued(address(this));\n        uint256 _daiEarned;\n        if (_compAccrued != 0) {\n            (, _daiEarned) = swapManager.bestPathFixedInput(COMP, DAI, _compAccrued, 0);\n        }\n        return cm.getVaultDebt(address(this)) > (_getDaiBalance() + _daiEarned);\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(DAI).safeApprove(address(receiptToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(COMP).approve(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /// @notice Claim rewardToken from lender and convert it into DAI\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        COMPTROLLER.claimComp(address(this), _markets);\n\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\n        if (_compAmount > 0) {\n            _safeSwap(COMP, _toToken, _compAmount, 1);\n        }\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal override {\n        if (_amount != 0) {\n            require(cToken.mint(_amount) == 0, \"deposit-in-compound-failed\");\n        }\n    }\n\n    function _getDaiBalance() internal view override returns (uint256) {\n        return (cToken.balanceOf(address(this)) * cToken.exchangeRateStored()) / 1e18;\n    }\n\n    /**\n     * @dev Rebalance DAI in lender. If lender has more DAI than DAI debt in Maker\n     * then withdraw excess DAI from lender. If lender is short on DAI, underwater,\n     * then deposit DAI to lender.\n     * @dev There may be a scenario where we do not have enough DAI to deposit to\n     * lender, in that case pool will be underwater even after rebalanceDai.\n     */\n    function _rebalanceDaiInLender() internal override {\n        uint256 _daiDebtInMaker = cm.getVaultDebt(address(this));\n        uint256 _daiInLender = _getDaiBalance();\n        if (_daiInLender > _daiDebtInMaker) {\n            _withdrawDaiFromLender(_daiInLender - _daiDebtInMaker);\n        } else if (_daiInLender < _daiDebtInMaker) {\n            // We have more DAI debt in Maker than DAI in lender\n            uint256 _daiNeeded = _daiDebtInMaker - _daiInLender;\n            uint256 _daiBalanceHere = IERC20(DAI).balanceOf(address(this));\n            if (_daiBalanceHere > _daiNeeded) {\n                _depositDaiToLender(_daiNeeded);\n            } else {\n                _depositDaiToLender(_daiBalanceHere);\n            }\n        }\n    }\n\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\n        require(cToken.redeemUnderlying(_amount) == 0, \"withdraw-from-compound-failed\");\n    }\n}\n"
    },
    "contracts/interfaces/compound/ICompound.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface CToken {\n    function accrueInterest() external returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function mint() external payable; // For ETH\n\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function transfer(address user, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address owner,\n        address user,\n        uint256 amount\n    ) external returns (bool);\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n\ninterface Comptroller {\n    function claimComp(address holder, address[] memory) external;\n\n    function compAccrued(address holder) external view returns (uint256);\n}\n"
    },
    "contracts/strategies/maker/CompoundMakerStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundMakerStrategy.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n//solhint-disable no-empty-blocks\ncontract CompoundMakerStrategyETH is CompoundMakerStrategy {\n    string public constant NAME = \"Compound-Maker-Strategy-ETH\";\n    string public constant VERSION = \"3.0.0\";\n\n    // cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager\n    ) CompoundMakerStrategy(_pool, _cm, _swapManager, 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643, \"ETH-A\") {}\n}\n"
    },
    "contracts/interfaces/token/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface TokenLike is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/strategies/compound/CompoundStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundStrategy.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH/WETH in Compound and earn interest.\ncontract CompoundStrategyETH is CompoundStrategy {\n    string public constant NAME = \"Compound-Strategy-ETH\";\n    string public constant VERSION = \"3.0.0\";\n\n    // cETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5\n    constructor(address _pool, address _swapManager)\n        CompoundStrategy(_pool, _swapManager, 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5)\n    {}\n\n    /// @dev Only receive ETH from either cToken or WETH\n    receive() external payable {\n        require(msg.sender == address(cToken) || msg.sender == WETH, \"not-allowed-to-send-ether\");\n    }\n\n    /**\n     * @dev This hook get called after collateral is redeemed from Compound\n     * Vesper deals in WETH as collateral so convert ETH to WETH\n     */\n    function _afterRedeem() internal override {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n\n    /**\n     * @dev During reinvest we have WETH as collateral but Compound accepts ETH.\n     * Withdraw ETH from WETH before calling mint in Compound.\n     */\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            TokenLike(WETH).withdraw(_collateralBalance);\n            cToken.mint{value: _collateralBalance}();\n        }\n    }\n}\n"
    },
    "contracts/strategies/compound/CompoundStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and earn interest.\nabstract contract CompoundStrategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    CToken internal immutable cToken;\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        cToken = CToken(_receiptToken);\n    }\n\n    /**\n     * @notice Calculate total value using COMP accrued and cToken\n     * @dev Report total value in collateral token\n     */\n    function totalValue() external view override returns (uint256 _totalValue) {\n        uint256 _compAccrued = COMPTROLLER.compAccrued(address(this));\n        if (_compAccrued != 0) {\n            (, _totalValue) = swapManager.bestPathFixedInput(COMP, address(collateralToken), _compAccrued, 0);\n        }\n        _totalValue += _convertToCollateral(cToken.balanceOf(address(this)));\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == address(cToken) || _token == COMP;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal override {\n        collateralToken.approve(pool, _amount);\n        collateralToken.approve(address(cToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(COMP).approve(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Claim COMP and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        _claimComp();\n        IERC20(COMP).safeTransfer(_newStrategy, IERC20(COMP).balanceOf(address(this)));\n    }\n\n    /// @notice Claim comp\n    function _claimComp() internal {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        COMPTROLLER.claimComp(address(this), _markets);\n    }\n\n    /// @notice Claim COMP and convert COMP into collateral token.\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        _claimComp();\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\n        if (_compAmount != 0) {\n            _safeSwap(COMP, _toToken, _compAmount, 1);\n        }\n    }\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(_excessDebt);\n        }\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Compound.\n     * @dev Claim COMP and convert into collateral\n     * @dev If somehow we got some collateral token in strategy then we want to\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\n        if (_collateralBalance < _totalDebt) {\n            _loss = _totalDebt - _collateralBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Compound\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            require(cToken.mint(_collateralBalance) == 0, \"deposit-to-compound-failed\");\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(_amount);\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\n        // Get minimum of _amount and _collateralBalance\n        return _withdrawHere(_amount < _collateralBalance ? _amount : _collateralBalance);\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        if (_amount != 0) {\n            require(cToken.redeemUnderlying(_amount) == 0, \"withdraw-from-compound-failed\");\n            _afterRedeem();\n        }\n        return _amount;\n    }\n\n    /**\n     * @dev Compound support ETH as collateral not WETH. This hook will take\n     * care of conversion from WETH to ETH and vice versa.\n     * @dev This will be used in ETH strategy only, hence empty implementation\n     */\n    //solhint-disable-next-line no-empty-blocks\n    function _afterRedeem() internal virtual {}\n\n    function _convertToCollateral(uint256 _cTokenAmount) internal view returns (uint256) {\n        return (_cTokenAmount * cToken.exchangeRateStored()) / 1e18;\n    }\n}\n"
    },
    "contracts/strategies/compound/CompoundStrategyWBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundStrategy.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit WBTC in Compound and earn interest.\ncontract CompoundStrategyWBTC is CompoundStrategy {\n    string public constant NAME = \"Compound-Strategy-WBTC\";\n    string public constant VERSION = \"3.0.0\";\n\n    // cWBTC = 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4\n    constructor(address _pool, address _swapManager)\n        CompoundStrategy(_pool, _swapManager, 0xC11b1268C1A384e55C48c2391d8d480264A3A7F4)\n    {}\n}\n"
    },
    "contracts/strategies/compound/CompoundStrategyUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundStrategy.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit USDC in Compound and earn interest.\ncontract CompoundStrategyUSDC is CompoundStrategy {\n    string public constant NAME = \"Compound-Strategy-USDC\";\n    string public constant VERSION = \"3.0.0\";\n\n    // cUSDC = 0x39AA39c021dfbaE8faC545936693aC917d5E7563\n    constructor(address _pool, address _swapManager)\n        CompoundStrategy(_pool, _swapManager, 0x39AA39c021dfbaE8faC545936693aC917d5E7563)\n    {}\n}\n"
    },
    "contracts/strategies/compound/CompoundStrategyDAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundStrategy.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit DAI in Compound and earn interest.\ncontract CompoundStrategyDAI is CompoundStrategy {\n    string public constant NAME = \"Compound-Strategy-DAI\";\n    string public constant VERSION = \"3.0.0\";\n\n    // cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643\n    constructor(address _pool, address _swapManager)\n        CompoundStrategy(_pool, _swapManager, 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643)\n    {}\n}\n"
    },
    "contracts/strategies/curve/Crv3PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/vesper/IVesperPool.sol\";\nimport \"../Strategy.sol\";\nimport \"./Crv3PoolMgr.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and earn interest.\nabstract contract Crv3PoolStrategy is Crv3PoolMgr, Strategy {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) private reservedToken;\n    uint256 public immutable collIdx;\n    uint256 public prevLpRate;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx\n    ) Strategy(_pool, _swapManager, THREECRV) Crv3PoolMgr() {\n        require(_collateralIdx < COINS.length, \"Invalid collateral for 3Pool\");\n        require(COIN_ADDRS[_collateralIdx] == IVesperPool(_pool).token(), \"Collateral does not match\");\n        reservedToken[THREECRV] = true;\n        reservedToken[COIN_ADDRS[_collateralIdx]] = true;\n        reservedToken[CRV] = true;\n        collIdx = _collateralIdx;\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view override returns (bool) {\n        return reservedToken[_token];\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        collateralToken.approve(pool, _amount);\n        collateralToken.approve(crvPool, _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(CRV).approve(address(swapManager.ROUTERS(i)), _amount);\n        }\n        IERC20(crvLp).approve(crvGauge, _amount);\n    }\n\n    function _reinvest() internal override {\n        uint256 amt = collateralToken.balanceOf(address(this));\n        if (amt != 0) {\n            uint256[3] memory depositAmounts;\n            depositAmounts[collIdx] = amt;\n            THREEPOOL.add_liquidity(depositAmounts, 1);\n            _stakeAllLpToGauge();\n        }\n    }\n\n    function _withdraw(uint256 _amount) internal override {\n        _unstakeAndWithdrawAsCollateral(_amount);\n        collateralToken.safeTransfer(pool, IERC20(collateralToken).balanceOf(address(this)));\n    }\n\n    function _unstakeAndWithdrawAsCollateral(uint256 _amount) internal returns (uint256) {\n        if (_amount == 0) return 0;\n        (uint256 lpToWithdraw, uint256 unstakeAmt) = calcWithdrawLpAs(_amount, collIdx);\n        _unstakeLpFromGauge(unstakeAmt);\n        _withdrawAsFromCrvPool(lpToWithdraw, convertFrom18(minimumLpPrice()), collIdx);\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate total value of asset under management\n     * @dev Report total value in collateral token\n     */\n    function totalValue() external view override returns (uint256 _value) {\n        _value = collateralToken.balanceOf(address(this)) + getLpValueAs(totalLp(), collIdx);\n    }\n\n    /**\n     * @notice some strategy may want to prepare before doing migration. \n        Example In Maker old strategy want to give vault ownership to new strategy\n     */\n    function _beforeMigration(\n        address /*_newStrategy*/\n    ) internal override {\n        _unstakeAllLpFromGauge();\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        _claimCrv();\n        uint256 amt = IERC20(CRV).balanceOf(address(this));\n        if (amt != 0) {\n            _safeSwap(CRV, _toToken, amt, 1);\n        }\n    }\n\n    /**\n     * @notice Withdraw collateral to payback excess debt in pool.\n     * @param _excessDebt Excess debt of strategy in collateral token\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\n     */\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        _payback = _unstakeAndWithdrawAsCollateral(_excessDebt);\n    }\n\n    function _realizeGross(uint256 _totalDebt) internal returns (uint256 _profit, uint256 _loss) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _collateralBalance = getLpValueAs(totalLp(), collIdx);\n        if (_collateralBalance > _totalDebt) {\n            _unstakeAndWithdrawAsCollateral(_collateralBalance - _totalDebt);\n        } else {\n            _loss = _totalDebt - _collateralBalance;\n        }\n        _profit = collateralToken.balanceOf(address(this));\n    }\n\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {}\n\n    function _realizeLoss(uint256 _totalDebt) internal override returns (uint256 _loss) {}\n\n    function _generateReport()\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n        (_profit, _loss) = _realizeGross(_totalDebt);\n        _payback = _liquidate(_excessDebt);\n    }\n}\n"
    },
    "contracts/strategies/curve/Crv3PoolMgr.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"./CrvPoolMgrBase.sol\";\nimport \"../../interfaces/curve/IStableSwap3Pool.sol\";\nimport \"../../interfaces/chainlink/IAggregatorV3.sol\";\n\ncontract Crv3PoolMgr is CrvPoolMgrBase {\n    IStableSwap3Pool public constant THREEPOOL = IStableSwap3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n    address public constant THREECRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address public constant GAUGE = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\n\n    /* solhint-disable var-name-mixedcase */\n    string[3] public COINS = [\"DAI\", \"USDC\", \"USDT\"];\n\n    address[3] public COIN_ADDRS = [\n        0x6B175474E89094C44Da98b954EedeAC495271d0F, // DAI\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, // USDC\n        0xdAC17F958D2ee523a2206206994597C13D831ec7 // USDT\n    ];\n    address[3] public PRICE_FEEDS = [\n        0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9, // DAI-USD\n        0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6, // USDC-USD\n        0x3E7d1eAB13ad0104d2750B8863b489D65364e32D // USDT-USD\n    ];\n\n    /* solhint-enable */\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() CrvPoolMgrBase(address(THREEPOOL), THREECRV, GAUGE) {}\n\n    function getExternalPrice(uint256 i) public view returns (int256 price, uint8 decimals) {\n        IAggregatorV3 priceFeed = IAggregatorV3(PRICE_FEEDS[i]);\n        // There's other data here we may want to use to validate the oracle (timestamp esp.)\n        (, price, , , ) = priceFeed.latestRoundData();\n        // Note, these are all 8 for the three contracts we're getting, so we could skip this call\n        decimals = 8;\n    }\n\n    function getMinExternalPrice() public view returns (int256 price, uint8 decimals) {\n        for (uint256 i = 0; i < COINS.length; i++) {\n            (int256 tp, uint8 td) = getExternalPrice(i);\n            if ((price == 0) || (tp < price)) {\n                price = tp;\n                decimals = td;\n            }\n        }\n        require(price != 0, \"Unsafe - no price from oracle\");\n    }\n\n    function getAllExternalPrices() public view returns (int256[3] memory prices, uint8[3] memory decimals) {\n        for (uint256 i = 0; i < COINS.length; i++) {\n            (prices[i], decimals[i]) = getExternalPrice(i);\n        }\n    }\n\n    function minimumLpPrice() public view returns (uint256) {\n        (int256 minPrice, uint8 minDec) = getMinExternalPrice();\n        return (THREEPOOL.get_virtual_price() * uint256(minPrice)) / (10**uint256(minDec));\n    }\n\n    function get3PoolBalances(uint256 _lpAmount) public view returns (uint256[3] memory balances) {\n        // the balance of a given coin is equal to our share of the lp supply,\n        // times the underlying balance, less the pool withdrawal fee\n        for (uint256 i = 0; i < COINS.length; i++) {\n            balances[i] =\n                (((THREEPOOL.balances(i) * _lpAmount) / (IERC20(crvLp).totalSupply())) *\n                    (uint256(1e10) - THREEPOOL.fee())) /\n                uint256(1e10);\n        }\n    }\n\n    function _depositToCrvPool(\n        uint256 _daiAmount,\n        uint256 _usdcAmount,\n        uint256 _usdtAmount\n    ) internal {\n        uint256[3] memory depositAmounts = [_daiAmount, _usdcAmount, _usdtAmount];\n        // using 1 for min_mint_amount, but we may want to improve this logic\n        THREEPOOL.add_liquidity(depositAmounts, 1);\n    }\n\n    function _withdrawAsFromCrvPool(\n        uint256 _lpAmount,\n        uint256 _minAmt,\n        uint256 i\n    ) internal {\n        THREEPOOL.remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(i)), _minAmt);\n    }\n\n    function _withdrawAllAs(uint256 i) internal {\n        uint256 lpAmt = IERC20(crvLp).balanceOf(address(this));\n        if (lpAmt != 0) {\n            THREEPOOL.remove_liquidity_one_coin(lpAmt, SafeCast.toInt128(int256(i)), 0);\n        }\n    }\n\n    function calcWithdrawLpAs(uint256 _amtNeeded, uint256 i)\n        public\n        view\n        returns (uint256 lpToWithdraw, uint256 unstakeAmt)\n    {\n        uint256 lp = IERC20(crvLp).balanceOf(address(this));\n        uint256 tlp = lp + IERC20(crvGauge).balanceOf(address(this));\n        lpToWithdraw = (_amtNeeded * tlp) / getLpValueAs(tlp, i);\n        lpToWithdraw = (lpToWithdraw > tlp) ? tlp : lpToWithdraw;\n        if (lpToWithdraw > lp) {\n            unstakeAmt = lpToWithdraw - lp;\n        }\n    }\n\n    function getLpValueAs(uint256 _lpAmount, uint256 i) public view returns (uint256) {\n        return (_lpAmount != 0) ? THREEPOOL.calc_withdraw_one_coin(_lpAmount, SafeCast.toInt128(int256(i))) : 0;\n    }\n\n    function estimateFeeImpact(uint256 _amount) public view returns (uint256) {\n        return (_amount * (uint256(1e10) - estimatedFees())) / (uint256(1e10));\n    }\n\n    function estimatedFees() public view returns (uint256) {\n        return THREEPOOL.fee() * 3;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/strategies/curve/CrvPoolMgrBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/curve/ILiquidityGaugeV2.sol\";\nimport \"../../interfaces/curve/ITokenMinter.sol\";\n\nabstract contract CrvPoolMgrBase {\n    using SafeERC20 for IERC20;\n\n    address public immutable crvPool;\n    address public immutable crvLp;\n    address public immutable crvGauge;\n    address public constant CRV_MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n    address public constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n\n    constructor(\n        address _pool,\n        address _lp,\n        address _gauge\n    ) {\n        require(_pool != address(0x0), \"CRVMgr: invalid curve pool\");\n        require(_lp != address(0x0), \"CRVMgr: invalid lp token\");\n        require(_gauge != address(0x0), \"CRVMgr: invalid gauge\");\n\n        crvPool = _pool;\n        crvLp = _lp;\n        crvGauge = _gauge;\n    }\n\n    // requires that gauge has approval for lp token\n    function _stakeAllLpToGauge() internal {\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\n        if (balance != 0) {\n            ILiquidityGaugeV2(crvGauge).deposit(balance);\n        }\n    }\n\n    function _unstakeAllLpFromGauge() internal {\n        _unstakeLpFromGauge(IERC20(crvGauge).balanceOf(address(this)));\n    }\n\n    function _unstakeLpFromGauge(uint256 _amount) internal {\n        if (_amount != 0) {\n            ILiquidityGaugeV2(crvGauge).withdraw(_amount);\n        }\n    }\n\n    function _claimCrv() internal {\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\n    }\n\n    function _setCheckpoint() internal {\n        ILiquidityGaugeV2(crvGauge).user_checkpoint(address(this));\n    }\n\n    function claimableRewards() public view returns (uint256) {\n        //Total Mintable - Previously minted\n        return\n            ILiquidityGaugeV2(crvGauge).integrate_fraction(address(this)) -\n            ITokenMinter(CRV_MINTER).minted(address(this), crvGauge);\n    }\n\n    function totalLp() public view returns (uint256 total) {\n        total = IERC20(crvLp).balanceOf(address(this)) + IERC20(crvGauge).balanceOf(address(this));\n    }\n\n    // if using this contract on its own.\n    function approveLpForGauge() external {\n        IERC20(crvLp).safeApprove(crvGauge, 0);\n        IERC20(crvLp).safeApprove(crvGauge, type(uint256).max);\n    }\n\n    // if using this contract on its own.\n    function approveTokenForPool(address _token) external {\n        IERC20(_token).safeApprove(crvPool, 0);\n        IERC20(_token).safeApprove(crvPool, type(uint256).max);\n    }\n}\n"
    },
    "contracts/interfaces/curve/IStableSwap3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.3;\n\n// Not a complete interface, but should have what we need\ninterface IStableSwap3Pool {\n    function coins() external view returns (address[] memory);\n\n    function fee() external view returns (uint256); // fee * 1e10\n\n    function lp_token() external view returns (address);\n\n    function A() external view returns (uint256);\n\n    function A_precise() external view returns (uint256);\n\n    function balances(uint256 i) external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\n\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external returns (uint256);\n\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\n\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\n        external\n        returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 _min_amount\n    ) external;\n}\n/* solhint-enable */\n"
    },
    "contracts/interfaces/chainlink/IAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/* solhint-disable */\n// Renamed from AggregatorV3Interface for convention\n// From: https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n/* solhint-enable */\n"
    },
    "contracts/interfaces/curve/ILiquidityGaugeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// Not a complete interface, but should have what we need\ninterface ILiquidityGaugeV2 is IERC20 {\n    function deposit(uint256 _value) external;\n\n    function withdraw(uint256 _value) external;\n\n    function claimable_tokens(address addr) external returns (uint256);\n\n    function integrate_fraction(address addr) external view returns (uint256);\n\n    function user_checkpoint(address addr) external returns (bool);\n}\n/* solhint-enable */\n"
    },
    "contracts/interfaces/curve/ITokenMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.3;\n\n// Not a complete interface, but should have what we need\ninterface ITokenMinter {\n    function minted(address arg0, address arg1) external view returns (uint256);\n\n    function mint(address gauge_addr) external;\n}\n/* solhint-enable */\n"
    },
    "contracts/strategies/curve/Crv3PoolStrategyUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Crv3PoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Crv3PoolStrategyUSDC is Crv3PoolStrategy {\n    string public constant NAME = \"Curve-3pool-USDC-Strategy\";\n    string public constant VERSION = \"3.0.0\";\n\n    constructor(address _pool, address _swapManager) Crv3PoolStrategy(_pool, _swapManager, 1) {}\n\n    function convertFrom18(uint256 amount) public pure override returns (uint256) {\n        return amount / (10**12);\n    }\n}\n"
    },
    "contracts/strategies/curve/Crv3PoolStrategyDAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Crv3PoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Crv3PoolStrategyDAI is Crv3PoolStrategy {\n    string public constant NAME = \"Curve-3pool-DAI-Strategy\";\n    string public constant VERSION = \"3.0.0\";\n\n    constructor(address _pool, address _swapManager) Crv3PoolStrategy(_pool, _swapManager, 0) {}\n}\n"
    },
    "contracts/test/Crv3PoolMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../strategies/curve/Crv3PoolMgr.sol\";\n\ncontract Crv3PoolMock is Crv3PoolMgr {\n    /* solhint-disable */\n    constructor() Crv3PoolMgr() {}\n\n    /* solhint-enable */\n\n    function depositToCrvPool(\n        uint256 _daiAmount,\n        uint256 _usdcAmount,\n        uint256 _usdtAmount\n    ) external {\n        _depositToCrvPool(_daiAmount, _usdcAmount, _usdtAmount);\n    }\n\n    function withdrawAsFromCrvPool(\n        uint256 _lpAmount,\n        uint256 _minDai,\n        uint256 i\n    ) external {\n        _withdrawAsFromCrvPool(_lpAmount, _minDai, i);\n    }\n\n    function withdrawAllAs(uint256 i) external {\n        _withdrawAllAs(i);\n    }\n\n    function stakeAllLpToGauge() external {\n        _stakeAllLpToGauge();\n    }\n\n    function unstakeAllLpFromGauge() external {\n        _unstakeAllLpFromGauge();\n    }\n\n    function unstakeLpFromGauge(uint256 _amount) external {\n        _unstakeLpFromGauge(_amount);\n    }\n\n    function claimCrv() external {\n        _claimCrv();\n    }\n\n    function setCheckpoint() external {\n        _setCheckpoint();\n    }\n}\n"
    },
    "contracts/test/ITokenTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface TokenLikeTest is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n\n    function decimals() external view returns (uint256);\n}\n"
    },
    "contracts/pool/PoolShareToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../Governed.sol\";\nimport \"../Pausable.sol\";\nimport \"../interfaces/bloq/IAddressList.sol\";\nimport \"../interfaces/bloq/IAddressListFactory.sol\";\n\n/// @title Holding pool share token\n// solhint-disable no-empty-blocks\nabstract contract PoolShareToken is ERC20Permit, Pausable, ReentrancyGuard, Governed {\n    using SafeERC20 for IERC20;\n    IERC20 public immutable token;\n    IAddressList public immutable feeWhitelist;\n    uint256 public constant MAX_BPS = 10_000;\n    address public feeCollector; // fee collector address\n    uint256 public withdrawFee; // withdraw fee for this pool\n\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\n    event UpdatedWithdrawFee(uint256 previousWithdrawFee, uint256 newWithdrawFee);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) ERC20Permit(_name) ERC20(_name, _symbol) {\n        token = IERC20(_token);\n        IAddressListFactory factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\n        IAddressList _feeWhitelist = IAddressList(factory.createList());\n        feeWhitelist = _feeWhitelist;\n    }\n\n    /**\n     * @notice Update fee collector address for this pool\n     * @param _newFeeCollector new fee collector address\n     */\n    function updateFeeCollector(address _newFeeCollector) external onlyGovernor {\n        require(_newFeeCollector != address(0), \"fee-collector-address-is-zero\");\n        require(feeCollector != _newFeeCollector, \"same-fee-collector\");\n        emit UpdatedFeeCollector(feeCollector, _newFeeCollector);\n        feeCollector = _newFeeCollector;\n    }\n\n    /**\n     * @notice Update withdraw fee for this pool\n     * @dev Format: 1500 = 15% fee, 100 = 1%\n     * @param _newWithdrawFee new withdraw fee\n     */\n    function updateWithdrawFee(uint256 _newWithdrawFee) external onlyGovernor {\n        require(feeCollector != address(0), \"fee-collector-not-set\");\n        require(_newWithdrawFee <= 10000, \"withdraw-fee-limit-reached\");\n        require(withdrawFee != _newWithdrawFee, \"same-withdraw-fee\");\n        emit UpdatedWithdrawFee(withdrawFee, _newWithdrawFee);\n        withdrawFee = _newWithdrawFee;\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and receive pool shares depending on the current share price.\n     * @param _amount ERC20 token amount.\n     */\n    function deposit(uint256 _amount) external virtual nonReentrant whenNotPaused {\n        _deposit(_amount);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens with permit aka gasless approval.\n     * @param _amount ERC20 token amount.\n     * @param _deadline The time at which signature will expire\n     * @param _v The recovery byte of the signature\n     * @param _r Half of the ECDSA signature pair\n     * @param _s Half of the ECDSA signature pair\n     */\n    function depositWithPermit(\n        uint256 _amount,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external virtual nonReentrant whenNotPaused {\n        IERC20Permit(address(token)).permit(_msgSender(), address(this), _amount, _deadline, _v, _r, _s);\n        _deposit(_amount);\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * Withdraw fee, if any, will be deduced from given shares and transferred to feeCollector.\n     * Burn remaining shares and return collateral.\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function withdraw(uint256 _shares) external virtual nonReentrant whenNotShutdown {\n        _withdraw(_shares);\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * @dev Burn shares and return collateral. No withdraw fee will be assessed\n     * when this function is called. Only some white listed address can call this function.\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function whitelistedWithdraw(uint256 _shares) external virtual nonReentrant whenNotShutdown {\n        require(feeWhitelist.contains(_msgSender()), \"not-a-white-listed-address\");\n        _withdrawWithoutFee(_shares);\n    }\n\n    /**\n     * @notice Transfer tokens to multiple recipient\n     * @dev Address array and amount array are 1:1 and are in order.\n     * @param _recipients array of recipient addresses\n     * @param _amounts array of token amounts\n     * @return true/false\n     */\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool) {\n        require(_recipients.length == _amounts.length, \"input-length-mismatch\");\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(transfer(_recipients[i], _amounts[i]), \"multi-transfer-failed\");\n        }\n        return true;\n    }\n\n    /**\n     * @notice Get price per share\n     * @dev Return value will be in token defined decimals.\n     */\n    function pricePerShare() public view returns (uint256) {\n        if (totalSupply() == 0 || totalValue() == 0) {\n            return convertFrom18(1e18);\n        }\n        return (totalValue() * 1e18) / totalSupply();\n    }\n\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\n    function convertFrom18(uint256 _amount) public view virtual returns (uint256) {\n        return _amount;\n    }\n\n    /// @dev Returns the token stored in the pool. It will be in token defined decimals.\n    function tokensHere() public view virtual returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @dev Returns sum of token locked in other contracts and token stored in the pool.\n     * Default tokensHere. It will be in token defined decimals.\n     */\n    function totalValue() public view virtual returns (uint256);\n\n    /**\n     * @dev Hook that is called just before burning tokens. This withdraw collateral from withdraw queue\n     * @param _share Pool share in 18 decimals\n     */\n    function _beforeBurning(uint256 _share) internal virtual returns (uint256) {}\n\n    /**\n     * @dev Hook that is called just after burning tokens.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     */\n    function _afterBurning(uint256 _amount) internal virtual returns (uint256) {\n        token.safeTransfer(_msgSender(), _amount);\n        return _amount;\n    }\n\n    /**\n     * @dev Hook that is called just before minting new tokens. To be used i.e.\n     * if the deposited amount is to be transferred from user to this contract.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     */\n    function _beforeMinting(uint256 _amount) internal virtual {\n        token.safeTransferFrom(_msgSender(), address(this), _amount);\n    }\n\n    /**\n     * @dev Hook that is called just after minting new tokens. To be used i.e.\n     * if the deposited amount is to be transferred to a different contract.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     */\n    function _afterMinting(uint256 _amount) internal virtual {}\n\n    /**\n     * @dev Calculate shares to mint based on the current share price and given amount.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     * @return share amount in 18 decimal\n     */\n    function _calculateShares(uint256 _amount) internal view returns (uint256) {\n        require(_amount != 0, \"amount-is-0\");\n        uint256 _share = ((_amount * 1e18) / pricePerShare());\n        return _amount > ((_share * pricePerShare()) / 1e18) ? _share + 1 : _share;\n    }\n\n    /// @dev Deposit incoming token and mint pool token i.e. shares.\n    function _deposit(uint256 _amount) internal {\n        uint256 _shares = _calculateShares(_amount);\n        _beforeMinting(_amount);\n        _mint(_msgSender(), _shares);\n        _afterMinting(_amount);\n        emit Deposit(_msgSender(), _shares, _amount);\n    }\n\n    /// @dev Burns shares and returns the collateral value, after fee, of those.\n    function _withdraw(uint256 _shares) internal {\n        if (withdrawFee == 0) {\n            _withdrawWithoutFee(_shares);\n        } else {\n            require(_shares != 0, \"share-is-0\");\n            uint256 _fee = (_shares * withdrawFee) / MAX_BPS;\n            uint256 _sharesAfterFee = _shares - _fee;\n            uint256 _amountWithdrawn = _beforeBurning(_sharesAfterFee);\n            // Recalculate proportional share on actual amount withdrawn\n            uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\n\n            // Using convertFrom18() to avoid dust.\n            // Pool share token is in 18 decimal and collatoral token decimal is <=18.\n            // Anything less than 10**(18-collortalTokenDecimal) is dust.\n            if (convertFrom18(_proportionalShares) < convertFrom18(_sharesAfterFee)) {\n                // Recalculate shares to withdraw, fee and shareAfterFee\n                _shares = (_proportionalShares * MAX_BPS) / (MAX_BPS - withdrawFee);\n                _fee = _shares - _proportionalShares;\n                _sharesAfterFee = _proportionalShares;\n            }\n            _burn(_msgSender(), _sharesAfterFee);\n            _transfer(_msgSender(), feeCollector, _fee);\n            _afterBurning(_amountWithdrawn);\n            emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\n        }\n    }\n\n    /// @dev Burns shares and returns the collateral value of those.\n    function _withdrawWithoutFee(uint256 _shares) internal {\n        require(_shares != 0, \"share-is-0\");\n        uint256 _amountWithdrawn = _beforeBurning(_shares);\n        uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\n        if (convertFrom18(_proportionalShares) < convertFrom18(_shares)) {\n            _shares = _proportionalShares;\n        }\n        _burn(_msgSender(), _shares);\n        _afterBurning(_amountWithdrawn);\n        emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping (address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                _PERMIT_TYPEHASH,\n                owner,\n                spender,\n                value,\n                _useNonce(owner),\n                deadline\n            )\n        );\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n */\ncontract Pausable is Context {\n    event Paused(address account);\n    event Shutdown(address account);\n    event Unpaused(address account);\n    event Open(address account);\n\n    bool public paused;\n    bool public stopEverything;\n\n    modifier whenNotPaused() {\n        require(!paused, \"Pausable: paused\");\n        _;\n    }\n    modifier whenPaused() {\n        require(paused, \"Pausable: not paused\");\n        _;\n    }\n\n    modifier whenNotShutdown() {\n        require(!stopEverything, \"Pausable: shutdown\");\n        _;\n    }\n\n    modifier whenShutdown() {\n        require(stopEverything, \"Pausable: not shutdown\");\n        _;\n    }\n\n    /// @dev Pause contract operations, if contract is not paused.\n    function _pause() internal virtual whenNotPaused {\n        paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\n    function _unpause() internal virtual whenPaused whenNotShutdown {\n        paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /// @dev Shutdown contract operations, if not already shutdown.\n    function _shutdown() internal virtual whenNotShutdown {\n        stopEverything = true;\n        paused = true;\n        emit Shutdown(_msgSender());\n    }\n\n    /// @dev Open contract operations, if contract is in shutdown state\n    function _open() internal virtual whenShutdown {\n        stopEverything = false;\n        emit Open(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                typeHash,\n                name,\n                version,\n                block.chainid,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/pool/VTokenBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./PoolShareToken.sol\";\nimport \"../interfaces/vesper/IStrategy.sol\";\n\ncontract VTokenBase is PoolShareToken {\n    using SafeERC20 for IERC20;\n\n    struct StrategyConfig {\n        bool active;\n        uint256 interestFee; // Strategy fee\n        uint256 debtRate; //strategy can not borrow large amount in short durations. Can set big limit for trusted strategy\n        uint256 lastRebalance;\n        uint256 totalDebt; // Total outstanding debt strategy has\n        uint256 totalLoss; // Total loss that strategy has realized\n        uint256 totalProfit; // Total gain that strategy has realized\n        uint256 debtRatio; // % of asset allocation\n    }\n\n    mapping(address => StrategyConfig) public strategy;\n    uint256 public totalDebtRatio; // this will keep some buffer amount in pool\n    uint256 public totalDebt;\n    address[] public strategies;\n    address[] public withdrawQueue;\n\n    IAddressList public keepers;\n    IAddressList public maintainers;\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    event StrategyAdded(address indexed strategy, uint256 interestFee, uint256 debtRatio, uint256 debtRate);\n    event StrategyMigrated(\n        address indexed oldStrategy,\n        address indexed newStrategy,\n        uint256 interestFee,\n        uint256 debtRatio,\n        uint256 debtRate\n    );\n    event UpdatedInterestFee(address indexed strategy, uint256 interestFee);\n    event UpdatedStrategyDebtParams(address indexed strategy, uint256 debtRatio, uint256 debtRate);\n    event EarningReported(\n        address indexed strategy,\n        uint256 profit,\n        uint256 loss,\n        uint256 payback,\n        uint256 strategyDebt,\n        uint256 poolDebt,\n        uint256 creditLine\n    );\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address _token // solhint-disable-next-line no-empty-blocks\n    ) PoolShareToken(name, symbol, _token) {}\n\n    modifier onlyKeeper() {\n        require(keepers.contains(_msgSender()), \"caller-is-not-a-keeper\");\n        _;\n    }\n\n    modifier onlyMaintainer() {\n        require(maintainers.contains(_msgSender()), \"caller-is-not-maintainer\");\n        _;\n    }\n\n    modifier onlyStrategy() {\n        require(strategy[_msgSender()].active, \"caller-is-not-active-strategy\");\n        _;\n    }\n\n    ///////////////////////////// Only Keeper ///////////////////////////////\n    function pause() external onlyKeeper {\n        _pause();\n    }\n\n    function unpause() external onlyKeeper {\n        _unpause();\n    }\n\n    function shutdown() external onlyKeeper {\n        _shutdown();\n    }\n\n    function open() external onlyKeeper {\n        _open();\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Create keeper and maintainer list\n     * @dev Create lists and add governor into the list.\n     * NOTE: Any function with onlyKeeper and onlyMaintainer modifier will not work until this function is called.\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\n     */\n    function init() external onlyGovernor {\n        require(address(keepers) == address(0), \"list-already-created\");\n        IAddressListFactory _factory = IAddressListFactory(0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3);\n        keepers = IAddressList(_factory.createList());\n        maintainers = IAddressList(_factory.createList());\n        // List creator i.e. governor can do job of keeper and maintainer.\n        keepers.add(governor);\n        maintainers.add(governor);\n    }\n\n    /**\n     * @notice Add given address in provided address list.\n     * @dev Use it to add keeper in keepers list and to add address in feeWhitelist\n     * @param _listToUpdate address of AddressList contract.\n     * @param _addressToAdd address which we want to add in AddressList.\n     */\n    function addInList(address _listToUpdate, address _addressToAdd) external onlyKeeper {\n        require(IAddressList(_listToUpdate).add(_addressToAdd), \"add-in-list-failed\");\n    }\n\n    /**\n     * @notice Remove given address from provided address list.\n     * @dev Use it to remove keeper from keepers list and to remove address from feeWhitelist\n     * @param _listToUpdate address of AddressList contract.\n     * @param _addressToRemove address which we want to remove from AddressList.\n     */\n    function removeFromList(address _listToUpdate, address _addressToRemove) external onlyKeeper {\n        require(IAddressList(_listToUpdate).remove(_addressToRemove), \"remove-from-list-failed\");\n    }\n\n    /// @dev Add strategy\n    function addStrategy(\n        address _strategy,\n        uint256 _interestFee,\n        uint256 _debtRatio,\n        uint256 _debtRate\n    ) public onlyGovernor {\n        require(_strategy != address(0), \"strategy-address-is-zero\");\n        require(!strategy[_strategy].active, \"strategy-already-added\");\n        totalDebtRatio = totalDebtRatio + _debtRatio;\n        require(totalDebtRatio <= MAX_BPS, \"totalDebtRatio-above-max_bps\");\n        require(_interestFee <= MAX_BPS, \"interest-fee-above-max_bps\");\n        StrategyConfig memory newStrategy =\n            StrategyConfig({\n                active: true,\n                interestFee: _interestFee,\n                debtRatio: _debtRatio,\n                totalDebt: 0,\n                totalProfit: 0,\n                totalLoss: 0,\n                debtRate: _debtRate,\n                lastRebalance: block.number\n            });\n        strategy[_strategy] = newStrategy;\n        strategies.push(_strategy);\n        withdrawQueue.push(_strategy);\n        emit StrategyAdded(_strategy, _interestFee, _debtRatio, _debtRate);\n    }\n\n    function migrateStrategy(address _old, address _new) external onlyGovernor {\n        require(_new != address(0), \"new-address-is-zero\");\n        require(_old != address(0), \"old-address-is-zero\");\n        require(IStrategy(_new).pool() == address(this), \"not-valid-new-strategy\");\n        require(IStrategy(_old).pool() == address(this), \"not-valid-old-strategy\");\n        require(strategy[_old].active, \"strategy-already-migrated\");\n        require(!strategy[_new].active, \"strategy-already-added\");\n        StrategyConfig memory _newStrategy =\n            StrategyConfig({\n                active: true,\n                interestFee: strategy[_old].interestFee,\n                debtRatio: strategy[_old].debtRatio,\n                totalDebt: strategy[_old].totalDebt,\n                totalProfit: 0,\n                totalLoss: 0,\n                debtRate: strategy[_old].debtRate,\n                lastRebalance: strategy[_old].lastRebalance\n            });\n        strategy[_old].debtRatio = 0;\n        strategy[_old].totalDebt = 0;\n        strategy[_old].debtRate = 0;\n        strategy[_old].active = false;\n        strategy[_new] = _newStrategy;\n\n        IStrategy(_old).migrate(_new);\n\n        // Strategies and withdrawQueue has same length but we still want\n        // to iterate over them in different loop.\n        for (uint256 i = 0; i < strategies.length; i++) {\n            if (strategies[i] == _old) {\n                strategies[i] = _new;\n                break;\n            }\n        }\n        for (uint256 i = 0; i < withdrawQueue.length; i++) {\n            if (withdrawQueue[i] == _old) {\n                withdrawQueue[i] = _new;\n                break;\n            }\n        }\n        emit StrategyMigrated(\n            _old,\n            _new,\n            strategy[_new].interestFee,\n            strategy[_new].debtRatio,\n            strategy[_new].debtRate\n        );\n    }\n\n    function updateInterestFee(address _strategy, uint256 _interestFee) external onlyGovernor {\n        require(_strategy != address(0), \"strategy-address-is-zero\");\n        require(strategy[_strategy].active, \"strategy-not-active\");\n        require(_interestFee <= MAX_BPS, \"interest-fee-above-max_bps\");\n        strategy[_strategy].interestFee = _interestFee;\n        emit UpdatedInterestFee(_strategy, _interestFee);\n    }\n\n    /**\n     * @dev Update debt ratio.  A strategy is retired when debtRatio is 0\n     */\n    function updateDebtRatio(address _strategy, uint256 _debtRatio) external onlyMaintainer {\n        require(strategy[_strategy].active, \"strategy-not-active\");\n        totalDebtRatio = totalDebtRatio - strategy[_strategy].debtRatio + _debtRatio;\n        require(totalDebtRatio <= MAX_BPS, \"totalDebtRatio-above-max_bps\");\n        strategy[_strategy].debtRatio = _debtRatio;\n        emit UpdatedStrategyDebtParams(_strategy, _debtRatio, strategy[_strategy].debtRate);\n    }\n\n    /**\n     * @dev Update debtRate per block.\n     */\n    function updateDebtRate(address _strategy, uint256 _debtRate) external onlyKeeper {\n        require(strategy[_strategy].active, \"strategy-not-active\");\n        strategy[_strategy].debtRate = _debtRate;\n        emit UpdatedStrategyDebtParams(_strategy, strategy[_strategy].debtRatio, _debtRate);\n    }\n\n    /// @dev update withdrawal queue\n    function updateWithdrawQueue(address[] memory _withdrawQueue) external onlyMaintainer {\n        uint256 _length = _withdrawQueue.length;\n        require(_length > 0, \"withdrawal-queue-blank\");\n        require(_length == withdrawQueue.length && _length == strategies.length, \"incorrect-withdraw-queue-length\");\n        for (uint256 i = 0; i < _length; i++) {\n            require(strategy[_withdrawQueue[i]].active, \"invalid-strategy\");\n        }\n        withdrawQueue = _withdrawQueue;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     @dev Strategy call this in regular interval.\n     @param _profit yield generated by strategy. Strategy get performance fee on this amount\n     @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\n     @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount. \n      when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately. \n     */\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external onlyStrategy {\n        require(token.balanceOf(_msgSender()) >= (_profit + _payback), \"insufficient-balance-in-strategy\");\n        if (_loss != 0) {\n            _reportLoss(_msgSender(), _loss);\n        }\n\n        uint256 _overLimitDebt = _excessDebt(_msgSender());\n        uint256 _actualPayback = _min(_overLimitDebt, _payback);\n        if (_actualPayback != 0) {\n            strategy[_msgSender()].totalDebt -= _actualPayback;\n            totalDebt -= _actualPayback;\n        }\n        uint256 _creditLine = _availableCreditLimit(_msgSender());\n        if (_creditLine != 0) {\n            strategy[_msgSender()].totalDebt += _creditLine;\n            totalDebt += _creditLine;\n        }\n        uint256 _totalPayback = _profit + _actualPayback;\n        if (_totalPayback < _creditLine) {\n            token.safeTransfer(_msgSender(), _creditLine - _totalPayback);\n        } else if (_totalPayback > _creditLine) {\n            token.safeTransferFrom(_msgSender(), address(this), _totalPayback - _creditLine);\n        }\n        if (_profit != 0) {\n            strategy[_msgSender()].totalProfit += _profit;\n            _transferInterestFee(_profit);\n        }\n        emit EarningReported(\n            _msgSender(),\n            _profit,\n            _loss,\n            _actualPayback,\n            strategy[_msgSender()].totalDebt,\n            totalDebt,\n            _creditLine\n        );\n    }\n\n    /**\n     * @dev Transfer given ERC20 token to feeCollector\n     * @param _fromToken Token address to sweep\n     */\n    function sweepERC20(address _fromToken) external virtual onlyKeeper {\n        require(_fromToken != address(token), \"not-allowed-to-sweep\");\n        require(feeCollector != address(0), \"fee-collector-not-set\");\n        IERC20(_fromToken).safeTransfer(feeCollector, IERC20(_fromToken).balanceOf(address(this)));\n    }\n\n    /**\n    @dev debt above current debt limit\n    */\n    function excessDebt(address _strategy) external view returns (uint256) {\n        return _excessDebt(_strategy);\n    }\n\n    /**\n    @dev available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy. \n    // credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\n    // when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\n    */\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\n        return _availableCreditLimit(_strategy);\n    }\n\n    /**\n     * @notice Get total debt of given strategy\n     */\n    function totalDebtOf(address _strategy) external view returns (uint256) {\n        return strategy[_strategy].totalDebt;\n    }\n\n    /// @dev Returns total value of vesper pool, in terms of collateral token\n    function totalValue() public view override returns (uint256) {\n        return totalDebt + tokensHere();\n    }\n\n    function _withdrawCollateral(uint256 _amount) internal virtual {\n        // Withdraw amount from queue\n        uint256 _debt;\n        uint256 _balanceAfter;\n        uint256 _balanceBefore;\n        uint256 _amountWithdrawn;\n        uint256 _amountNeeded = _amount;\n        uint256 _totalAmountWithdrawn;\n        for (uint256 i; i < withdrawQueue.length; i++) {\n            _debt = strategy[withdrawQueue[i]].totalDebt;\n            if (_debt == 0) {\n                continue;\n            }\n            if (_amountNeeded > _debt) {\n                // Should not withdraw more than current debt of strategy.\n                _amountNeeded = _debt;\n            }\n            _balanceBefore = tokensHere();\n            //solhint-disable no-empty-blocks\n            try IStrategy(withdrawQueue[i]).withdraw(_amountNeeded) {} catch {\n                continue;\n            }\n            _balanceAfter = tokensHere();\n            _amountWithdrawn = _balanceAfter - _balanceBefore;\n            // Adjusting totalDebt. Assuming that during next reportEarning(), strategy will report loss if amountWithdrawn < _amountNeeded\n            strategy[withdrawQueue[i]].totalDebt -= _amountWithdrawn;\n            totalDebt -= _amountWithdrawn;\n            _totalAmountWithdrawn += _amountWithdrawn;\n            if (_totalAmountWithdrawn >= _amount) {\n                // withdraw done\n                break;\n            }\n            _amountNeeded = _amount - _totalAmountWithdrawn;\n        }\n    }\n\n    /**\n     * @dev Before burning hook.\n     * withdraw amount from strategies\n     */\n    function _beforeBurning(uint256 _share) internal override returns (uint256 actualWithdrawn) {\n        uint256 _amount = (_share * pricePerShare()) / 1e18;\n        uint256 _balanceNow = tokensHere();\n        if (_amount > _balanceNow) {\n            _withdrawCollateral(_amount - _balanceNow);\n            _balanceNow = tokensHere();\n        }\n        actualWithdrawn = _balanceNow < _amount ? _balanceNow : _amount;\n    }\n\n    /**\n    @dev when a strategy report loss, its debtRatio decrease to get fund back quickly.\n    */\n    function _reportLoss(address _strategy, uint256 _loss) internal {\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        require(_currentDebt >= _loss, \"loss-too-high\");\n        strategy[_strategy].totalLoss += _loss;\n        strategy[_strategy].totalDebt -= _loss;\n        totalDebt -= _loss;\n        uint256 _deltaDebtRatio = _min((_loss * MAX_BPS) / totalValue(), strategy[_strategy].debtRatio);\n        strategy[_strategy].debtRatio -= _deltaDebtRatio;\n        totalDebtRatio -= _deltaDebtRatio;\n    }\n\n    function _excessDebt(address _strategy) internal view returns (uint256) {\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        if (stopEverything) {\n            return _currentDebt;\n        }\n        uint256 _maxDebt = (strategy[_strategy].debtRatio * totalValue()) / MAX_BPS;\n        return _currentDebt > _maxDebt ? (_currentDebt - _maxDebt) : 0;\n    }\n\n    function _availableCreditLimit(address _strategy) internal view returns (uint256) {\n        if (stopEverything) {\n            return 0;\n        }\n        uint256 _totalValue = totalValue();\n        uint256 _maxDebt = (strategy[_strategy].debtRatio * _totalValue) / MAX_BPS;\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        if (_currentDebt >= _maxDebt) {\n            return 0;\n        }\n        uint256 _poolDebtLimit = (totalDebtRatio * _totalValue) / MAX_BPS;\n        if (totalDebt >= _poolDebtLimit) {\n            return 0;\n        }\n        uint256 _available = _maxDebt - _currentDebt;\n        _available = _min(_min(tokensHere(), _available), _poolDebtLimit - totalDebt);\n        _available = _min(\n            (block.number - strategy[_strategy].lastRebalance) * strategy[_strategy].debtRate,\n            _available\n        );\n        return _available;\n    }\n\n    /**\n    @dev strategy get interest fee in pool share token\n    */\n    function _transferInterestFee(uint256 _profit) internal {\n        uint256 _fee = (_profit * strategy[_msgSender()].interestFee) / MAX_BPS;\n        if (_fee != 0) {\n            _fee = _calculateShares(_fee);\n            _mint(_msgSender(), _fee);\n        }\n    }\n\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "contracts/pool/VUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./VTokenBase.sol\";\n\n//solhint-disable no-empty-blocks\ncontract VUSDC is VTokenBase {\n    string public constant VERSION = \"3.0.0\";\n\n    // USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\n    constructor() VTokenBase(\"vUSDC Pool\", \"vUSDC\", 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48) {}\n\n    /// @dev Convert from 18 decimals to token defined decimals.\n    function convertFrom18(uint256 _value) public pure override returns (uint256) {\n        return _value / (10**12);\n    }\n}\n"
    },
    "contracts/pool/VETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./VTokenBase.sol\";\nimport \"../interfaces/token/IToken.sol\";\n\ncontract VETH is VTokenBase {\n    string public constant VERSION = \"3.0.0\";\n    TokenLike public immutable weth;\n    bool private withdrawInETH = false;\n\n    // WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n    constructor() VTokenBase(\"vETH Pool\", \"vETH\", 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) {\n        weth = TokenLike(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n    }\n\n    /// @dev Handle incoming ETH to the contract address.\n    receive() external payable {\n        if (msg.sender != address(weth)) {\n            deposit();\n        }\n    }\n\n    /// @dev Burns tokens/shares and returns the ETH value, after fee, of those.\n    function withdrawETH(uint256 _shares) external whenNotShutdown nonReentrant {\n        withdrawInETH = true;\n        _withdraw(_shares);\n        withdrawInETH = false;\n    }\n\n    /**\n     * @dev After burning hook, it will be called during withdrawal process.\n     * It will withdraw collateral from strategy and transfer it to user.\n     */\n    function _afterBurning(uint256 _amount) internal override returns (uint256) {\n        if (withdrawInETH) {\n            weth.withdraw(_amount);\n            Address.sendValue(payable(_msgSender()), _amount);\n        } else {\n            super._afterBurning(_amount);\n        }\n        return _amount;\n    }\n\n    /**\n     * @dev Receives ETH and grants new tokens/shares to the sender depending\n     * on the value of pool's share.\n     */\n    function deposit() public payable whenNotPaused nonReentrant {\n        uint256 shares = _calculateShares(msg.value);\n        // Wraps ETH in WETH\n        weth.deposit{value: msg.value}();\n        _mint(_msgSender(), shares);\n    }\n}\n"
    },
    "contracts/pool/VDAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./VTokenBase.sol\";\n\n//solhint-disable no-empty-blocks\ncontract VDAI is VTokenBase {\n    string public constant VERSION = \"3.0.0\";\n\n    // DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F\n    constructor() VTokenBase(\"vDAI Pool\", \"vDAI\", 0x6B175474E89094C44Da98b954EedeAC495271d0F) {}\n}\n"
    },
    "contracts/test/IVesperPoolTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\ninterface IVesperPoolTest is IVesperPool {\n    function strategies(uint256) external view returns (address);\n}\n"
    },
    "contracts/interfaces/aave/IAave.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface AaveLendingPoolAddressesProvider {\n    function getLendingPool() external view returns (address);\n\n    function getAddress(bytes32 id) external view returns (address);\n}\n\ninterface AToken is IERC20 {\n    /**\n     * @dev Returns the address of the incentives controller contract\n     **/\n    function getIncentivesController() external view returns (address);\n}\n\ninterface IAaveIncentivesController {\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n}\n\ninterface AaveLendingPool {\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n}\n\ninterface AaveProtocolDataProvider {\n    function getReserveTokensAddresses(address asset)\n        external\n        view\n        returns (\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress\n        );\n\n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 availableLiquidity,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n}\n\n//solhint-disable func-name-mixedcase\ninterface StakedAave is IERC20 {\n    function claimRewards(address to, uint256 amount) external;\n\n    function cooldown() external;\n\n    function stake(address onBehalfOf, uint256 amount) external;\n\n    function redeem(address to, uint256 amount) external;\n\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\n\n    function stakersCooldowns(address staker) external view returns (uint256);\n\n    function COOLDOWN_SECONDS() external view returns (uint256);\n\n    function UNSTAKE_WINDOW() external view returns (uint256);\n}\n"
    },
    "contracts/strategies/aave/AaveCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../interfaces/aave/IAave.sol\";\n\n/// @title This contract provide core operations for Aave\nabstract contract AaveCore {\n    //solhint-disable-next-line const-name-snakecase\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\n\n    AaveLendingPoolAddressesProvider public aaveAddressesProvider =\n        AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\n    AaveLendingPool public aaveLendingPool;\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\n\n    AToken internal immutable aToken;\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\n    event UpdatedAddressesProvider(address _previousProvider, address _newProvider);\n\n    constructor(address _receiptToken) {\n        require(_receiptToken != address(0), \"aToken-address-is-zero\");\n        aToken = AToken(_receiptToken);\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\n    }\n\n    ///////////////////////// External access functions /////////////////////////\n\n    /**\n     * @notice Initiate cooldown to unstake aave.\n     * @dev We only want to call this function when cooldown is expired and\n     * that's the reason we have 'if' condition.\n     * @dev Child contract should expose this function as external and onlyKeeper\n     */\n    function _startCooldown() internal returns (bool) {\n        if (canStartCooldown()) {\n            stkAAVE.cooldown();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Unstake Aave from stakedAave contract\n     * @dev We want to unstake as soon as favorable condition exit\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\n     * @dev Child contract should expose this function as external and onlyKeeper\n     */\n    function _unstakeAave() internal {\n        stkAAVE.redeem(address(this), type(uint256).max);\n    }\n\n    /**\n     * @notice Update address of Aave LendingPoolAddressesProvider\n     * @dev We will use new address to fetch lendingPool address and update that too.\n     * @dev Child contract should expose this function as external and onlyGovernor\n     */\n    function _updateAddressesProvider(address _newAddressesProvider) internal {\n        require(_newAddressesProvider != address(0), \"provider-address-is-zero\");\n        require(address(aaveAddressesProvider) != _newAddressesProvider, \"same-addresses-provider\");\n        emit UpdatedAddressesProvider(address(aaveAddressesProvider), _newAddressesProvider);\n        aaveAddressesProvider = AaveLendingPoolAddressesProvider(_newAddressesProvider);\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /// @notice Returns true if Aave can be unstaked\n    function canUnstake() external view returns (bool) {\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\n    }\n\n    /// @notice Returns true if we should start cooldown\n    function canStartCooldown() public view returns (bool) {\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\n    }\n\n    /// @notice Return cooldown related timestamps\n    function cooldownData()\n        public\n        view\n        returns (\n            uint256 _cooldownStart,\n            uint256 _cooldownEnd,\n            uint256 _unstakeEnd\n        )\n    {\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\n    }\n\n    /**\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\n     */\n    function _claimAave() internal returns (uint256) {\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        if (_cooldownStart == 0 || block.timestamp > _unstakeEnd) {\n            // claim stkAave when its first rebalance or unstake period passed.\n            address[] memory _assets = new address[](1);\n            _assets[0] = address(aToken);\n            IAaveIncentivesController(aToken.getIncentivesController()).claimRewards(\n                _assets,\n                type(uint256).max,\n                address(this)\n            );\n        }\n        // Fetch and check again for next action.\n        (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\n            stkAAVE.redeem(address(this), type(uint256).max);\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\n            stkAAVE.cooldown();\n        }\n\n        stkAAVE.claimRewards(address(this), type(uint256).max);\n        return IERC20(AAVE).balanceOf(address(this));\n    }\n\n    /// @notice Deposit asset into Aave\n    function _deposit(address _asset, uint256 _amount) internal {\n        if (_amount != 0) {\n            aaveLendingPool.deposit(_asset, _amount, address(this), 0);\n        }\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @dev Check we have enough aToken and liquidity to support this withdraw\n     * @param _asset Address of asset to withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(\n        address _asset,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\n        // In this case we might have more aToken compare to available liquidity in Aave and any\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _amount against available liquidity.\n        (uint256 _availableLiquidity, , , , , , , , , ) = aaveProtocolDataProvider.getReserveData(_asset);\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\n        return _withdraw(_asset, _to, _min(_amount, _min(_aTokenBalance, _availableLiquidity)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to given address\n     * @param _asset Address of asset to withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _withdraw(\n        address _asset,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (_amount != 0) {\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, \"withdrawn-amount-is-not-correct\");\n        }\n        return _amount;\n    }\n\n    /**\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\n     * not want to reset/start cooldown.\n     */\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\n        return stkAAVE.balanceOf(address(this)) != 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\n    }\n\n    /// @dev Return true, if cooldown is over and we are in unstake window.\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function _isReservedToken(address _token) internal view returns (bool) {\n        return _token == address(aToken) || _token == AAVE || _token == address(stkAAVE);\n    }\n\n    /// @notice Returns minimum of 2 given numbers\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "contracts/strategies/maker/AaveMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./MakerStrategy.sol\";\nimport \"../aave/AaveCore.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Aave to earn interest.\nabstract contract AaveMakerStrategy is MakerStrategy, AaveCore {\n    using SafeERC20 for IERC20;\n\n    //solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _receiptToken,\n        bytes32 _collateralType\n    ) MakerStrategy(_pool, _cm, _swapManager, _receiptToken, _collateralType) AaveCore(_receiptToken) {}\n\n    /// @notice Initiate cooldown to unstake aave.\n    function startCooldown() external onlyKeeper returns (bool) {\n        return _startCooldown();\n    }\n\n    /// @notice Unstake Aave from stakedAave contract\n    function unstakeAave() external onlyKeeper {\n        _unstakeAave();\n    }\n\n    /**\n     * @notice Update address of Aave LendingPoolAddressesProvider\n     * @dev We will use new address to fetch lendingPool address and update that too.\n     */\n    function updateAddressesProvider(address _newAddressesProvider) external onlyGovernor {\n        _updateAddressesProvider(_newAddressesProvider);\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _isReservedToken(_token);\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(DAI).approve(address(aaveLendingPool), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(AAVE).approve(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Transfer StakeAave to newStrategy\n     * @param _newStrategy Address of newStrategy\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        super._beforeMigration(_newStrategy);\n        IERC20(stkAAVE).safeTransfer(_newStrategy, stkAAVE.balanceOf(address(this)));\n    }\n\n    /// @notice Claim Aave rewards and convert to _toToken.\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        uint256 _aaveAmount = _claimAave();\n        if (_aaveAmount > 0) {\n            _safeSwap(AAVE, _toToken, _aaveAmount, 1);\n        }\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal override {\n        aaveLendingPool.deposit(DAI, _amount, address(this), 0);\n    }\n\n    function _rebalanceDaiInLender() internal override {\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\n        uint256 _daiBalance = _getDaiBalance();\n        if (_daiBalance > _daiDebt) {\n            _withdrawDaiFromLender(_daiBalance - _daiDebt);\n        }\n    }\n\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\n        _safeWithdraw(DAI, address(this), _amount);\n    }\n\n    function _getDaiBalance() internal view override returns (uint256) {\n        return aToken.balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/strategies/maker/AaveMakerStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./AaveMakerStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract AaveMakerStrategyETH is AaveMakerStrategy {\n    string public constant NAME = \"Aave-Maker-Strategy-ETH\";\n    string public constant VERSION = \"3.0.0\";\n\n    // aDAI = 0x028171bCA77440897B824Ca71D1c56caC55b68A3\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager\n    ) AaveMakerStrategy(_pool, _cm, _swapManager, 0x028171bCA77440897B824Ca71D1c56caC55b68A3, \"ETH-A\") {}\n}\n"
    },
    "contracts/strategies/aave/AaveStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./AaveCore.sol\";\nimport \"../Strategy.sol\";\n\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\nabstract contract AaveStrategy is Strategy, AaveCore {\n    using SafeERC20 for IERC20;\n\n    //solhint-disable-next-line no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken\n    ) Strategy(_pool, _swapManager, _receiptToken) AaveCore(_receiptToken) {}\n\n    /// @notice Initiate cooldown to unstake aave.\n    function startCooldown() external onlyKeeper returns (bool) {\n        return _startCooldown();\n    }\n\n    /// @notice Unstake Aave from stakedAave contract\n    function unstakeAave() external onlyKeeper {\n        _unstakeAave();\n    }\n\n    /**\n     * @notice Update address of Aave LendingPoolAddressesProvider\n     * @dev We will use new address to fetch lendingPool address and update that too.\n     */\n    function updateAddressesProvider(address _newAddressesProvider) external onlyGovernor {\n        _updateAddressesProvider(_newAddressesProvider);\n    }\n\n    /**\n     * @notice Report total value\n     * @dev aToken and collateral are 1:1 so total aTokens are totalValue\n     */\n    function totalValue() external view virtual override returns (uint256) {\n        return aToken.balanceOf(address(this));\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _isReservedToken(_token);\n    }\n\n    /// @notice Large approval of token\n    function _approveToken(uint256 _amount) internal override {\n        collateralToken.approve(pool, _amount);\n        collateralToken.approve(address(aaveLendingPool), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(AAVE).approve(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Transfer StakeAave to newStrategy\n     * @param _newStrategy Address of newStrategy\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        uint256 _stkAaveAmount = stkAAVE.balanceOf(address(this));\n        if (_stkAaveAmount != 0) {\n            IERC20(stkAAVE).safeTransfer(_newStrategy, _stkAaveAmount);\n        }\n    }\n\n    /// @notice Claim Aave rewards and convert to _toToken.\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        uint256 _aaveAmount = _claimAave();\n        if (_aaveAmount > 0) {\n            _safeSwap(AAVE, _toToken, _aaveAmount, 1);\n        }\n    }\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(address(collateralToken), address(this), _excessDebt);\n        }\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Aave.\n     * @dev If somehow we got some collateral token in strategy then we want to\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance > _totalDebt) {\n            _withdraw(address(collateralToken), address(this), _aTokenBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance < _totalDebt) {\n            _loss = _totalDebt - _aTokenBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Aave\n    function _reinvest() internal override {\n        _deposit(address(collateralToken), collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to pool\n     * @param _amount Amount of collateral to withdraw.\n     */\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(address(collateralToken), pool, _amount);\n    }\n}\n"
    },
    "contracts/strategies/aave/AaveStrategyUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./AaveStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract AaveStrategyUSDC is AaveStrategy {\n    string public constant NAME = \"Aave-Strategy-USDC\";\n    string public constant VERSION = \"3.0.0\";\n\n    // aUSDC = 0xBcca60bB61934080951369a648Fb03DF4F96263C\n    constructor(address _pool, address _swapManager)\n        AaveStrategy(_pool, _swapManager, 0xBcca60bB61934080951369a648Fb03DF4F96263C)\n    {}\n}\n"
    },
    "contracts/strategies/aave/AaveStrategyDAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./AaveStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract AaveStrategyDAI is AaveStrategy {\n    string public constant NAME = \"Aave-Strategy-DAI\";\n    string public constant VERSION = \"3.0.0\";\n\n    // aDAI = 0x028171bCA77440897B824Ca71D1c56caC55b68A3\n    constructor(address _pool, address _swapManager)\n        AaveStrategy(_pool, _swapManager, 0x028171bCA77440897B824Ca71D1c56caC55b68A3)\n    {}\n}\n"
    },
    "contracts/test/SwapManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./OracleSimple.sol\";\nimport \"../interfaces/bloq/ISwapManager.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ncontract SwapManager is ISwapManager {\n    uint256 public constant override N_DEX = 2;\n    /* solhint-disable */\n    string[N_DEX] public DEXES = [\"UNISWAP\", \"SUSHISWAP\"];\n    IUniswapV2Router02[N_DEX] public override ROUTERS = [\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D),\n        IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F)\n    ];\n    IUniswapV2Factory[N_DEX] public FACTORIES = [\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f),\n        IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac)\n    ];\n    /* solhint-enable */\n\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    function bestOutputFixedInput(\n        address _from,\n        address _to,\n        uint256 _amountIn\n    )\n        external\n        view\n        override\n        returns (\n            address[] memory path,\n            uint256 amountOut,\n            uint256 rIdx\n        )\n    {\n        // Iterate through each DEX and evaluate the best output\n        for (uint256 i = 0; i < N_DEX; i++) {\n            (address[] memory tPath, uint256 tAmountOut) = bestPathFixedInput(_from, _to, _amountIn, i);\n            if (tAmountOut > amountOut) {\n                path = tPath;\n                amountOut = tAmountOut;\n                rIdx = i;\n            }\n        }\n        return (path, amountOut, rIdx);\n    }\n\n    function bestPathFixedInput(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _i\n    ) public view override returns (address[] memory path, uint256 amountOut) {\n        path = new address[](2);\n        path[0] = _from;\n        path[1] = _to;\n        if (_from == WETH || _to == WETH) {\n            amountOut = safeGetAmountsOut(_amountIn, path, _i)[path.length - 1];\n            return (path, amountOut);\n        }\n\n        address[] memory pathB = new address[](3);\n        pathB[0] = _from;\n        pathB[1] = WETH;\n        pathB[2] = _to;\n        // is one of these WETH\n        if (FACTORIES[_i].getPair(_from, _to) == address(0x0)) {\n            // does a direct liquidity pair not exist?\n            amountOut = safeGetAmountsOut(_amountIn, pathB, _i)[pathB.length - 1];\n            path = pathB;\n        } else {\n            // if a direct pair exists, we want to know whether pathA or path B is better\n            (path, amountOut) = comparePathsFixedInput(path, pathB, _amountIn, _i);\n        }\n    }\n\n    function bestInputFixedOutput(\n        address _from,\n        address _to,\n        uint256 _amountOut\n    )\n        external\n        view\n        override\n        returns (\n            address[] memory path,\n            uint256 amountIn,\n            uint256 rIdx\n        )\n    {\n        // Iterate through each DEX and evaluate the best input\n        for (uint256 i = 0; i < N_DEX; i++) {\n            (address[] memory tPath, uint256 tAmountIn) = bestPathFixedOutput(_from, _to, _amountOut, i);\n            if (amountIn == 0 || tAmountIn < amountIn) {\n                if (tAmountIn != 0) {\n                    path = tPath;\n                    amountIn = tAmountIn;\n                    rIdx = i;\n                }\n            }\n        }\n    }\n\n    function bestPathFixedOutput(\n        address _from,\n        address _to,\n        uint256 _amountOut,\n        uint256 _i\n    ) public view override returns (address[] memory path, uint256 amountIn) {\n        path = new address[](2);\n        path[0] = _from;\n        path[1] = _to;\n        if (_from == WETH || _to == WETH) {\n            amountIn = safeGetAmountsIn(_amountOut, path, _i)[0];\n            return (path, amountIn);\n        }\n\n        address[] memory pathB = new address[](3);\n        pathB[0] = _from;\n        pathB[1] = WETH;\n        pathB[2] = _to;\n\n        // is one of these WETH\n        if (FACTORIES[_i].getPair(_from, _to) == address(0x0)) {\n            // does a direct liquidity pair not exist?\n            amountIn = safeGetAmountsIn(_amountOut, pathB, _i)[0];\n            path = pathB;\n        } else {\n            // if a direct pair exists, we want to know whether pathA or path B is better\n            (path, amountIn) = comparePathsFixedOutput(path, pathB, _amountOut, _i);\n        }\n    }\n\n    // Rather than let the getAmountsOut call fail due to low liquidity, we\n    // catch the error and return 0 in place of the reversion\n    // this is useful when we want to proceed with logic\n    function safeGetAmountsOut(\n        uint256 _amountIn,\n        address[] memory _path,\n        uint256 _i\n    ) public view override returns (uint256[] memory result) {\n        try ROUTERS[_i].getAmountsOut(_amountIn, _path) returns (uint256[] memory amounts) {\n            result = amounts;\n        } catch {\n            result = new uint256[](_path.length);\n            result[0] = _amountIn;\n        }\n    }\n\n    // Just a wrapper for the uniswap call\n    // This can fail (revert) in two scenarios\n    // 1. (path.length == 2 && insufficient reserves)\n    // 2. (path.length > 2 and an intermediate pair has an output amount of 0)\n    function unsafeGetAmountsOut(\n        uint256 _amountIn,\n        address[] memory _path,\n        uint256 _i\n    ) public view override returns (uint256[] memory result) {\n        result = ROUTERS[_i].getAmountsOut(_amountIn, _path);\n    }\n\n    // Rather than let the getAmountsIn call fail due to low liquidity, we\n    // catch the error and return 0 in place of the reversion\n    // this is useful when we want to proceed with logic (occurs when amountOut is\n    // greater than available reserve (ds-math-sub-underflow)\n    function safeGetAmountsIn(\n        uint256 _amountOut,\n        address[] memory _path,\n        uint256 _i\n    ) public view override returns (uint256[] memory result) {\n        try ROUTERS[_i].getAmountsIn(_amountOut, _path) returns (uint256[] memory amounts) {\n            result = amounts;\n        } catch {\n            result = new uint256[](_path.length);\n            result[_path.length - 1] = _amountOut;\n        }\n    }\n\n    // Just a wrapper for the uniswap call\n    // This can fail (revert) in one scenario\n    // 1. amountOut provided is greater than reserve for out currency\n    function unsafeGetAmountsIn(\n        uint256 _amountOut,\n        address[] memory _path,\n        uint256 _i\n    ) public view override returns (uint256[] memory result) {\n        result = ROUTERS[_i].getAmountsIn(_amountOut, _path);\n    }\n\n    function comparePathsFixedInput(\n        address[] memory pathA,\n        address[] memory pathB,\n        uint256 _amountIn,\n        uint256 _i\n    ) public view override returns (address[] memory path, uint256 amountOut) {\n        path = pathA;\n        amountOut = safeGetAmountsOut(_amountIn, pathA, _i)[pathA.length - 1];\n        uint256 bAmountOut = safeGetAmountsOut(_amountIn, pathB, _i)[pathB.length - 1];\n        if (bAmountOut > amountOut) {\n            path = pathB;\n            amountOut = bAmountOut;\n        }\n    }\n\n    function comparePathsFixedOutput(\n        address[] memory pathA,\n        address[] memory pathB,\n        uint256 _amountOut,\n        uint256 _i\n    ) public view override returns (address[] memory path, uint256 amountIn) {\n        path = pathA;\n        amountIn = safeGetAmountsIn(_amountOut, pathA, _i)[0];\n        uint256 bAmountIn = safeGetAmountsIn(_amountOut, pathB, _i)[0];\n        if (bAmountIn < amountIn) {\n            path = pathB;\n            amountIn = bAmountIn;\n        }\n    }\n\n    // TWAP Oracle Factory\n    address[] private _oracles;\n    mapping(address => bool) private _isOurs;\n    // Pair -> period -> oracle\n    mapping(address => mapping(uint256 => address)) private _oraclesByPair;\n\n    function ours(address a) external view override returns (bool) {\n        return _isOurs[a];\n    }\n\n    function oracleCount() external view override returns (uint256) {\n        return _oracles.length;\n    }\n\n    function oracleAt(uint256 idx) external view override returns (address) {\n        require(idx < _oracles.length, \"Index exceeds list length\");\n        return _oracles[idx];\n    }\n\n    function getOracle(\n        address _tokenA,\n        address _tokenB,\n        uint256 _period,\n        uint256 _i\n    ) external view override returns (address) {\n        return _oraclesByPair[FACTORIES[_i].getPair(_tokenA, _tokenB)][_period];\n    }\n\n    function createOracle(\n        address _tokenA,\n        address _tokenB,\n        uint256 _period,\n        uint256 _i\n    ) external override returns (address oracleAddr) {\n        address pair = FACTORIES[_i].getPair(_tokenA, _tokenB);\n        require(pair != address(0), \"Nonexistant-pair\");\n        require(_oraclesByPair[pair][_period] == address(0), \"Oracle already exists\");\n\n        // create new oracle contract\n        oracleAddr = address(new OracleSimple(pair, _period));\n\n        // remember oracle\n        _oracles.push(oracleAddr);\n        _isOurs[oracleAddr] = true;\n        _oraclesByPair[pair][_period] = oracleAddr;\n\n        // log creation\n        emit OracleCreated(msg.sender, oracleAddr);\n    }\n\n    function consultForFree(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _period,\n        uint256 _i\n    ) public view override returns (uint256 amountOut, uint256 lastUpdatedAt) {\n        OracleSimple oracle = OracleSimple(_oraclesByPair[FACTORIES[_i].getPair(_from, _to)][_period]);\n        lastUpdatedAt = oracle.blockTimestampLast();\n        amountOut = oracle.consult(_from, _amountIn);\n    }\n\n    /// get the data we want and pay the gas to update\n    function consult(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _period,\n        uint256 _i\n    )\n        public\n        override\n        returns (\n            uint256 amountOut,\n            uint256 lastUpdatedAt,\n            bool updated\n        )\n    {\n        OracleSimple oracle = OracleSimple(_oraclesByPair[FACTORIES[_i].getPair(_from, _to)][_period]);\n        lastUpdatedAt = oracle.blockTimestampLast();\n        amountOut = oracle.consult(_from, _amountIn);\n        try oracle.update() {\n            updated = true;\n        } catch {\n            updated = false;\n        }\n    }\n}\n"
    },
    "contracts/test/OracleSimple.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.3;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"@uniswap/lib/contracts/libraries/FixedPoint.sol\";\n\nimport \"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\";\nimport \"./IOracleSimple.sol\";\n\n// fixed window oracle that recomputes the average price for the entire period once every period\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\ncontract OracleSimple is IOracleSimple {\n    using FixedPoint for *;\n\n    /* solhint-disable var-name-mixedcase */\n    uint256 public immutable PERIOD;\n    IUniswapV2Pair public immutable PAIR;\n\n    /* solhint-enable */\n\n    address public immutable token0;\n    address public immutable token1;\n\n    uint256 public price0CumulativeLast;\n    uint256 public price1CumulativeLast;\n    uint32 public blockTimestampLast;\n    FixedPoint.uq112x112 public price0Average;\n    FixedPoint.uq112x112 public price1Average;\n    bool public isStale;\n\n    constructor(address _pair, uint256 _period) {\n        PERIOD = _period;\n        IUniswapV2Pair pair = IUniswapV2Pair(_pair);\n        PAIR = pair;\n        token0 = pair.token0();\n        token1 = pair.token1();\n        price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\n        price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\n        uint112 reserve0;\n        uint112 reserve1;\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\n        require(reserve0 != 0 && reserve1 != 0, \"OracleSimple: NO_RESERVES\"); // ensure that there's liquidity in the pair\n    }\n\n    function update() external override {\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) =\n            UniswapV2OracleLibrary.currentCumulativePrices(address(PAIR));\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n\n        // ensure that at least one full period has passed since the last update\n        require(timeElapsed >= PERIOD, \"OracleSimple: PERIOD_NOT_ELAPSED\");\n\n        // overflow is desired, casting never truncates\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\n\n        price0CumulativeLast = price0Cumulative;\n        price1CumulativeLast = price1Cumulative;\n        blockTimestampLast = blockTimestamp;\n    }\n\n    // note this will always return 0 before update has been called successfully for the first time.\n    function consult(address token, uint256 amountIn) external view override returns (uint256 amountOut) {\n        if (token == token0) {\n            amountOut = price0Average.mul(amountIn).decode144();\n        } else {\n            require(token == token1, \"OracleSimple: INVALID_TOKEN\");\n            amountOut = price1Average.mul(amountIn).decode144();\n        }\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/lib/contracts/libraries/FixedPoint.sol": {
      "content": "pragma solidity >=0.4.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n        uint z;\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary UniswapV2OracleLibrary {\n    using FixedPoint for *;\n\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2 ** 32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(\n        address pair\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n            // counterfactual\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n        }\n    }\n}\n"
    },
    "contracts/test/IOracleSimple.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.3;\n\ninterface IOracleSimple {\n    function update() external;\n\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}