{
  "address": "0x0C712Fa5BA0DC3FC46caBEf2D373c4F9f5e29cE3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "DepositFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedDepositSlippage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "COINS",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "COIN_ADDRS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAUGE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "N",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORACLE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREECRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THREEPOOL",
      "outputs": [
        {
          "internalType": "contract IStableSwap3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amtNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "calcWithdrawLpAs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpToWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvLp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositError",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "estimateFeeImpact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getLpValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getLpValueAs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressListFactory",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateDepositSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdRateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e69fcef8905216617ef70c398fc7bb3f863179bf7589152d8a6d900bf93c875",
  "receipt": {
    "to": null,
    "from": "0xB5AbDABE50b5193d4dB92a16011792B22bA3Ef51",
    "contractAddress": "0x0C712Fa5BA0DC3FC46caBEf2D373c4F9f5e29cE3",
    "transactionIndex": 219,
    "gasUsed": "4569967",
    "logsBloom": "0x
    "blockHash": "0x7151ca4847a300fa18b072a97c5abc598751be5d62337c9f1a114b2a8f17f9cb",
    "transactionHash": "0x1e69fcef8905216617ef70c398fc7bb3f863179bf7589152d8a6d900bf93c875",
    "logs": [],
    "blockNumber": 12731910,
    "cumulativeGasUsed": "14148224",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8b3C8626cbfaA71d44bd76C1304214f4858E3639",
    "0xb3361918F2651409a6302DcEC2B1F0C6241fEC2e"
  ],
  "solcInputHash": "5faedc222364d5f9d97d6aa219760ccc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"DepositFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedDepositSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"COINS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"COIN_ADDRS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAUGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREECRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THREEPOOL\",\"outputs\":[{\"internalType\":\"contract IStableSwap3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amtNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"calcWithdrawLpAs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositError\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"estimateFeeImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getLpValueAs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSlippage\",\"type\":\"uint256\"}],\"name\":\"updateDepositSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals. Default no conversion.\"},\"init(address)\":{\"params\":{\"_addressListFactory\":\"To support same code in eth side chain, user _addressListFactory as param ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\"}},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Report total value in collateral token\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"init(address)\":{\"notice\":\"Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value of asset under management\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/curve/Crv3PoolStrategyDAI.sol\":\"Crv3PoolStrategyDAI\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x573e4beae1fcf79639afaf2ab3eb606b599fb71d678ca64e69f07620a3091af3\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressListFactory {\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0x150ffedb5ad13b6f3ed4802b9eb4400567aecbac4faf9615be0f46d27ac40087\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0x52f0b29a54703d3f17a008cae45cf87c204634934fd3c177135e4ba2534776ca\",\"license\":\"MIT\"},\"contracts/interfaces/chainlink/IAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable */\\n// Renamed from AggregatorV3Interface for convention\\n// From: https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\ninterface IAggregatorV3 {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x827a1227cd4cb14fcda327d983e0f015f4bfd4f9d9f77034fe0f5a9375bcf139\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ILiquidityGaugeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Not a complete interface, but should have what we need\\ninterface ILiquidityGaugeV2 is IERC20 {\\n    function deposit(uint256 _value) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x611bb99dbd360e4dbf57e91692414bc80004c6defb8f15ea07da1986372591b4\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap3Pool {\\n    function coins() external view returns (address[] memory);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x82fcae7cd3cbabaa074e23e36759f4a25326bdae15d3f1b1d2db99944612db27\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x847383c018c99992963c94c37b641ef7272cbc0ef38d4b17759b6f4423e43090\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9f1fda68c25b5ce7876b925f92600114f41dbdec3f8c38c5bfe4bbf286b17437\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x30ccdd9bfe9b051c63115dccc3519f4faf75b194386bf13fac9b67994c3dd857\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressList.sol\\\";\\nimport \\\"../interfaces/bloq/IAddressListFactory.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable collateralToken;\\n    address public immutable receiptToken;\\n    address public immutable override pool;\\n    IAddressList public keepers;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IERC20(IVesperPool(_pool).token());\\n        receiptToken = _receiptToken;\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Create keeper list\\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\\n     * ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\\n     * polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\\n     */\\n    function init(address _addressListFactory) external onlyGovernor {\\n        require(address(keepers) == address(0), \\\"keeper-list-already-created\\\");\\n        // Prepare keeper list\\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\\n        keepers = IAddressList(_factory.createList());\\n        require(keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\\n    function convertFrom18(uint256 amount) public pure virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() external view virtual override returns (uint256 _value);\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum acceptable return amount\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    // Some strategies may not have rewards hence they do not need this function.\\n    //solhint-disable-next-line no-empty-blocks\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0xd6822b3fd0823acadeee303a48a6fddb49fecdb0f582d8e7916f7f66b5dc4baf\",\"license\":\"MIT\"},\"contracts/strategies/curve/Crv3PoolMgr.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"./CrvPoolMgrBase.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap3Pool.sol\\\";\\nimport \\\"../../interfaces/chainlink/IAggregatorV3.sol\\\";\\n\\ncontract Crv3PoolMgr is CrvPoolMgrBase {\\n    IStableSwap3Pool public constant THREEPOOL = IStableSwap3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n    address public constant THREECRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n    address public constant GAUGE = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\\n    uint256 public constant N = 3;\\n\\n    /* solhint-disable var-name-mixedcase */\\n    string[N] public COINS = [\\\"DAI\\\", \\\"USDC\\\", \\\"USDT\\\"];\\n\\n    address[N] public COIN_ADDRS = [\\n        0x6B175474E89094C44Da98b954EedeAC495271d0F, // DAI\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, // USDC\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7 // USDT\\n    ];\\n    uint256[N] public DECIMALS = [18, 6, 6];\\n\\n    /* solhint-enable */\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() CrvPoolMgrBase(address(THREEPOOL), THREECRV, GAUGE) {}\\n\\n    function _minimumLpPrice(uint256 _safeRate) internal view returns (uint256) {\\n        return ((THREEPOOL.get_virtual_price() * _safeRate) / 1e18);\\n    }\\n\\n    function _withdrawAsFromCrvPool(\\n        uint256 _lpAmount,\\n        uint256 _minAmt,\\n        uint256 i\\n    ) internal {\\n        THREEPOOL.remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(i)), _minAmt);\\n    }\\n\\n    function _withdrawAllAs(uint256 i) internal {\\n        uint256 lpAmt = IERC20(crvLp).balanceOf(address(this));\\n        if (lpAmt != 0) {\\n            THREEPOOL.remove_liquidity_one_coin(lpAmt, SafeCast.toInt128(int256(i)), 0);\\n        }\\n    }\\n\\n    function calcWithdrawLpAs(uint256 _amtNeeded, uint256 i)\\n        public\\n        view\\n        returns (uint256 lpToWithdraw, uint256 unstakeAmt)\\n    {\\n        uint256 lp = IERC20(crvLp).balanceOf(address(this));\\n        uint256 tlp = lp + IERC20(crvGauge).balanceOf(address(this));\\n        lpToWithdraw = (_amtNeeded * tlp) / getLpValueAs(tlp, i);\\n        lpToWithdraw = (lpToWithdraw > tlp) ? tlp : lpToWithdraw;\\n        if (lpToWithdraw > lp) {\\n            unstakeAmt = lpToWithdraw - lp;\\n        }\\n    }\\n\\n    function getLpValueAs(uint256 _lpAmount, uint256 i) public view returns (uint256) {\\n        return (_lpAmount != 0) ? THREEPOOL.calc_withdraw_one_coin(_lpAmount, SafeCast.toInt128(int256(i))) : 0;\\n    }\\n\\n    // While this is inaccurate in terms of slippage, this gives us the\\n    // best estimate (least manipulatable value) to calculate share price\\n    function getLpValue(uint256 _lpAmount) public view returns (uint256) {\\n        return (_lpAmount != 0) ? (THREEPOOL.get_virtual_price() * _lpAmount) / 1e18 : 0;\\n    }\\n\\n    function estimateFeeImpact(uint256 _amount) public view returns (uint256) {\\n        return (_amount * (uint256(1e10) - estimatedFees())) / (uint256(1e10));\\n    }\\n\\n    function estimatedFees() public view returns (uint256) {\\n        return (THREEPOOL.fee() * 4);\\n    }\\n\\n    function setCheckpoint() external {\\n        _setCheckpoint();\\n    }\\n}\\n\",\"keccak256\":\"0xd17ed1aa1510c13f3661e74b65bba369815428bc0fd154a1f1df0be522aa17e7\",\"license\":\"MIT\"},\"contracts/strategies/curve/Crv3PoolStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"./Crv3PoolMgr.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Curve 3Pool and earn interest.\\nabstract contract Crv3PoolStrategy is Crv3PoolMgr, Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => bool) private reservedToken;\\n    address[] private oracles;\\n\\n    uint256 public constant ORACLE_PERIOD = 3600; // 1h\\n    uint256 public immutable collIdx;\\n    uint256 public usdRate;\\n    uint256 public usdRateTimestamp;\\n    bool public depositError;\\n\\n    uint256 public depositSlippage = 500; // 10000 is 100%\\n    event UpdatedDepositSlippage(uint256 oldSlippage, uint256 newSlippage);\\n    event DepositFailed(string reason);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        uint256 _collateralIdx\\n    ) Strategy(_pool, _swapManager, THREECRV) Crv3PoolMgr() {\\n        require(_collateralIdx < COINS.length, \\\"Invalid collateral for 3Pool\\\");\\n        require(COIN_ADDRS[_collateralIdx] == address(IVesperPool(_pool).token()), \\\"Collateral does not match\\\");\\n        reservedToken[THREECRV] = true;\\n        reservedToken[CRV] = true;\\n        collIdx = _collateralIdx;\\n        _setupOracles();\\n    }\\n\\n    function updateDepositSlippage(uint256 _newSlippage) external onlyGovernor {\\n        require(_newSlippage != depositSlippage, \\\"same-slippage\\\");\\n        require(_newSlippage < 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedDepositSlippage(depositSlippage, _newSlippage);\\n        depositSlippage = _newSlippage;\\n    }\\n\\n    function _setupOracles() internal {\\n        oracles.push(swapManager.createOrUpdateOracle(CRV, WETH, ORACLE_PERIOD, 0));\\n        for (uint256 i = 0; i < N; i++) {\\n            oracles.push(swapManager.createOrUpdateOracle(COIN_ADDRS[i], WETH, ORACLE_PERIOD, 0));\\n        }\\n    }\\n\\n    function _estimateSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        // from, to, amountIn, period, router\\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, ORACLE_PERIOD, 0);\\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\\n        if ((lastUpdate > (block.timestamp - ORACLE_PERIOD)) && (rate != 0)) return (rate, true);\\n        return (0, false);\\n    }\\n\\n    // given the rates of 3 stablecoins compared with a common denominator\\n    // return the lowest divided by the highest\\n    function _getSafeUsdRate() internal returns (uint256) {\\n        // use a stored rate if we've looked it up recently\\n        if (usdRateTimestamp > block.timestamp - ORACLE_PERIOD && usdRate != 0) return usdRate;\\n        // otherwise, calculate a rate and store it.\\n        uint256 lowest;\\n        uint256 highest;\\n        for (uint256 i = 0; i < N; i++) {\\n            // get the rate for $1\\n            (uint256 rate, bool isValid) = _consultOracle(COIN_ADDRS[i], WETH, 10**DECIMALS[i]);\\n            if (isValid) {\\n                if (lowest == 0 || rate < lowest) {\\n                    lowest = rate;\\n                }\\n                if (highest < rate) {\\n                    highest = rate;\\n                }\\n            }\\n        }\\n        // We only need to check one of them because if a single valid rate is returned,\\n        // highest == lowest and highest > 0 && lowest > 0\\n        require(lowest != 0, \\\"no-oracle-rates\\\");\\n        usdRateTimestamp = block.timestamp;\\n        usdRate = (lowest * 1e18) / highest;\\n        return usdRate;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return reservedToken[_token];\\n    }\\n\\n    function _approveToken(uint256 _amount) internal override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(crvPool, _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(CRV).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n        IERC20(crvLp).safeApprove(crvGauge, _amount);\\n    }\\n\\n    function _reinvest() internal override {\\n        depositError = false;\\n        uint256 amt = collateralToken.balanceOf(address(this));\\n        if (amt != 0) {\\n            uint256[3] memory depositAmounts;\\n            depositAmounts[collIdx] = amt;\\n            uint256 minLpAmount =\\n                _estimateSlippage((amt * 1e18) / _minimumLpPrice(_getSafeUsdRate()), depositSlippage) *\\n                    10**(18 - DECIMALS[collIdx]);\\n            // solhint-disable-next-line no-empty-blocks\\n            try THREEPOOL.add_liquidity(depositAmounts, minLpAmount) {} catch Error(string memory reason) {\\n                depositError = true;\\n                emit DepositFailed(reason);\\n            }\\n            _stakeAllLpToGauge();\\n        }\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        // This adds some gas but will save loss on exchange fees\\n        uint256 balanceHere = collateralToken.balanceOf(address(this));\\n        if (_amount > balanceHere) {\\n            _unstakeAndWithdrawAsCollateral(_amount - balanceHere);\\n        }\\n        collateralToken.safeTransfer(pool, _amount);\\n    }\\n\\n    function _unstakeAndWithdrawAsCollateral(uint256 _amount) internal returns (uint256 toWithdraw) {\\n        if (_amount == 0) return 0;\\n        uint256 i = collIdx;\\n        (uint256 lpToWithdraw, uint256 unstakeAmt) = calcWithdrawLpAs(_amount, i);\\n        _unstakeLpFromGauge(unstakeAmt);\\n        uint256 minAmtOut = (convertFrom18(_minimumLpPrice(_getSafeUsdRate())) * lpToWithdraw) / 1e18;\\n        _withdrawAsFromCrvPool(lpToWithdraw, minAmtOut, i);\\n        toWithdraw = collateralToken.balanceOf(address(this));\\n        if (toWithdraw > _amount) toWithdraw = _amount;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() external view override returns (uint256 _value) {\\n        _value = collateralToken.balanceOf(address(this)) + getLpValue(totalLp());\\n    }\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     */\\n    function _beforeMigration(\\n        address /*_newStrategy*/\\n    ) internal override {\\n        _unstakeAllLpFromGauge();\\n    }\\n\\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\\n        _claimCrv();\\n        uint256 amt = IERC20(CRV).balanceOf(address(this));\\n        if (amt != 0) {\\n            _safeSwap(CRV, _toToken, amt, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @param _extra additional amount to unstake and withdraw, in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n\\n    function _liquidate(uint256 _excessDebt, uint256 _extra) internal returns (uint256 _payback) {\\n        _payback = _unstakeAndWithdrawAsCollateral(_excessDebt + _extra);\\n        // we dont want to return a value greater than we need to\\n        if (_payback > _excessDebt) _payback = _excessDebt;\\n    }\\n\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\\n\\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {}\\n\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = convertFrom18(estimateFeeImpact(getLpValue(totalLp())));\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    function _realizeGross(uint256 _totalDebt)\\n        internal\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _toUnstake\\n        )\\n    {\\n        uint256 baseline = collateralToken.balanceOf(address(this));\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _collateralBalance = convertFrom18(estimateFeeImpact(getLpValue(totalLp())));\\n        if (_collateralBalance > _totalDebt) {\\n            _toUnstake = _collateralBalance - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n\\n        _profit = collateralToken.balanceOf(address(this)) + _toUnstake - baseline;\\n        if (_profit > _loss) {\\n            _profit = _profit - _loss;\\n            _loss = 0;\\n        } else {\\n            _loss = _loss - _profit;\\n            _profit = 0;\\n            _toUnstake = 0;\\n        }\\n    }\\n\\n    function _generateReport()\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        uint256 _toUnstake;\\n        (_profit, _loss, _toUnstake) = _realizeGross(_totalDebt);\\n        // only make call to unstake and withdraw once\\n        _payback = _liquidate(_excessDebt, _toUnstake);\\n    }\\n\\n    function rebalance() external override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n        if (!depositError) {\\n            uint256 depositLoss = _realizeLoss(IVesperPool(pool).totalDebtOf(address(this)));\\n            if (depositLoss > _loss) IVesperPool(pool).reportLoss(depositLoss - _loss);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5e1dfed80a5b3eeaeb00843c2820ac0ddd4256034a028261c2b055b3265342c2\",\"license\":\"MIT\"},\"contracts/strategies/curve/Crv3PoolStrategyDAI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./Crv3PoolStrategy.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ncontract Crv3PoolStrategyDAI is Crv3PoolStrategy {\\n    string public constant NAME = \\\"Curve-3pool-DAI-Strategy\\\";\\n    string public constant VERSION = \\\"3.0.0\\\";\\n\\n    constructor(address _pool, address _swapManager) Crv3PoolStrategy(_pool, _swapManager, 0) {}\\n}\\n\",\"keccak256\":\"0xec3d756a8fa9f3d7d9c7bbf2d9b01c6cec61d73dbab7aea46349d01a5df9ff00\",\"license\":\"MIT\"},\"contracts/strategies/curve/CrvPoolMgrBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGaugeV2.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\n\\nabstract contract CrvPoolMgrBase {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable crvPool;\\n    address public immutable crvLp;\\n    address public immutable crvGauge;\\n    address public constant CRV_MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n    address public constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    constructor(\\n        address _pool,\\n        address _lp,\\n        address _gauge\\n    ) {\\n        require(_pool != address(0x0), \\\"CRVMgr: invalid curve pool\\\");\\n        require(_lp != address(0x0), \\\"CRVMgr: invalid lp token\\\");\\n        require(_gauge != address(0x0), \\\"CRVMgr: invalid gauge\\\");\\n\\n        crvPool = _pool;\\n        crvLp = _lp;\\n        crvGauge = _gauge;\\n    }\\n\\n    // requires that gauge has approval for lp token\\n    function _stakeAllLpToGauge() internal {\\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\\n        if (balance != 0) {\\n            ILiquidityGaugeV2(crvGauge).deposit(balance);\\n        }\\n    }\\n\\n    function _unstakeAllLpFromGauge() internal {\\n        _unstakeLpFromGauge(IERC20(crvGauge).balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLpFromGauge(uint256 _amount) internal {\\n        if (_amount != 0) {\\n            ILiquidityGaugeV2(crvGauge).withdraw(_amount);\\n        }\\n    }\\n\\n    function _claimCrv() internal {\\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\\n    }\\n\\n    function _setCheckpoint() internal {\\n        ILiquidityGaugeV2(crvGauge).user_checkpoint(address(this));\\n    }\\n\\n    function claimableRewards() public view returns (uint256) {\\n        //Total Mintable - Previously minted\\n        return\\n            ILiquidityGaugeV2(crvGauge).integrate_fraction(address(this)) -\\n            ITokenMinter(CRV_MINTER).minted(address(this), crvGauge);\\n    }\\n\\n    function totalLp() public view returns (uint256 total) {\\n        total = IERC20(crvLp).balanceOf(address(this)) + IERC20(crvGauge).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x93305f5b533e8ec635dbb2a743f302b0d81d772f33f3cf06b6dd39e715021e67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60036101c08181526244414960e81b6101e0526101609081526004610200818152635553444360e01b6102205261018052610280604052610240908152631554d11560e21b610260526101a0526200005b9160009190620007b7565b5060408051606081018252736b175474e89094c44da98b954eedeac495271d0f815273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48602082015273dac17f958d2ee523a2206206994597c13d831ec791810191909152620000c290600390816200080e565b506040805160608101825260128152600660208201819052918101829052620000ee9190600362000867565b506101f46011553480156200010257600080fd5b5060405162004fba38038062004fba8339810160408190526200012591620009ba565b818160008282736c3f90f043a72fa612cbac8115ee7e52bde6e49073bebc44782c7db0a1a60cb6fe97d0b483032ff1c78173bfcf63294ad7105dea65aa58f8ae5be2d9d0952a6200017a565b60405180910390fd5b6001600160a01b038216620001d25760405162461bcd60e51b815260206004820152601860248201527f4352564d67723a20696e76616c6964206c7020746f6b656e0000000000000000604482015260640162000171565b6001600160a01b0381166200022a5760405162461bcd60e51b815260206004820152601560248201527f4352564d67723a20696e76616c69642067617567650000000000000000000000604482015260640162000171565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526001600160a01b038316620002a45760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f000000000000000000000000604482015260640162000171565b6001600160a01b038216620002f15760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640162000171565b600b80546001600160a01b0319166001600160a01b0384811691909117909155606084901b6001600160601b0319166101205260408051637e062a3560e11b815290519185169163fc0c546a91600480820192602092909190829003018186803b1580156200035f57600080fd5b505afa15801562000374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039a919062000994565b6001600160601b0319606091821b811660e05291901b1661010052505060038110620004095760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420636f6c6c61746572616c20666f722033506f6f6c00000000604482015260640162000171565b826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200044357600080fd5b505afa15801562000458573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200047e919062000994565b6001600160a01b031660038260038110620004a957634e487b7160e01b600052603260045260246000fd5b01546001600160a01b031614620005035760405162461bcd60e51b815260206004820152601960248201527f436f6c6c61746572616c20646f6573206e6f74206d6174636800000000000000604482015260640162000171565b600c6020527f9c9b4dd64bedd55eab545df24c51a45b7ee75f381e872264963530ae5325b4658054600160ff19918216811790925573d533a949740bb3306d119cc777fa900ba034cd526000527f81a0871aad47152ce487f66bcde625bb29d1a22b63052928024f6ac66d6b2517805490911690911790556101408190526200058b62000596565b505050505062000a73565b600b54604051630f30f2d360e21b815273d533a949740bb3306d119cc777fa900ba034cd52600482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26024820152610e10604482015260006064820152600d916001600160a01b031690633cc3cb4c90608401602060405180830381600087803b1580156200061a57600080fd5b505af11580156200062f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000655919062000994565b81546001810183556000928352602083200180546001600160a01b0319166001600160a01b03929092169190911790555b6003811015620007b457600b54600d906001600160a01b0316633cc3cb4c600384818110620006c557634e487b7160e01b600052603260045260246000fd5b015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26024820152610e10604482015260006064820152608401602060405180830381600087803b1580156200073257600080fd5b505af115801562000747573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076d919062000994565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905580620007ab8162000a35565b91505062000686565b50565b8260038101928215620007fc579160200282015b82811115620007fc5782518051620007eb9184916020909101906200089d565b5091602001919060010190620007cb565b506200080a9291506200091a565b5090565b826003810192821562000859579160200282015b828111156200085957825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000822565b506200080a9291506200093b565b826003810192821562000859579160200282015b8281111562000859578251829060ff169055916020019190600101906200087b565b828054620008ab90620009f8565b90600052602060002090601f016020900481019282620008cf576000855562000859565b82601f10620008ea57805160ff191683800117855562000859565b8280016001018555821562000859579182015b8281111562000859578251825591602001919060010190620008fd565b808211156200080a57600062000931828262000952565b506001016200091a565b5b808211156200080a57600081556001016200093c565b5080546200096090620009f8565b6000825580601f10620009745750620007b4565b601f016020900490600052602060002090810190620007b491906200093b565b600060208284031215620009a6578081fd5b8151620009b38162000a5d565b9392505050565b60008060408385031215620009cd578081fd5b8251620009da8162000a5d565b6020840151909250620009ed8162000a5d565b809150509250929050565b600181811c9082168062000a0d57607f821691505b6020821081141562000a2f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000a5657634e487b7160e01b81526011600452602481fd5b5060010190565b6001600160a01b0381168114620007b457600080fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405161437c62000c3e600039600081816103bb0152818161278b015281816127d30152612d5a0152600081816103000152818161080f0152818161099e01528181610d7101528181611035015281816111b50152818161154f015281816117cb0152818161185d015281816118f001528181611ad401528181611b9d01528181611e2c0152818161242a015281816125940152818161263101526129bb015260008181610666015281816106dc01528181611cb10152611d350152600081816105bc01528181611d7f01528181611e0301528181612015015281816121430152818161235b01528181612408015281816126f501528181612999015281816129ed01528181612de301528181612ea201528181612f230152612fa301526000818161070501528181610c2e01528181610eac01528181611415015281816114c1015281816124ea01528181612ba001528181613325015281816134ca0152818161363f01526138cb0152600081816104f101528181610cc501528181610e0f01528181612b7e01526132850152600081816105e30152612a0f015261437c6000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c80637f44579b11610182578063ce5494bb116100e9578063f9c52ed7116100a2578063fc0c546a1161007c578063fc0c546a146106da578063fd57a4df14610700578063fe406a7d14610727578063ffa1ad7414610730576102bb565b8063f9c52ed7146106a3578063fb589de2146106b6578063fbf5141c146106c7576102bb565b8063ce5494bb14610620578063d2c35ce814610633578063d4c3eea014610646578063e00af4a71461064e578063ec78e83214610661578063f03ae74514610688576102bb565b8063a3f4df7e1161013b578063a3f4df7e14610572578063aacaa71a146105ae578063b2016bd4146105b7578063b20fdc0d146105de578063c415b95c14610605578063c9e525df14610618576102bb565b80637f44579b146104ec578063945c91421461051357806394cb55951461052e578063951dc22c1461054e57806396dd5a781461056157806399b71d5c1461056a576102bb565b80634c36fad71161022657806374db9ad4116101df57806374db9ad41461048a5780637651b1e6146104a5578063795cf2be146104c057806379b37a86146104d357806379d5279f146104dc5780637d7c2a1c146104e4576102bb565b80634c36fad71461042c578063513ab2201461043f578063571f64d41461045a5780636c003a9b146104625780636fe702c01461046a578063709d039d14610477576102bb565b80632e1a7d4d116102785780632e1a7d4d14610368578063319a444d1461037b578063379173bb146103a357806337d265db146103b65780634032b72b146103dd578063440d7248146103f0576102bb565b8063058062b3146102c057806314ae9f2e146102e657806316f0115b146102fb57806319ab453c1461033a578063242c135d1461034d5780632530901e14610355575b600080fd5b6102d36102ce366004613e2a565b610754565b6040519081526020015b60405180910390f35b6102f96102f4366004613c82565b61080d565b005b6103227f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102dd565b6102f9610348366004613c82565b61099c565b6102d3610c16565b6102d3610363366004613e2a565b610d57565b6102f9610376366004613e2a565b610d6e565b61038e610389366004613e5a565b610deb565b604080519283526020830191909152016102dd565b6102d36103b1366004613e5a565b610f81565b6102d37f000000000000000000000000000000000000000000000000000000000000000081565b6102f96103eb366004613c82565b611033565b61041c6103fe366004613c82565b6001600160a01b03166000908152600c602052604090205460ff1690565b60405190151581526020016102dd565b6102f961043a366004613c82565b6111b3565b61032273bebc44782c7db0a1a60cb6fe97d0b483032ff1c781565b6102d3611366565b6102d36113f8565b60105461041c9060ff1681565b600b54610322906001600160a01b031681565b61032273d061d61a4d941c39e5453435b6345dc261c2fce081565b61032273bfcf63294ad7105dea65aa58f8ae5be2d9d0952a81565b6102f96104ce366004613e2a565b61154d565b6102d3600e5481565b6102f96116db565b6102f96116e5565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b61032273d533a949740bb3306d119cc777fa900ba034cd5281565b61054161053c366004613e2a565b611977565b6040516102dd9190613f03565b600954610322906001600160a01b031681565b6102d3600f5481565b6102f9611a17565b6105416040518060400160405280601881526020017f43757276652d33706f6f6c2d4441492d5374726174656779000000000000000081525081565b6102d360115481565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b600a54610322906001600160a01b031681565b6102d3600381565b6102f961062e366004613c82565b611ad1565b6102f9610641366004613c82565b611e2a565b6102d3611ff3565b6102f961065c366004613c82565b61204c565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b610322736c3f90f043a72fa612cbac8115ee7e52bde6e49081565b6102d36106b1366004613e2a565b6122fa565b6102d36106c4366004613e2a565b90565b6103226106d5366004613e2a565b612323565b7f0000000000000000000000000000000000000000000000000000000000000000610322565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b6102d3610e1081565b610541604051806040016040528060058152602001640332e302e360dc1b81525081565b600081610762576000610805565b670de0b6b3a76400008273bebc44782c7db0a1a60cb6fe97d0b483032ff1c76001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190613e42565b6107fb919061417d565b6108059190614049565b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561086657600080fd5b505afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190613c9e565b6001600160a01b0316336001600160a01b0316146108d75760405162461bcd60e51b81526004016108ce90613f66565b60405180910390fd5b600954604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109569190613e10565b6109995760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016108ce565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190613c9e565b6001600160a01b0316336001600160a01b031614610a5d5760405162461bcd60e51b81526004016108ce90613f66565b6009546001600160a01b031615610ab65760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d63726561746564000000000060448201526064016108ce565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2e9190613c9e565b600980546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f610b593390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015610b9a57600080fd5b505af1158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd29190613e10565b610c125760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016108ce565b5050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c7857600080fd5b505afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb09190613e42565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b60206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d489190613e42565b610d529190614031565b905090565b60068160038110610d6757600080fd5b0154905081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610de25760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b60448201526064016108ce565b61099981612343565b6040516370a0823160e01b8152306004820152600090819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610e5157600080fd5b505afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190613e42565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610eee57600080fd5b505afa158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f269190613e42565b610f309083614031565b9050610f3c8186610f81565b610f46828861417d565b610f509190614049565b9350808411610f5f5783610f61565b805b935081841115610f7857610f75828561419c565b92505b50509250929050565b600082610f8f57600061102a565b73bebc44782c7db0a1a60cb6fe97d0b483032ff1c763cc2b27d784610fb38561244f565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b158015610ff257600080fd5b505afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190613e42565b90505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561108c57600080fd5b505afa1580156110a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c49190613c9e565b6001600160a01b0316336001600160a01b0316146110f45760405162461bcd60e51b81526004016108ce90613f66565b600954604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b15801561113b57600080fd5b505af115801561114f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111739190613e10565b6109995760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016108ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561120c57600080fd5b505afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112449190613c9e565b6001600160a01b0316336001600160a01b0316146112745760405162461bcd60e51b81526004016108ce90613f66565b6001600160a01b0381166112bf5760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016108ce565b600b546001600160a01b038281169116141561130a5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016108ce565b600b546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600073bebc44782c7db0a1a60cb6fe97d0b483032ff1c76001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed9190613e42565b610d5290600461417d565b6040516308b752bb60e41b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260009073d061d61a4d941c39e5453435b6345dc261c2fce090638b752bb09060440160206040518083038186803b15801561147457600080fd5b505afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190613e42565b604051630940070760e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063094007079060240160206040518083038186803b15801561150b57600080fd5b505afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115439190613e42565b610d52919061419c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a657600080fd5b505afa1580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190613c9e565b6001600160a01b0316336001600160a01b03161461160e5760405162461bcd60e51b81526004016108ce90613f66565b6011548114156116505760405162461bcd60e51b815260206004820152600d60248201526c73616d652d736c69707061676560981b60448201526064016108ce565b612710811061169a5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016108ce565b60115460408051918252602082018390527fa0e416abea6b25d6e9300e43881c4ea060c88ad393c7f9f841e2fc3118ede9e4910160405180910390a1601155565b6116e36124d5565b565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561173657600080fd5b505afa15801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e9190613e10565b61178a5760405162461bcd60e51b81526004016108ce90613f36565b600080600061179761256e565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561180f57600080fd5b505af1158015611823573d6000803e3d6000fd5b5050505061182f6126d3565b60105460ff1661197257604051639f2b283360e01b81523060048201526000906118dc906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190613e42565b61295b565b905082811115611970576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ddd6d26061191f858461419c565b6040518263ffffffff1660e01b815260040161193d91815260200190565b600060405180830381600087803b15801561195757600080fd5b505af115801561196b573d6000803e3d6000fd5b505050505b505b505050565b6000816003811061198757600080fd5b018054909150611996906141df565b80601f01602080910402602001604051908101604052809291908181526020018280546119c2906141df565b8015611a0f5780601f106119e457610100808354040283529160200191611a0f565b820191906000526020600020905b8154815290600101906020018083116119f257829003601f168201915b505050505081565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa09190613e10565b611abc5760405162461bcd60e51b81526004016108ce90613f36565b611ac6600061298c565b6116e360001961298c565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611b455760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b60448201526064016108ce565b6001600160a01b038116611b9b5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016108ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bfe57600080fd5b505afa158015611c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c369190613c9e565b6001600160a01b031614611c855760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016108ce565b611c8e81612bc5565b6040516370a0823160e01b8152306004820152611d5c9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190613e42565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612bcd565b6040516370a0823160e01b81523060048201526109999082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015611dc157600080fd5b505afa158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df99190613e42565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612bcd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8357600080fd5b505afa158015611e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebb9190613c9e565b6001600160a01b0316336001600160a01b031614611eeb5760405162461bcd60e51b81526004016108ce90613f66565b6001600160a01b038116611f415760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016108ce565b600a546001600160a01b0382811691161415611f975760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016108ce565b600a546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006120006102ce610c16565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401610cf8565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561209d57600080fd5b505afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d59190613e10565b6120f15760405162461bcd60e51b81526004016108ce90613f36565b600a546001600160a01b03166121415760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016108ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156121c35760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016108ce565b6001600160a01b0381166000908152600c602052604090205460ff16156122235760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016108ce565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561226357600a5461225e906001600160a01b031647612c30565b610999565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156122a557600080fd5b505afa1580156122b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122dd9190613e42565b600a54909150610c12906001600160a01b03848116911683612bcd565b60006402540be40061230a611366565b612319906402540be40061419c565b6107fb908461417d565b6003816003811061233357600080fd5b01546001600160a01b0316905081565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190613e42565b9050808211156123fb576123f96123f4828461419c565b612d49565b505b610c126001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612bcd565b60006f7fffffffffffffffffffffffffffffff19821215801561247557506001607f1b82125b6124d15760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016108ce565b5090565b604051634b82009360e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634b82009390602401602060405180830381600087803b15801561253657600080fd5b505af115801561254a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190613e10565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b1580156125d657600080fd5b505afa1580156125ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260e9190613e42565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b15801561267357600080fd5b505afa158015612687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ab9190613e42565b905060006126b882612e7c565b919750955090506126c9838261306e565b9350505050909192565b6010805460ff191690556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561273f57600080fd5b505afa158015612753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127779190613e42565b9050801561099957612787613c54565b81817f0000000000000000000000000000000000000000000000000000000000000000600381106127c857634e487b7160e01b600052603260045260246000fd5b6020020152600060067f00000000000000000000000000000000000000000000000000000000000000006003811061281057634e487b7160e01b600052603260045260246000fd5b015461281d90601261419c565b61282890600a6140af565b61285f61283b61283661308e565b6131f1565b61284d86670de0b6b3a764000061417d565b6128579190614049565b60115461324a565b612869919061417d565b604051634515cef360e01b815290915073bebc44782c7db0a1a60cb6fe97d0b483032ff1c790634515cef3906128a59085908590600401613ecb565b600060405180830381600087803b1580156128bf57600080fd5b505af19250505080156128d0575060015b612953576128dc614288565b806308c379a0141561294757506128f161429f565b806128fc5750612949565b6010805460ff191660011790556040517f63299ad14374170063e6f2e5559417926f3a23da67eefa83fc2e9bf9f21e915c90612939908390613f03565b60405180910390a150612953565b505b3d6000803e3d6000fd5b61197261326d565b60008061296f6106c46106b16102ce610c16565b90508281101561298657612983818461419c565b91505b50919050565b6129e06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361338d565b612a346001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361338d565b60005b600b60009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8557600080fd5b505afa158015612a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abd9190613e42565b811015612b7057600b54604051636e74a6f760e01b815260048101839052612b5e916001600160a01b031690636e74a6f79060240160206040518083038186803b158015612b0a57600080fd5b505afa158015612b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b429190613c9e565b73d533a949740bb3306d119cc777fa900ba034cd52908461338d565b80612b6881614241565b915050612a37565b506109996001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361338d565b6109996134b1565b6040516001600160a01b03831660248201526044810182905261197290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613551565b80471015612c805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108ce565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ccd576040519150601f19603f3d011682016040523d82523d6000602084013e612cd2565b606091505b50509050806119725760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108ce565b600081612d5857506000610808565b7f0000000000000000000000000000000000000000000000000000000000000000600080612d868584610deb565b91509150612d9381613623565b6000670de0b6b3a764000083612dad6106c461283661308e565b612db7919061417d565b612dc19190614049565b9050612dce838286613676565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612e2d57600080fd5b505afa158015612e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e659190613e42565b945085851115612e73578594505b50505050919050565b6040516370a0823160e01b81523060048201526000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612ee457600080fd5b505afa158015612ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1c9190613e42565b9050612f477f00000000000000000000000000000000000000000000000000000000000000006136ff565b6000612f5a6106c46106b16102ce610c16565b905085811115612f7557612f6e868261419c565b9250612f82565b612f7f818761419c565b93505b6040516370a0823160e01b8152306004820152829084906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612fe557600080fd5b505afa158015612ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301d9190613e42565b6130279190614031565b613031919061419c565b94508385111561305057613045848661419c565b945060009350613065565b61305a858561419c565b935060009450600092505b50509193909250565b600061307d6123f48385614031565b90508281111561102d575090919050565b600061309c610e104261419c565b600f541180156130ad5750600e5415155b156130bb5750600e546106c4565b60008060005b600381101561318457600080613144600384600381106130f157634e487b7160e01b600052603260045260246000fd5b01546001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26006866003811061313257634e487b7160e01b600052603260045260246000fd5b015461313f90600a6140af565b6137b5565b91509150801561316f5784158061315a57508482105b15613163578194505b8184101561316f578193505b5050808061317c90614241565b9150506130c1565b50816131c45760405162461bcd60e51b815260206004820152600f60248201526e6e6f2d6f7261636c652d726174657360881b60448201526064016108ce565b42600f55806131db83670de0b6b3a764000061417d565b6131e59190614049565b600e8190559250505090565b6000670de0b6b3a76400008273bebc44782c7db0a1a60cb6fe97d0b483032ff1c76001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b957600080fd5b6000612710613259838261419c565b613263908561417d565b61102a9190614049565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156132cf57600080fd5b505afa1580156132e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133079190613e42565b905080156109995760405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f25906024015b600060405180830381600087803b15801561337257600080fd5b505af1158015613386573d6000803e3d6000fd5b5050505050565b8015806134165750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156133dc57600080fd5b505afa1580156133f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134149190613e42565b155b6134815760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108ce565b6040516001600160a01b03831660248201526044810182905261197290849063095ea7b360e01b90606401612bf9565b6040516370a0823160e01b81523060048201526116e3907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561351457600080fd5b505afa158015613528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354c9190613e42565b613623565b60006135a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661389b9092919063ffffffff16565b80519091501561197257808060200190518101906135c49190613e10565b6119725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108ce565b801561099957604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401613358565b73bebc44782c7db0a1a60cb6fe97d0b483032ff1c7631a4d01d28461369a8461244f565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260448101859052606401600060405180830381600087803b1580156136e257600080fd5b505af11580156136f6573d6000803e3d6000fd5b50505050505050565b6137076138b4565b6040516370a0823160e01b815230600482015260009073d533a949740bb3306d119cc777fa900ba034cd52906370a082319060240160206040518083038186803b15801561375457600080fd5b505afa158015613768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378c9190613e42565b90508015610c1257610c1273d533a949740bb3306d119cc777fa900ba034cd528383600161393d565b600b5460405163b67bb24d60e01b81526001600160a01b038581166004830152848116602483015260448201849052610e10606483015260006084830181905292839283928392169063b67bb24d9060a401606060405180830381600087803b15801561382157600080fd5b505af1158015613835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138599190613e7b565b50909250905061386b610e104261419c565b8111801561387857508115155b156138895750915060019050613893565b6000809350935050505b935093915050565b60606138aa8484600085613af3565b90505b9392505050565b6040516335313c2160e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015273d061d61a4d941c39e5453435b6345dc261c2fce090636a62784290602401600060405180830381600087803b15801561392957600080fd5b505af1158015611970573d6000803e3d6000fd5b600b54604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561399857600080fd5b505afa1580156139ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139d49190810190613cba565b92509250925083600014156139e857600193505b81156136f657600b54604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b158015613a3257600080fd5b505afa158015613a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6a9190613c9e565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613a9d959493929190613f9d565b600060405180830381600087803b158015613ab757600080fd5b505af1158015613acb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261196b9190810190613d73565b606082471015613b545760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108ce565b843b613ba25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ce565b600080866001600160a01b03168587604051613bbe9190613eaf565b60006040518083038185875af1925050503d8060008114613bfb576040519150601f19603f3d011682016040523d82523d6000602084013e613c00565b606091505b5091509150613c10828286613c1b565b979650505050505050565b60608315613c2a5750816138ad565b825115613c3a5782518084602001fd5b8160405162461bcd60e51b81526004016108ce9190613f03565b60405180606001604052806003906020820280368337509192915050565b8051801515811461080857600080fd5b600060208284031215613c93578081fd5b81356138ad81614331565b600060208284031215613caf578081fd5b81516138ad81614331565b600080600060608486031215613cce578182fd5b835167ffffffffffffffff811115613ce4578283fd5b8401601f81018613613cf4578283fd5b80516020613d018261400d565b604051613d0e8282614214565b8381528281019150848301600585901b860184018b1015613d2d578788fd5b8795505b84861015613d58578051613d4481614331565b835260019590950194918301918301613d31565b50918801516040909801519199979850909695505050505050565b60006020808385031215613d85578182fd5b825167ffffffffffffffff811115613d9b578283fd5b8301601f81018513613dab578283fd5b8051613db68161400d565b604051613dc38282614214565b8281528481019150838501600584901b85018601891015613de2578687fd5b8694505b83851015613e04578051835260019490940193918501918501613de6565b50979650505050505050565b600060208284031215613e21578081fd5b61102a82613c72565b600060208284031215613e3b578081fd5b5035919050565b600060208284031215613e53578081fd5b5051919050565b60008060408385031215613e6c578182fd5b50508035926020909101359150565b600080600060608486031215613e8f578283fd5b8351925060208401519150613ea660408501613c72565b90509250925092565b60008251613ec18184602087016141b3565b9190910192915050565b60808101818460005b6003811015613ef3578151835260209283019290910190600101613ed4565b5050508260608301529392505050565b6000602082528251806020840152613f228160408501602087016141b3565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613fec5784516001600160a01b031683529383019391830191600101613fc7565b50506001600160a01b03969096166060850152505050608001529392505050565b600067ffffffffffffffff82111561402757614027614272565b5060051b60200190565b600082198211156140445761404461425c565b500190565b60008261406457634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161407b57506140a6565b81870482111561408d5761408d61425c565b8086161561409a57918102915b9490941c93800261406c565b94509492505050565b600061102a60001984846000826140c8575060016138ad565b816140d5575060006138ad565b81600181146140eb57600281146140f557614122565b60019150506138ad565b60ff8411156141065761410661425c565b6001841b91508482111561411c5761411c61425c565b506138ad565b5060208310610133831016604e8410600b8410161715614155575081810a838111156141505761415061425c565b6138ad565b6141628484846001614069565b8086048211156141745761417461425c565b02949350505050565b60008160001904831182151516156141975761419761425c565b500290565b6000828210156141ae576141ae61425c565b500390565b60005b838110156141ce5781810151838201526020016141b6565b838111156119705750506000910152565b600181811c908216806141f357607f821691505b6020821081141561298657634e487b7160e01b600052602260045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561423a5761423a614272565b6040525050565b60006000198214156142555761425561425c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156106c457600481823e5160e01c90565b600060443d10156142af576106c4565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156142e15750505050506106c4565b82850191508151818111156142fb575050505050506106c4565b843d8701016020828501011115614317575050505050506106c4565b61432660208286010187614214565b509094505050505090565b6001600160a01b038116811461099957600080fdfea26469706673582212203da34fa992ae5a87fccaf0d20867320ee0c5584c0c9643d419c4adaf91185c8b64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102bb5760003560e01c80637f44579b11610182578063ce5494bb116100e9578063f9c52ed7116100a2578063fc0c546a1161007c578063fc0c546a146106da578063fd57a4df14610700578063fe406a7d14610727578063ffa1ad7414610730576102bb565b8063f9c52ed7146106a3578063fb589de2146106b6578063fbf5141c146106c7576102bb565b8063ce5494bb14610620578063d2c35ce814610633578063d4c3eea014610646578063e00af4a71461064e578063ec78e83214610661578063f03ae74514610688576102bb565b8063a3f4df7e1161013b578063a3f4df7e14610572578063aacaa71a146105ae578063b2016bd4146105b7578063b20fdc0d146105de578063c415b95c14610605578063c9e525df14610618576102bb565b80637f44579b146104ec578063945c91421461051357806394cb55951461052e578063951dc22c1461054e57806396dd5a781461056157806399b71d5c1461056a576102bb565b80634c36fad71161022657806374db9ad4116101df57806374db9ad41461048a5780637651b1e6146104a5578063795cf2be146104c057806379b37a86146104d357806379d5279f146104dc5780637d7c2a1c146104e4576102bb565b80634c36fad71461042c578063513ab2201461043f578063571f64d41461045a5780636c003a9b146104625780636fe702c01461046a578063709d039d14610477576102bb565b80632e1a7d4d116102785780632e1a7d4d14610368578063319a444d1461037b578063379173bb146103a357806337d265db146103b65780634032b72b146103dd578063440d7248146103f0576102bb565b8063058062b3146102c057806314ae9f2e146102e657806316f0115b146102fb57806319ab453c1461033a578063242c135d1461034d5780632530901e14610355575b600080fd5b6102d36102ce366004613e2a565b610754565b6040519081526020015b60405180910390f35b6102f96102f4366004613c82565b61080d565b005b6103227f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102dd565b6102f9610348366004613c82565b61099c565b6102d3610c16565b6102d3610363366004613e2a565b610d57565b6102f9610376366004613e2a565b610d6e565b61038e610389366004613e5a565b610deb565b604080519283526020830191909152016102dd565b6102d36103b1366004613e5a565b610f81565b6102d37f000000000000000000000000000000000000000000000000000000000000000081565b6102f96103eb366004613c82565b611033565b61041c6103fe366004613c82565b6001600160a01b03166000908152600c602052604090205460ff1690565b60405190151581526020016102dd565b6102f961043a366004613c82565b6111b3565b61032273bebc44782c7db0a1a60cb6fe97d0b483032ff1c781565b6102d3611366565b6102d36113f8565b60105461041c9060ff1681565b600b54610322906001600160a01b031681565b61032273d061d61a4d941c39e5453435b6345dc261c2fce081565b61032273bfcf63294ad7105dea65aa58f8ae5be2d9d0952a81565b6102f96104ce366004613e2a565b61154d565b6102d3600e5481565b6102f96116db565b6102f96116e5565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b61032273d533a949740bb3306d119cc777fa900ba034cd5281565b61054161053c366004613e2a565b611977565b6040516102dd9190613f03565b600954610322906001600160a01b031681565b6102d3600f5481565b6102f9611a17565b6105416040518060400160405280601881526020017f43757276652d33706f6f6c2d4441492d5374726174656779000000000000000081525081565b6102d360115481565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b600a54610322906001600160a01b031681565b6102d3600381565b6102f961062e366004613c82565b611ad1565b6102f9610641366004613c82565b611e2a565b6102d3611ff3565b6102f961065c366004613c82565b61204c565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b610322736c3f90f043a72fa612cbac8115ee7e52bde6e49081565b6102d36106b1366004613e2a565b6122fa565b6102d36106c4366004613e2a565b90565b6103226106d5366004613e2a565b612323565b7f0000000000000000000000000000000000000000000000000000000000000000610322565b6103227f000000000000000000000000000000000000000000000000000000000000000081565b6102d3610e1081565b610541604051806040016040528060058152602001640332e302e360dc1b81525081565b600081610762576000610805565b670de0b6b3a76400008273bebc44782c7db0a1a60cb6fe97d0b483032ff1c76001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190613e42565b6107fb919061417d565b6108059190614049565b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561086657600080fd5b505afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190613c9e565b6001600160a01b0316336001600160a01b0316146108d75760405162461bcd60e51b81526004016108ce90613f66565b60405180910390fd5b600954604051631484968760e11b81526001600160a01b038381166004830152909116906329092d0e90602401602060405180830381600087803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109569190613e10565b6109995760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016108ce565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f557600080fd5b505afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190613c9e565b6001600160a01b0316336001600160a01b031614610a5d5760405162461bcd60e51b81526004016108ce90613f66565b6009546001600160a01b031615610ab65760405162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d63726561746564000000000060448201526064016108ce565b6000819050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2e9190613c9e565b600980546001600160a01b0319166001600160a01b03929092169182179055630a3b0a4f610b593390565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381600087803b158015610b9a57600080fd5b505af1158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd29190613e10565b610c125760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016108ce565b5050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c7857600080fd5b505afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb09190613e42565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b60206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d489190613e42565b610d529190614031565b905090565b60068160038110610d6757600080fd5b0154905081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610de25760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b60448201526064016108ce565b61099981612343565b6040516370a0823160e01b8152306004820152600090819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610e5157600080fd5b505afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e899190613e42565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610eee57600080fd5b505afa158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f269190613e42565b610f309083614031565b9050610f3c8186610f81565b610f46828861417d565b610f509190614049565b9350808411610f5f5783610f61565b805b935081841115610f7857610f75828561419c565b92505b50509250929050565b600082610f8f57600061102a565b73bebc44782c7db0a1a60cb6fe97d0b483032ff1c763cc2b27d784610fb38561244f565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b158015610ff257600080fd5b505afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a9190613e42565b90505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561108c57600080fd5b505afa1580156110a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c49190613c9e565b6001600160a01b0316336001600160a01b0316146110f45760405162461bcd60e51b81526004016108ce90613f66565b600954604051630a3b0a4f60e01b81526001600160a01b03838116600483015290911690630a3b0a4f90602401602060405180830381600087803b15801561113b57600080fd5b505af115801561114f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111739190613e10565b6109995760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016108ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561120c57600080fd5b505afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112449190613c9e565b6001600160a01b0316336001600160a01b0316146112745760405162461bcd60e51b81526004016108ce90613f66565b6001600160a01b0381166112bf5760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016108ce565b600b546001600160a01b038281169116141561130a5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016108ce565b600b546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600073bebc44782c7db0a1a60cb6fe97d0b483032ff1c76001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b557600080fd5b505afa1580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed9190613e42565b610d5290600461417d565b6040516308b752bb60e41b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260009073d061d61a4d941c39e5453435b6345dc261c2fce090638b752bb09060440160206040518083038186803b15801561147457600080fd5b505afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac9190613e42565b604051630940070760e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063094007079060240160206040518083038186803b15801561150b57600080fd5b505afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115439190613e42565b610d52919061419c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a657600080fd5b505afa1580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190613c9e565b6001600160a01b0316336001600160a01b03161461160e5760405162461bcd60e51b81526004016108ce90613f66565b6011548114156116505760405162461bcd60e51b815260206004820152600d60248201526c73616d652d736c69707061676560981b60448201526064016108ce565b612710811061169a5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016108ce565b60115460408051918252602082018390527fa0e416abea6b25d6e9300e43881c4ea060c88ad393c7f9f841e2fc3118ede9e4910160405180910390a1601155565b6116e36124d5565b565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561173657600080fd5b505afa15801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e9190613e10565b61178a5760405162461bcd60e51b81526004016108ce90613f36565b600080600061179761256e565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561180f57600080fd5b505af1158015611823573d6000803e3d6000fd5b5050505061182f6126d3565b60105460ff1661197257604051639f2b283360e01b81523060048201526000906118dc906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190613e42565b61295b565b905082811115611970576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ddd6d26061191f858461419c565b6040518263ffffffff1660e01b815260040161193d91815260200190565b600060405180830381600087803b15801561195757600080fd5b505af115801561196b573d6000803e3d6000fd5b505050505b505b505050565b6000816003811061198757600080fd5b018054909150611996906141df565b80601f01602080910402602001604051908101604052809291908181526020018280546119c2906141df565b8015611a0f5780601f106119e457610100808354040283529160200191611a0f565b820191906000526020600020905b8154815290600101906020018083116119f257829003601f168201915b505050505081565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa09190613e10565b611abc5760405162461bcd60e51b81526004016108ce90613f36565b611ac6600061298c565b6116e360001961298c565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611b455760405162461bcd60e51b815260206004820152601960248201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b60448201526064016108ce565b6001600160a01b038116611b9b5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016108ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bfe57600080fd5b505afa158015611c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c369190613c9e565b6001600160a01b031614611c855760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016108ce565b611c8e81612bc5565b6040516370a0823160e01b8152306004820152611d5c9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190613e42565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612bcd565b6040516370a0823160e01b81523060048201526109999082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015611dc157600080fd5b505afa158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df99190613e42565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612bcd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8357600080fd5b505afa158015611e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebb9190613c9e565b6001600160a01b0316336001600160a01b031614611eeb5760405162461bcd60e51b81526004016108ce90613f66565b6001600160a01b038116611f415760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016108ce565b600a546001600160a01b0382811691161415611f975760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016108ce565b600a546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006120006102ce610c16565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401610cf8565b6009546001600160a01b0316635dbe47e8336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561209d57600080fd5b505afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d59190613e10565b6120f15760405162461bcd60e51b81526004016108ce90613f36565b600a546001600160a01b03166121415760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016108ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156121c35760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016108ce565b6001600160a01b0381166000908152600c602052604090205460ff16156122235760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016108ce565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561226357600a5461225e906001600160a01b031647612c30565b610999565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156122a557600080fd5b505afa1580156122b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122dd9190613e42565b600a54909150610c12906001600160a01b03848116911683612bcd565b60006402540be40061230a611366565b612319906402540be40061419c565b6107fb908461417d565b6003816003811061233357600080fd5b01546001600160a01b0316905081565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190613e42565b9050808211156123fb576123f96123f4828461419c565b612d49565b505b610c126001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612bcd565b60006f7fffffffffffffffffffffffffffffff19821215801561247557506001607f1b82125b6124d15760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016108ce565b5090565b604051634b82009360e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634b82009390602401602060405180830381600087803b15801561253657600080fd5b505af115801561254a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190613e10565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b1580156125d657600080fd5b505afa1580156125ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260e9190613e42565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b15801561267357600080fd5b505afa158015612687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ab9190613e42565b905060006126b882612e7c565b919750955090506126c9838261306e565b9350505050909192565b6010805460ff191690556040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561273f57600080fd5b505afa158015612753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127779190613e42565b9050801561099957612787613c54565b81817f0000000000000000000000000000000000000000000000000000000000000000600381106127c857634e487b7160e01b600052603260045260246000fd5b6020020152600060067f00000000000000000000000000000000000000000000000000000000000000006003811061281057634e487b7160e01b600052603260045260246000fd5b015461281d90601261419c565b61282890600a6140af565b61285f61283b61283661308e565b6131f1565b61284d86670de0b6b3a764000061417d565b6128579190614049565b60115461324a565b612869919061417d565b604051634515cef360e01b815290915073bebc44782c7db0a1a60cb6fe97d0b483032ff1c790634515cef3906128a59085908590600401613ecb565b600060405180830381600087803b1580156128bf57600080fd5b505af19250505080156128d0575060015b612953576128dc614288565b806308c379a0141561294757506128f161429f565b806128fc5750612949565b6010805460ff191660011790556040517f63299ad14374170063e6f2e5559417926f3a23da67eefa83fc2e9bf9f21e915c90612939908390613f03565b60405180910390a150612953565b505b3d6000803e3d6000fd5b61197261326d565b60008061296f6106c46106b16102ce610c16565b90508281101561298657612983818461419c565b91505b50919050565b6129e06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361338d565b612a346001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361338d565b60005b600b60009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8557600080fd5b505afa158015612a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abd9190613e42565b811015612b7057600b54604051636e74a6f760e01b815260048101839052612b5e916001600160a01b031690636e74a6f79060240160206040518083038186803b158015612b0a57600080fd5b505afa158015612b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b429190613c9e565b73d533a949740bb3306d119cc777fa900ba034cd52908461338d565b80612b6881614241565b915050612a37565b506109996001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361338d565b6109996134b1565b6040516001600160a01b03831660248201526044810182905261197290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613551565b80471015612c805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108ce565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ccd576040519150601f19603f3d011682016040523d82523d6000602084013e612cd2565b606091505b50509050806119725760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108ce565b600081612d5857506000610808565b7f0000000000000000000000000000000000000000000000000000000000000000600080612d868584610deb565b91509150612d9381613623565b6000670de0b6b3a764000083612dad6106c461283661308e565b612db7919061417d565b612dc19190614049565b9050612dce838286613676565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612e2d57600080fd5b505afa158015612e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e659190613e42565b945085851115612e73578594505b50505050919050565b6040516370a0823160e01b81523060048201526000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612ee457600080fd5b505afa158015612ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1c9190613e42565b9050612f477f00000000000000000000000000000000000000000000000000000000000000006136ff565b6000612f5a6106c46106b16102ce610c16565b905085811115612f7557612f6e868261419c565b9250612f82565b612f7f818761419c565b93505b6040516370a0823160e01b8152306004820152829084906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612fe557600080fd5b505afa158015612ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301d9190613e42565b6130279190614031565b613031919061419c565b94508385111561305057613045848661419c565b945060009350613065565b61305a858561419c565b935060009450600092505b50509193909250565b600061307d6123f48385614031565b90508281111561102d575090919050565b600061309c610e104261419c565b600f541180156130ad5750600e5415155b156130bb5750600e546106c4565b60008060005b600381101561318457600080613144600384600381106130f157634e487b7160e01b600052603260045260246000fd5b01546001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26006866003811061313257634e487b7160e01b600052603260045260246000fd5b015461313f90600a6140af565b6137b5565b91509150801561316f5784158061315a57508482105b15613163578194505b8184101561316f578193505b5050808061317c90614241565b9150506130c1565b50816131c45760405162461bcd60e51b815260206004820152600f60248201526e6e6f2d6f7261636c652d726174657360881b60448201526064016108ce565b42600f55806131db83670de0b6b3a764000061417d565b6131e59190614049565b600e8190559250505090565b6000670de0b6b3a76400008273bebc44782c7db0a1a60cb6fe97d0b483032ff1c76001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b957600080fd5b6000612710613259838261419c565b613263908561417d565b61102a9190614049565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156132cf57600080fd5b505afa1580156132e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133079190613e42565b905080156109995760405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f25906024015b600060405180830381600087803b15801561337257600080fd5b505af1158015613386573d6000803e3d6000fd5b5050505050565b8015806134165750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156133dc57600080fd5b505afa1580156133f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134149190613e42565b155b6134815760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108ce565b6040516001600160a01b03831660248201526044810182905261197290849063095ea7b360e01b90606401612bf9565b6040516370a0823160e01b81523060048201526116e3907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561351457600080fd5b505afa158015613528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354c9190613e42565b613623565b60006135a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661389b9092919063ffffffff16565b80519091501561197257808060200190518101906135c49190613e10565b6119725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108ce565b801561099957604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401613358565b73bebc44782c7db0a1a60cb6fe97d0b483032ff1c7631a4d01d28461369a8461244f565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260448101859052606401600060405180830381600087803b1580156136e257600080fd5b505af11580156136f6573d6000803e3d6000fd5b50505050505050565b6137076138b4565b6040516370a0823160e01b815230600482015260009073d533a949740bb3306d119cc777fa900ba034cd52906370a082319060240160206040518083038186803b15801561375457600080fd5b505afa158015613768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378c9190613e42565b90508015610c1257610c1273d533a949740bb3306d119cc777fa900ba034cd528383600161393d565b600b5460405163b67bb24d60e01b81526001600160a01b038581166004830152848116602483015260448201849052610e10606483015260006084830181905292839283928392169063b67bb24d9060a401606060405180830381600087803b15801561382157600080fd5b505af1158015613835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138599190613e7b565b50909250905061386b610e104261419c565b8111801561387857508115155b156138895750915060019050613893565b6000809350935050505b935093915050565b60606138aa8484600085613af3565b90505b9392505050565b6040516335313c2160e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015273d061d61a4d941c39e5453435b6345dc261c2fce090636a62784290602401600060405180830381600087803b15801561392957600080fd5b505af1158015611970573d6000803e3d6000fd5b600b54604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561399857600080fd5b505afa1580156139ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526139d49190810190613cba565b92509250925083600014156139e857600193505b81156136f657600b54604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b158015613a3257600080fd5b505afa158015613a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6a9190613c9e565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613a9d959493929190613f9d565b600060405180830381600087803b158015613ab757600080fd5b505af1158015613acb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261196b9190810190613d73565b606082471015613b545760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108ce565b843b613ba25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ce565b600080866001600160a01b03168587604051613bbe9190613eaf565b60006040518083038185875af1925050503d8060008114613bfb576040519150601f19603f3d011682016040523d82523d6000602084013e613c00565b606091505b5091509150613c10828286613c1b565b979650505050505050565b60608315613c2a5750816138ad565b825115613c3a5782518084602001fd5b8160405162461bcd60e51b81526004016108ce9190613f03565b60405180606001604052806003906020820280368337509192915050565b8051801515811461080857600080fd5b600060208284031215613c93578081fd5b81356138ad81614331565b600060208284031215613caf578081fd5b81516138ad81614331565b600080600060608486031215613cce578182fd5b835167ffffffffffffffff811115613ce4578283fd5b8401601f81018613613cf4578283fd5b80516020613d018261400d565b604051613d0e8282614214565b8381528281019150848301600585901b860184018b1015613d2d578788fd5b8795505b84861015613d58578051613d4481614331565b835260019590950194918301918301613d31565b50918801516040909801519199979850909695505050505050565b60006020808385031215613d85578182fd5b825167ffffffffffffffff811115613d9b578283fd5b8301601f81018513613dab578283fd5b8051613db68161400d565b604051613dc38282614214565b8281528481019150838501600584901b85018601891015613de2578687fd5b8694505b83851015613e04578051835260019490940193918501918501613de6565b50979650505050505050565b600060208284031215613e21578081fd5b61102a82613c72565b600060208284031215613e3b578081fd5b5035919050565b600060208284031215613e53578081fd5b5051919050565b60008060408385031215613e6c578182fd5b50508035926020909101359150565b600080600060608486031215613e8f578283fd5b8351925060208401519150613ea660408501613c72565b90509250925092565b60008251613ec18184602087016141b3565b9190910192915050565b60808101818460005b6003811015613ef3578151835260209283019290910190600101613ed4565b5050508260608301529392505050565b6000602082528251806020840152613f228160408501602087016141b3565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613fec5784516001600160a01b031683529383019391830191600101613fc7565b50506001600160a01b03969096166060850152505050608001529392505050565b600067ffffffffffffffff82111561402757614027614272565b5060051b60200190565b600082198211156140445761404461425c565b500190565b60008261406457634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161407b57506140a6565b81870482111561408d5761408d61425c565b8086161561409a57918102915b9490941c93800261406c565b94509492505050565b600061102a60001984846000826140c8575060016138ad565b816140d5575060006138ad565b81600181146140eb57600281146140f557614122565b60019150506138ad565b60ff8411156141065761410661425c565b6001841b91508482111561411c5761411c61425c565b506138ad565b5060208310610133831016604e8410600b8410161715614155575081810a838111156141505761415061425c565b6138ad565b6141628484846001614069565b8086048211156141745761417461425c565b02949350505050565b60008160001904831182151516156141975761419761425c565b500290565b6000828210156141ae576141ae61425c565b500390565b60005b838110156141ce5781810151838201526020016141b6565b838111156119705750506000910152565b600181811c908216806141f357607f821691505b6020821081141561298657634e487b7160e01b600052602260045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561423a5761423a614272565b6040525050565b60006000198214156142555761425561425c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156106c457600481823e5160e01c90565b600060443d10156142af576106c4565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156142e15750505050506106c4565b82850191508151818111156142fb575050505050506106c4565b843d8701016020828501011115614317575050505050506106c4565b61432660208286010187614214565b509094505050505090565b6001600160a01b038116811461099957600080fdfea26469706673582212203da34fa992ae5a87fccaf0d20867320ee0c5584c0c9643d419c4adaf91185c8b64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals. Default no conversion."
      },
      "init(address)": {
        "params": {
          "_addressListFactory": "To support same code in eth side chain, user _addressListFactory as param ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3 polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291"
        }
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Report total value in collateral token"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "init(address)": {
        "notice": "Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor."
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value of asset under management"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13315,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "COINS",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)3_storage"
      },
      {
        "astId": 13323,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "COIN_ADDRS",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)3_storage"
      },
      {
        "astId": 13331,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "DECIMALS",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)3_storage"
      },
      {
        "astId": 9453,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "keepers",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IAddressList)3591"
      },
      {
        "astId": 9456,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "feeCollector",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9459,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "swapManager",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ISwapManager)3894"
      },
      {
        "astId": 13611,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "reservedToken",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13614,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "oracles",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13621,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "usdRate",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 13623,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "usdRateTimestamp",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 13625,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "depositError",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 13628,
        "contract": "contracts/strategies/curve/Crv3PoolStrategyDAI.sol:Crv3PoolStrategyDAI",
        "label": "depositSlippage",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)3_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressList)3591": {
        "encoding": "inplace",
        "label": "contract IAddressList",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)3894": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}