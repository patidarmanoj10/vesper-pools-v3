{
  "address": "0x4a7Ce5Db8fa84E7aff6ad6E234C6C6b515951d5c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dustReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dust",
          "type": "uint256"
        }
      ],
      "name": "RewardEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRewardEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRewardEndTime",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRewardEndTime",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GRACE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardDuration",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        }
      ],
      "name": "withdrawRemaining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b19b0dca24ff421800eb44eab92e01f30c3d7d4e8e492ecbdc26f45ef0d3566",
  "receipt": {
    "to": null,
    "from": "0xB5AbDABE50b5193d4dB92a16011792B22bA3Ef51",
    "contractAddress": "0x4a7Ce5Db8fa84E7aff6ad6E234C6C6b515951d5c",
    "transactionIndex": 105,
    "gasUsed": "1143777",
    "logsBloom": "0x
    "blockHash": "0xeff5252e4593d6d71cd0f588c77a2d414b2fc74128e3a09b11c3ada82f128112",
    "transactionHash": "0x0b19b0dca24ff421800eb44eab92e01f30c3d7d4e8e492ecbdc26f45ef0d3566",
    "logs": [],
    "blockNumber": 12719639,
    "cumulativeGasUsed": "13649076",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "070e5e38647b2db3fbc8bd07b1b0de43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dustReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRewardEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardEndTime\",\"type\":\"uint256\"}],\"name\":\"UpdatedRewardEndTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDuration\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"withdrawRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(address)\":{\"details\":\"Claim earned rewards.\"},\"claimable(address)\":{\"details\":\"Returns claimable reward amount.\"},\"initialize(address,address)\":{\"details\":\"Called by proxy to initialize this contract\",\"params\":{\"_pool\":\"Vesper pool address\",\"_rewardToken\":\"VSP token address\"}},\"lastTimeRewardApplicable()\":{\"details\":\"Returns timestamp of last reward update\"},\"notifyRewardAmount(uint256,uint256)\":{\"details\":\"Notify that reward is added. Also updates reward rate and reward earning period.\"},\"updateReward(address)\":{\"details\":\"Updated reward for given account. Only Pool can call\"},\"withdrawRemaining(address)\":{\"details\":\"rewardRate will be updated to 0\",\"params\":{\"_toAddress\":\"Address where governor want to withdraw tokens\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RewardAdded(uint256)\":{\"notice\":\"Emitted after reward added\"},\"RewardEnded(address,uint256)\":{\"notice\":\"Emitted when reward is ended\"},\"RewardPaid(address,uint256)\":{\"notice\":\"Emitted whenever any user claim rewards\"}},\"kind\":\"user\",\"methods\":{\"GRACE_PERIOD()\":{\"notice\":\"Once reward end is triggered, owner has to wait at least grace period to expire before he can withdraw remaining reward.\"},\"lastUpdateTime()\":{\"notice\":\"Last reward drip update time stamp\"},\"periodFinish()\":{\"notice\":\"Where is current reward period ending\"},\"pool()\":{\"notice\":\"Vesper pool address\"},\"rewardDuration()\":{\"notice\":\"Duration of current reward distribution\"},\"rewardEndTime()\":{\"notice\":\"Reward end time\"},\"rewardPerTokenStored()\":{\"notice\":\"Reward per token calculated and stored at last drip update\"},\"rewardRate()\":{\"notice\":\"Current reward rate\"},\"rewardToken()\":{\"notice\":\"Reward token address, mostly it will be VSP\"},\"rewards(address)\":{\"notice\":\"User => Rewards earned till last reward update\"},\"updateRewardEndTime()\":{\"notice\":\"Updated reward end time. Time at which reward will be ended and governor can withdraw remaining tokens\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"User => Reward per token stored at last reward update\"},\"withdrawRemaining(address)\":{\"notice\":\"Withdraw remaining tokens Once reward end time is passed governor can withdraw remaining tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/PoolRewards.sol\":\"PoolRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IAddressList {\\n    function add(address a) external returns (bool);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function length() external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x573e4beae1fcf79639afaf2ab3eb606b599fb71d678ca64e69f07620a3091af3\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(uint256 reward);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, uint256 reward);\\n    /// Emitted when reward is ended\\n    event RewardEnded(address indexed dustReceiver, uint256 dust);\\n    // Emitted when pool governor update reward end time\\n    event UpdatedRewardEndTime(uint256 previousRewardEndTime, uint256 newRewardEndTime);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(uint256 rewardAmount, uint256 endTime) external;\\n\\n    function updateRewardEndTime() external;\\n\\n    function updateReward(address) external;\\n\\n    function withdrawRemaining(address _toAddress) external;\\n\\n    function claimable(address) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardForDuration() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0bba8b44b9b90126d4646abd0966ea9e0ddce79ff9f1d75d810377cc3ca89603\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../bloq/IAddressList.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (IAddressList);\\n\\n    function maintainers() external view returns (IAddressList);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x30ccdd9bfe9b051c63115dccc3519f4faf75b194386bf13fac9b67994c3dd857\",\"license\":\"MIT\"},\"contracts/pool/PoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\ncontract PoolRewardsStorage {\\n    /// Vesper pool address\\n    address public pool;\\n\\n    /// Reward token address, mostly it will be VSP\\n    address public rewardToken;\\n\\n    /// Once reward end is triggered, owner has to wait at least grace period to\\n    /// expire before he can withdraw remaining reward.\\n    uint256 public constant GRACE_PERIOD = 30 days;\\n\\n    /// Where is current reward period ending\\n    uint256 public periodFinish;\\n\\n    /// Current reward rate\\n    uint256 public rewardRate;\\n\\n    /// Reward end time\\n    uint256 public rewardEndTime;\\n\\n    /// Duration of current reward distribution\\n    uint256 public rewardDuration;\\n\\n    /// Last reward drip update time stamp\\n    uint256 public lastUpdateTime;\\n\\n    /// Reward per token calculated and stored at last drip update\\n    uint256 public rewardPerTokenStored;\\n\\n    /// User => Reward per token stored at last reward update\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    /// User => Rewards earned till last reward update\\n    mapping(address => uint256) public rewards;\\n}\\n\\ncontract PoolRewards is Initializable, IPoolRewards, PoolRewardsStorage, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Called by proxy to initialize this contract\\n     * @param _pool Vesper pool address\\n     * @param _rewardToken VSP token address\\n     */\\n    function initialize(address _pool, address _rewardToken) public initializer {\\n        pool = _pool;\\n        rewardToken = _rewardToken;\\n    }\\n\\n    /**\\n     * @dev Notify that reward is added.\\n     * Also updates reward rate and reward earning period.\\n     */\\n    function notifyRewardAmount(uint256 rewardAmount, uint256 _rewardDuration) external override {\\n        _updateReward(address(0));\\n        require(msg.sender == IVesperPool(pool).governor(), \\\"not-authorized\\\");\\n        require(address(rewardToken) != address(0), \\\"rewards-token-not-set\\\");\\n        require(_rewardDuration > 0, \\\"incorrect-reward-duration\\\");\\n        rewardDuration = _rewardDuration;\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = rewardAmount / rewardDuration;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = (rewardAmount + leftover) / rewardDuration;\\n        }\\n\\n        uint256 balance = IERC20(rewardToken).balanceOf(address(this));\\n        require(rewardRate <= (balance / rewardDuration), \\\"rewards-too-high\\\");\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + rewardDuration;\\n        rewardEndTime = 0;\\n        emit RewardAdded(rewardAmount);\\n    }\\n\\n    /// @dev Claim earned rewards.\\n    function claimReward(address account) external override nonReentrant {\\n        _updateReward(account);\\n        uint256 reward = rewards[account];\\n        if (reward != 0 && reward <= IERC20(rewardToken).balanceOf(address(this))) {\\n            rewards[account] = 0;\\n            IERC20(rewardToken).safeTransfer(account, reward);\\n            emit RewardPaid(account, reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updated reward end time.\\n     * Time at which reward will be ended and governor can withdraw remaining tokens\\n     */\\n    function updateRewardEndTime() external override {\\n        require(msg.sender == IVesperPool(pool).governor(), \\\"not-authorized\\\");\\n        // Make sure current reward period is over\\n        uint256 _periodFinish = block.timestamp > periodFinish ? block.timestamp : periodFinish;\\n        uint256 _rewardEndTime = _periodFinish + GRACE_PERIOD;\\n        emit UpdatedRewardEndTime(rewardEndTime, _rewardEndTime);\\n        rewardEndTime = _rewardEndTime;\\n    }\\n\\n    /**\\n     * @notice Withdraw remaining tokens\\n     * Once reward end time is passed governor can withdraw remaining tokens.\\n     * @dev rewardRate will be updated to 0\\n     * @param _toAddress Address where governor want to withdraw tokens\\n     */\\n    function withdrawRemaining(address _toAddress) external override {\\n        require(msg.sender == IVesperPool(pool).governor(), \\\"not-authorized\\\");\\n        require(rewardEndTime != 0 && block.timestamp > rewardEndTime, \\\"rewards-still-active\\\");\\n        uint256 _remaining = IERC20(rewardToken).balanceOf(address(this));\\n        IERC20(rewardToken).safeTransfer(_toAddress, _remaining);\\n        rewardRate = 0;\\n        lastUpdateTime = block.timestamp;\\n        emit RewardEnded(_toAddress, _remaining);\\n    }\\n\\n    /**\\n     * @dev Updated reward for given account. Only Pool can call\\n     */\\n    function updateReward(address _account) external override {\\n        require(msg.sender == pool, \\\"Only pool can update reward\\\");\\n        _updateReward(_account);\\n    }\\n\\n    function rewardForDuration() external view override returns (uint256) {\\n        return rewardRate * rewardDuration;\\n    }\\n\\n    /// @dev Returns claimable reward amount.\\n    function claimable(address account) public view override returns (uint256) {\\n        uint256 _balance = IERC20(pool).balanceOf(account);\\n        uint256 _rewardPerTokenAvailable = rewardPerToken() - userRewardPerTokenPaid[account];\\n        uint256 _rewardsEarnedSinceLastUpdate = (_balance * _rewardPerTokenAvailable) / 1e18;\\n        return rewards[account] + _rewardsEarnedSinceLastUpdate;\\n    }\\n\\n    /// @dev Returns timestamp of last reward update\\n    function lastTimeRewardApplicable() public view override returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view override returns (uint256) {\\n        if (IERC20(pool).totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        uint256 _timeSinceLastUpdate = lastTimeRewardApplicable() - lastUpdateTime;\\n        uint256 _rewardsSinceLastUpdate = _timeSinceLastUpdate * rewardRate;\\n        uint256 _rewardsPerTokenSinceLastUpdate = (_rewardsSinceLastUpdate * 1e18) / IERC20(pool).totalSupply();\\n        return rewardPerTokenStored + _rewardsPerTokenSinceLastUpdate;\\n    }\\n\\n    function _updateReward(address _account) private {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (_account != address(0)) {\\n            rewards[_account] = claimable(_account);\\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9cc8d4d4c1ca1110615d370d9178b1346294682f82f21c39a42f5266dd6853ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600a55611354806100256000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638b876347116100b8578063df136d651161007c578063df136d651461025e578063eb2da96214610267578063ebe2b12b1461026f578063f520e7e514610278578063f7c618c114610281578063fd0cdcdb1461029457610137565b80638b87634714610210578063c1a287e214610230578063c8f33c911461023a578063cd3daf9d14610243578063d279c1911461024b57610137565b8063485cc955116100ff578063485cc955146101d1578063632447c9146101e45780636946a235146101f75780637b0a47ee146101ff57806380faa57d1461020857610137565b80630700037d1461013c57806316f0115b1461016f578063246132f9146101a057806337e9f64a146101b5578063402914f5146101be575b600080fd5b61015c61014a366004611115565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b600054610188906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610166565b6101b36101ae3660046111bd565b6102a7565b005b61015c60045481565b61015c6101cc366004611115565b610597565b6101b36101df36600461114d565b61069b565b6101b36101f2366004611115565b610791565b61015c6107fd565b61015c60035481565b61015c610815565b61015c61021e366004611115565b60086020526000908152604090205481565b61015c62278d0081565b61015c60065481565b61015c61082d565b6101b3610259366004611115565b6109a7565b61015c60075481565b6101b3610b25565b61015c60025481565b61015c60055481565b600154610188906001600160a01b031681565b6101b36102a2366004611115565b610c46565b6102b16000610e32565b600060029054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ff57600080fd5b505afa158015610313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103379190611131565b6001600160a01b0316336001600160a01b0316146103705760405162461bcd60e51b81526004016103679061122d565b60405180910390fd5b6001546001600160a01b03166103c05760405162461bcd60e51b81526020600482015260156024820152741c995dd85c991ccb5d1bdad95b8b5b9bdd0b5cd95d605a1b6044820152606401610367565b600081116104105760405162461bcd60e51b815260206004820152601960248201527f696e636f72726563742d7265776172642d6475726174696f6e000000000000006044820152606401610367565b600581905560025442106104335760055461042b908361126d565b600355610475565b60004260025461044391906112ac565b9050600060035482610455919061128d565b6005549091506104658286611255565b61046f919061126d565b60035550505b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156104b957600080fd5b505afa1580156104cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f191906111a5565b905060055481610501919061126d565b60035411156105455760405162461bcd60e51b815260206004820152601060248201526f0e4caeec2e4c8e65ae8dede5ad0d2ced60831b6044820152606401610367565b42600681905560055461055791611255565b60025560006004556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b600080546040516370a0823160e01b81526001600160a01b038481166004830152839262010000900416906370a082319060240160206040518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b91906111a5565b6001600160a01b0384166000908152600860205260408120549192509061064061082d565b61064a91906112ac565b90506000670de0b6b3a7640000610661838561128d565b61066b919061126d565b6001600160a01b038616600090815260096020526040902054909150610692908290611255565b95945050505050565b600054610100900460ff16806106b4575060005460ff16155b6107175760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610367565b600054610100900460ff16158015610739576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b031916918416919091179055801561078c576000805461ff00191690555b505050565b6000546201000090046001600160a01b031633146107f15760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920706f6f6c2063616e207570646174652072657761726400000000006044820152606401610367565b6107fa81610e32565b50565b600060055460035461080f919061128d565b90505b90565b600060025442106108285760025461080f565b504290565b60008060029054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087c57600080fd5b505afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b491906111a5565b6108c15750600754610812565b60006006546108ce610815565b6108d891906112ac565b90506000600354826108ea919061128d565b905060008060029054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561093b57600080fd5b505afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097391906111a5565b61098583670de0b6b3a764000061128d565b61098f919061126d565b90508060075461099f9190611255565b935050505090565b6002600a5414156109fa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610367565b6002600a55610a0881610e32565b6001600160a01b0381166000908152600960205260409020548015801590610aaa57506001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a6e57600080fd5b505afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa691906111a5565b8111155b15610b1c576001600160a01b03808316600090815260096020526040812055600154610ad891168383610e8e565b816001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610b1391815260200190565b60405180910390a25b50506001600a55565b600060029054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7357600080fd5b505afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190611131565b6001600160a01b0316336001600160a01b031614610bdb5760405162461bcd60e51b81526004016103679061122d565b60006002544211610bee57600254610bf0565b425b90506000610c0162278d0083611255565b60045460408051918252602082018390529192507f20901034a1432c23e45adeaf10d4d2febb0fb2147cbc21435459e0a07d4d3879910160405180910390a160045550565b600060029054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9457600080fd5b505afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190611131565b6001600160a01b0316336001600160a01b031614610cfc5760405162461bcd60e51b81526004016103679061122d565b60045415801590610d0e575060045442115b610d515760405162461bcd60e51b8152602060048201526014602482015273726577617264732d7374696c6c2d61637469766560601b6044820152606401610367565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610d9557600080fd5b505afa158015610da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcd91906111a5565b600154909150610de7906001600160a01b03168383610e8e565b6000600355426006556040518181526001600160a01b038316907f2f114387a199a557557366a7134d08871861cccef4d78e7976ab0f6d09b3528d9060200160405180910390a25050565b610e3a61082d565b600755610e45610815565b6006556001600160a01b038116156107fa57610e6081610597565b6001600160a01b03821660009081526009602090815260408083209390935560075460089091529190205550565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261078c92869291600091610f1e918516908490610f9b565b80519091501561078c5780806020019051810190610f3c9190611185565b61078c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610367565b6060610faa8484600085610fb4565b90505b9392505050565b6060824710156110155760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610367565b843b6110635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610367565b600080866001600160a01b0316858760405161107f91906111de565b60006040518083038185875af1925050503d80600081146110bc576040519150601f19603f3d011682016040523d82523d6000602084013e6110c1565b606091505b50915091506110d18282866110dc565b979650505050505050565b606083156110eb575081610fad565b8251156110fb5782518084602001fd5b8160405162461bcd60e51b815260040161036791906111fa565b600060208284031215611126578081fd5b8135610fad81611309565b600060208284031215611142578081fd5b8151610fad81611309565b6000806040838503121561115f578081fd5b823561116a81611309565b9150602083013561117a81611309565b809150509250929050565b600060208284031215611196578081fd5b81518015158114610fad578182fd5b6000602082840312156111b6578081fd5b5051919050565b600080604083850312156111cf578182fd5b50508035926020909101359150565b600082516111f08184602087016112c3565b9190910192915050565b60006020825282518060208401526112198160408501602087016112c3565b601f01601f19169190910160400192915050565b6020808252600e908201526d1b9bdd0b585d5d1a1bdc9a5e995960921b604082015260600190565b60008219821115611268576112686112f3565b500190565b60008261128857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156112a7576112a76112f3565b500290565b6000828210156112be576112be6112f3565b500390565b60005b838110156112de5781810151838201526020016112c6565b838111156112ed576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146107fa57600080fdfea2646970667358221220a51076d7dd30f34de6ae5f0288d6cda09e21f499c3f55a62fc09ceab0556c01164736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638b876347116100b8578063df136d651161007c578063df136d651461025e578063eb2da96214610267578063ebe2b12b1461026f578063f520e7e514610278578063f7c618c114610281578063fd0cdcdb1461029457610137565b80638b87634714610210578063c1a287e214610230578063c8f33c911461023a578063cd3daf9d14610243578063d279c1911461024b57610137565b8063485cc955116100ff578063485cc955146101d1578063632447c9146101e45780636946a235146101f75780637b0a47ee146101ff57806380faa57d1461020857610137565b80630700037d1461013c57806316f0115b1461016f578063246132f9146101a057806337e9f64a146101b5578063402914f5146101be575b600080fd5b61015c61014a366004611115565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b600054610188906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610166565b6101b36101ae3660046111bd565b6102a7565b005b61015c60045481565b61015c6101cc366004611115565b610597565b6101b36101df36600461114d565b61069b565b6101b36101f2366004611115565b610791565b61015c6107fd565b61015c60035481565b61015c610815565b61015c61021e366004611115565b60086020526000908152604090205481565b61015c62278d0081565b61015c60065481565b61015c61082d565b6101b3610259366004611115565b6109a7565b61015c60075481565b6101b3610b25565b61015c60025481565b61015c60055481565b600154610188906001600160a01b031681565b6101b36102a2366004611115565b610c46565b6102b16000610e32565b600060029054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ff57600080fd5b505afa158015610313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103379190611131565b6001600160a01b0316336001600160a01b0316146103705760405162461bcd60e51b81526004016103679061122d565b60405180910390fd5b6001546001600160a01b03166103c05760405162461bcd60e51b81526020600482015260156024820152741c995dd85c991ccb5d1bdad95b8b5b9bdd0b5cd95d605a1b6044820152606401610367565b600081116104105760405162461bcd60e51b815260206004820152601960248201527f696e636f72726563742d7265776172642d6475726174696f6e000000000000006044820152606401610367565b600581905560025442106104335760055461042b908361126d565b600355610475565b60004260025461044391906112ac565b9050600060035482610455919061128d565b6005549091506104658286611255565b61046f919061126d565b60035550505b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156104b957600080fd5b505afa1580156104cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f191906111a5565b905060055481610501919061126d565b60035411156105455760405162461bcd60e51b815260206004820152601060248201526f0e4caeec2e4c8e65ae8dede5ad0d2ced60831b6044820152606401610367565b42600681905560055461055791611255565b60025560006004556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b600080546040516370a0823160e01b81526001600160a01b038481166004830152839262010000900416906370a082319060240160206040518083038186803b1580156105e357600080fd5b505afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b91906111a5565b6001600160a01b0384166000908152600860205260408120549192509061064061082d565b61064a91906112ac565b90506000670de0b6b3a7640000610661838561128d565b61066b919061126d565b6001600160a01b038616600090815260096020526040902054909150610692908290611255565b95945050505050565b600054610100900460ff16806106b4575060005460ff16155b6107175760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610367565b600054610100900460ff16158015610739576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b031916918416919091179055801561078c576000805461ff00191690555b505050565b6000546201000090046001600160a01b031633146107f15760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920706f6f6c2063616e207570646174652072657761726400000000006044820152606401610367565b6107fa81610e32565b50565b600060055460035461080f919061128d565b90505b90565b600060025442106108285760025461080f565b504290565b60008060029054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087c57600080fd5b505afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b491906111a5565b6108c15750600754610812565b60006006546108ce610815565b6108d891906112ac565b90506000600354826108ea919061128d565b905060008060029054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561093b57600080fd5b505afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097391906111a5565b61098583670de0b6b3a764000061128d565b61098f919061126d565b90508060075461099f9190611255565b935050505090565b6002600a5414156109fa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610367565b6002600a55610a0881610e32565b6001600160a01b0381166000908152600960205260409020548015801590610aaa57506001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a6e57600080fd5b505afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa691906111a5565b8111155b15610b1c576001600160a01b03808316600090815260096020526040812055600154610ad891168383610e8e565b816001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610b1391815260200190565b60405180910390a25b50506001600a55565b600060029054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7357600080fd5b505afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190611131565b6001600160a01b0316336001600160a01b031614610bdb5760405162461bcd60e51b81526004016103679061122d565b60006002544211610bee57600254610bf0565b425b90506000610c0162278d0083611255565b60045460408051918252602082018390529192507f20901034a1432c23e45adeaf10d4d2febb0fb2147cbc21435459e0a07d4d3879910160405180910390a160045550565b600060029054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9457600080fd5b505afa158015610ca8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccc9190611131565b6001600160a01b0316336001600160a01b031614610cfc5760405162461bcd60e51b81526004016103679061122d565b60045415801590610d0e575060045442115b610d515760405162461bcd60e51b8152602060048201526014602482015273726577617264732d7374696c6c2d61637469766560601b6044820152606401610367565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610d9557600080fd5b505afa158015610da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcd91906111a5565b600154909150610de7906001600160a01b03168383610e8e565b6000600355426006556040518181526001600160a01b038316907f2f114387a199a557557366a7134d08871861cccef4d78e7976ab0f6d09b3528d9060200160405180910390a25050565b610e3a61082d565b600755610e45610815565b6006556001600160a01b038116156107fa57610e6081610597565b6001600160a01b03821660009081526009602090815260408083209390935560075460089091529190205550565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261078c92869291600091610f1e918516908490610f9b565b80519091501561078c5780806020019051810190610f3c9190611185565b61078c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610367565b6060610faa8484600085610fb4565b90505b9392505050565b6060824710156110155760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610367565b843b6110635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610367565b600080866001600160a01b0316858760405161107f91906111de565b60006040518083038185875af1925050503d80600081146110bc576040519150601f19603f3d011682016040523d82523d6000602084013e6110c1565b606091505b50915091506110d18282866110dc565b979650505050505050565b606083156110eb575081610fad565b8251156110fb5782518084602001fd5b8160405162461bcd60e51b815260040161036791906111fa565b600060208284031215611126578081fd5b8135610fad81611309565b600060208284031215611142578081fd5b8151610fad81611309565b6000806040838503121561115f578081fd5b823561116a81611309565b9150602083013561117a81611309565b809150509250929050565b600060208284031215611196578081fd5b81518015158114610fad578182fd5b6000602082840312156111b6578081fd5b5051919050565b600080604083850312156111cf578182fd5b50508035926020909101359150565b600082516111f08184602087016112c3565b9190910192915050565b60006020825282518060208401526112198160408501602087016112c3565b601f01601f19169190910160400192915050565b6020808252600e908201526d1b9bdd0b585d5d1a1bdc9a5e995960921b604082015260600190565b60008219821115611268576112686112f3565b500190565b60008261128857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156112a7576112a76112f3565b500290565b6000828210156112be576112be6112f3565b500390565b60005b838110156112de5781810151838201526020016112c6565b838111156112ed576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146107fa57600080fdfea2646970667358221220a51076d7dd30f34de6ae5f0288d6cda09e21f499c3f55a62fc09ceab0556c01164736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimReward(address)": {
        "details": "Claim earned rewards."
      },
      "claimable(address)": {
        "details": "Returns claimable reward amount."
      },
      "initialize(address,address)": {
        "details": "Called by proxy to initialize this contract",
        "params": {
          "_pool": "Vesper pool address",
          "_rewardToken": "VSP token address"
        }
      },
      "lastTimeRewardApplicable()": {
        "details": "Returns timestamp of last reward update"
      },
      "notifyRewardAmount(uint256,uint256)": {
        "details": "Notify that reward is added. Also updates reward rate and reward earning period."
      },
      "updateReward(address)": {
        "details": "Updated reward for given account. Only Pool can call"
      },
      "withdrawRemaining(address)": {
        "details": "rewardRate will be updated to 0",
        "params": {
          "_toAddress": "Address where governor want to withdraw tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RewardAdded(uint256)": {
        "notice": "Emitted after reward added"
      },
      "RewardEnded(address,uint256)": {
        "notice": "Emitted when reward is ended"
      },
      "RewardPaid(address,uint256)": {
        "notice": "Emitted whenever any user claim rewards"
      }
    },
    "kind": "user",
    "methods": {
      "GRACE_PERIOD()": {
        "notice": "Once reward end is triggered, owner has to wait at least grace period to expire before he can withdraw remaining reward."
      },
      "lastUpdateTime()": {
        "notice": "Last reward drip update time stamp"
      },
      "periodFinish()": {
        "notice": "Where is current reward period ending"
      },
      "pool()": {
        "notice": "Vesper pool address"
      },
      "rewardDuration()": {
        "notice": "Duration of current reward distribution"
      },
      "rewardEndTime()": {
        "notice": "Reward end time"
      },
      "rewardPerTokenStored()": {
        "notice": "Reward per token calculated and stored at last drip update"
      },
      "rewardRate()": {
        "notice": "Current reward rate"
      },
      "rewardToken()": {
        "notice": "Reward token address, mostly it will be VSP"
      },
      "rewards(address)": {
        "notice": "User => Rewards earned till last reward update"
      },
      "updateRewardEndTime()": {
        "notice": "Updated reward end time. Time at which reward will be ended and governor can withdraw remaining tokens"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "User => Reward per token stored at last reward update"
      },
      "withdrawRemaining(address)": {
        "notice": "Withdraw remaining tokens Once reward end time is passed governor can withdraw remaining tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 887,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 890,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7136,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "pool",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7139,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7146,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7149,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7152,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardEndTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7155,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7158,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7161,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7166,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7171,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 938,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}