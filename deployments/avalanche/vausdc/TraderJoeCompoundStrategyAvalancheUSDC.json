{
  "address": "0xe25d8F3F659E2a44602eC91538F9818793fd844F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardDistributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldRewardDistributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newRewardDistributor",
          "type": "address"
        }
      ],
      "name": "RewardDistributorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPTROLLER",
      "outputs": [
        {
          "internalType": "contract Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRewardDistributor",
          "type": "address"
        }
      ],
      "name": "updateRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x19f3848558ddd2228f9aa7a4d52c433a6ad50f39771877e1f5a8ad7817f44afb",
  "receipt": {
    "to": null,
    "from": "0x1CbfaE0367a9B1e4Ac2c158E57B5F00cCb337271",
    "contractAddress": "0xe25d8F3F659E2a44602eC91538F9818793fd844F",
    "transactionIndex": 8,
    "gasUsed": "3508945",
    "logsBloom": "0x
    "blockHash": "0xe71cc0c3c95d66a769df690fa1d737bc4f36d64307ae5dd0dff079b99aa7c02d",
    "transactionHash": "0x19f3848558ddd2228f9aa7a4d52c433a6ad50f39771877e1f5a8ad7817f44afb",
    "logs": [],
    "blockNumber": 10749843,
    "cumulativeGasUsed": "4875938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x13AECC59A88A65F02E053eEce29d743a952D6f1e",
    "0xEbedFD259c9FB1F5c0ab9A9f24E79F8d80E29B23",
    "0xdc13687554205E5b89Ac783db14bb5bba4A1eDaC",
    "0x45B2C4139d96F44667577C0D7F7a7D170B420324",
    "0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd",
    "0xEd6AaF91a2B084bd594DBd1245be3691F9f637aC",
    "TraderJoeCompoundStrategyAvalancheUSDC"
  ],
  "solcInputHash": "08a6b5bd93158006aa43afbc4be71aa7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldRewardDistributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newRewardDistributor\",\"type\":\"address\"}],\"name\":\"RewardDistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardDistributor\",\"type\":\"address\"}],\"name\":\"updateRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Report total value in collateral token\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in a Compound Fork on avalanche and Earn Interest\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value using COMP accrued and cToken\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol\":\"CompoundMultiRewardAvalancheStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(\\n        address owner,\\n        address user,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function markets(address market)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isCompted\\n        );\\n}\\n\",\"keccak256\":\"0x75e5522f5de8a74130bb58bbf6700f11ec2534984cf71b4ee6cdc609625a3eec\",\"license\":\"MIT\"},\"contracts/interfaces/compound/IComptrollerMultiReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"./ICompound.sol\\\";\\n\\ninterface ComptrollerMultiReward is Comptroller {\\n    function claimReward(uint8 rewardType, address holder) external;\\n\\n    function rewardDistributor() external view returns (address);\\n}\\n\\ninterface IRewardDistributor {\\n    function rewardAccrued(uint8 rewardType, address holder) external view returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function _setRewardSpeed(\\n        uint8 rewardType,\\n        address jToken,\\n        uint256 rewardSupplySpeed,\\n        uint256 rewardBorrowSpeed\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf3769e7c8159275a765846e202b7d4ca540aeff35865460b398dda091fb925e0\",\"license\":\"MIT\"},\"contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0ca44fa24917d55f54cb00a484d7826bae677747a2110203e2cfe642ba1eec5e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf2335cb2ab1ae53919cb05ef89b3c0b223565c2ddb2e3d972a25e471230d417\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    // Function to get pricePerShare from V2 pools\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938b275f1e200fabee7dec960f95f7c82e934de107e12a2acac487d624d190c4\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration.\\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            (bool _success, bytes memory _returnData) =\\n                address(swapManager).call(\\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\\n                );\\n            if (_success) {\\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n                return (0, false);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0x5b96b930f1ddb6914b7545e1f25e80f63e98eeb76537174e4b53d9cdd8ad4a18\",\"license\":\"MIT\"},\"contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../compound/CompoundStrategy.sol\\\";\\nimport \\\"../../interfaces/compound/IComptrollerMultiReward.sol\\\";\\nimport \\\"../../interfaces/token/IToken.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Compound Fork on avalanche and Earn Interest\\ncontract CompoundMultiRewardAvalancheStrategy is CompoundStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address public rewardDistributor;\\n\\n    event RewardDistributorUpdated(address indexed _oldRewardDistributor, address indexed _newRewardDistributor);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _comptroller,\\n        address _rewardDistributor,\\n        address _rewardToken,\\n        address _receiptToken,\\n        string memory _name\\n    ) CompoundStrategy(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _name) {\\n        WETH = WAVAX;\\n        require(_rewardDistributor != address(0), \\\"invalid-reward-distributor-addr\\\");\\n        rewardDistributor = _rewardDistributor;\\n    }\\n\\n    // Updates rewardDistributor of the Compound fork, in case it changes over time\\n    function updateRewardDistributor(address _newRewardDistributor) external onlyKeeper {\\n        require(_newRewardDistributor != address(0), \\\"invalid-reward-distributor-addr\\\");\\n        emit RewardDistributorUpdated(rewardDistributor, _newRewardDistributor);\\n        rewardDistributor = _newRewardDistributor;\\n    }\\n\\n    // Allow to receive avax from rewardDistributor only\\n    receive() external payable {\\n        require(msg.sender == rewardDistributor, \\\"not-allowed-to-receive-avax\\\");\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n\\n        // Approve router to swap extra wAVAX rewards\\n        // Expect for the case when collateral is wAVAX itself\\n        if (address(collateralToken) != WAVAX) {\\n            for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n                IERC20(WAVAX).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n            }\\n        }\\n    }\\n\\n    //solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal override {}\\n\\n    /// @notice Claim Protocol rewards + AVAX and convert them into collateral token.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        ComptrollerMultiReward(address(COMPTROLLER)).claimReward(0, address(this)); // Claim protocol rewards\\n        ComptrollerMultiReward(address(COMPTROLLER)).claimReward(1, address(this)); // Claim native AVAX (optional)\\n\\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n        if (_rewardAmount != 0) {\\n            _safeSwap(rewardToken, _toToken, _rewardAmount, 1);\\n        }\\n        uint256 _avaxRewardAmount = address(this).balance;\\n        if (_avaxRewardAmount != 0) {\\n            TokenLike(WAVAX).deposit{value: _avaxRewardAmount}();\\n            if (_toToken != WAVAX) {\\n                _safeSwap(WAVAX, _toToken, _avaxRewardAmount, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Get main Rewards accrued\\n    function _getRewardAccrued() internal view virtual override returns (uint256 _rewardAccrued) {\\n        _rewardAccrued = IRewardDistributor(rewardDistributor).rewardAccrued(0, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x3a771e9039b73ffd17d39702f9cebfc75a995a6063af0daf9359b38c0b1e42ec\",\"license\":\"MIT\"},\"contracts/strategies/compound/CompoundStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and earn interest.\\ncontract CompoundStrategy is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    CToken internal cToken;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    Comptroller public immutable COMPTROLLER;\\n    address public immutable rewardToken;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _receiptToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        cToken = CToken(_receiptToken);\\n        swapSlippage = 10000; // disable oracles on reward swaps by default\\n        NAME = _name;\\n\\n        // Either can be address(0), for example in Rari Strategy\\n        COMPTROLLER = Comptroller(_comptroller);\\n        rewardToken = _rewardToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value using COMP accrued and cToken\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        _totalValue = _calculateTotalValue((rewardToken != address(0)) ? _getRewardAccrued() : 0);\\n    }\\n\\n    function totalValueCurrent() public virtual override returns (uint256 _totalValue) {\\n        if (rewardToken != address(0)) {\\n            _claimRewards();\\n            _totalValue = _calculateTotalValue(IERC20(rewardToken).balanceOf(address(this)));\\n        } else {\\n            _totalValue = _calculateTotalValue(0);\\n        }\\n    }\\n\\n    function _calculateTotalValue(uint256 _rewardAccrued) internal view returns (uint256 _totalValue) {\\n        if (_rewardAccrued != 0) {\\n            (, _totalValue) = swapManager.bestPathFixedInput(rewardToken, address(collateralToken), _rewardAccrued, 0);\\n        }\\n        _totalValue += _convertToCollateral(cToken.balanceOf(address(this)));\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(cToken) || _token == rewardToken;\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        if (rewardToken != address(0)) {\\n            for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n                IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n            }\\n        }\\n    }\\n\\n    //solhint-disable-next-line no-empty-blocks\\n    function _beforeMigration(address _newStrategy) internal virtual override {}\\n\\n    /// @notice Claim comp\\n    function _claimRewards() internal virtual {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        COMPTROLLER.claimComp(address(this), _markets);\\n    }\\n\\n    function _getRewardAccrued() internal view virtual returns (uint256 _rewardAccrued) {\\n        _rewardAccrued = COMPTROLLER.compAccrued(address(this));\\n    }\\n\\n    /// @notice Claim COMP and convert COMP into collateral token.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        if (rewardToken != address(0)) {\\n            _claimRewards();\\n            uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n            if (_rewardAmount != 0) {\\n                uint256 minAmtOut =\\n                    (swapSlippage != 10000)\\n                        ? _calcAmtOutAfterSlippage(\\n                            _getOracleRate(_simpleOraclePath(rewardToken, _toToken), _rewardAmount),\\n                            swapSlippage\\n                        )\\n                        : 1;\\n                _safeSwap(rewardToken, _toToken, _rewardAmount, minAmtOut);\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw collateral to payback excess debt\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\\n        if (_excessDebt != 0) {\\n            _payback = _safeWithdraw(_excessDebt);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Compound.\\n     * @dev Claim COMP and convert into collateral\\n     * @dev If somehow we got some collateral token in strategy then we want to\\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance > _totalDebt) {\\n            _withdrawHere(_collateralBalance - _totalDebt);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculate realized loss.\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Compound\\n    function _reinvest() internal virtual override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        if (_collateralBalance != 0) {\\n            require(cToken.mint(_collateralBalance) == 0, \\\"deposit-to-compound-failed\\\");\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral and transfer it to pool\\n    function _withdraw(uint256 _amount) internal override {\\n        _safeWithdraw(_amount);\\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        // Get available liquidity from Compound\\n        uint256 _availableLiquidity = cToken.getCash();\\n        // Get minimum of _amount and _avaialbleLiquidity\\n        uint256 _withdrawAmount = _amount < _availableLiquidity ? _amount : _availableLiquidity;\\n        // Get minimum of _withdrawAmount and _collateralBalance\\n        return _withdrawHere(_withdrawAmount < _collateralBalance ? _withdrawAmount : _collateralBalance);\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\\n        if (_amount != 0) {\\n            require(cToken.redeemUnderlying(_amount) == 0, \\\"withdraw-from-compound-failed\\\");\\n            _afterRedeem();\\n        }\\n        return _amount;\\n    }\\n\\n    function _setupOracles() internal virtual override {\\n        if (rewardToken != address(0))\\n            swapManager.createOrUpdateOracle(rewardToken, WETH, oraclePeriod, oracleRouterIdx);\\n        if (address(collateralToken) != WETH) {\\n            swapManager.createOrUpdateOracle(WETH, address(collateralToken), oraclePeriod, oracleRouterIdx);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compound support ETH as collateral not WETH. This hook will take\\n     * care of conversion from WETH to ETH and vice versa.\\n     * @dev This will be used in ETH strategy only, hence empty implementation\\n     */\\n    //solhint-disable-next-line no-empty-blocks\\n    function _afterRedeem() internal virtual {}\\n\\n    function _convertToCollateral(uint256 _cTokenAmount) internal view returns (uint256) {\\n        return (_cTokenAmount * cToken.exchangeRateStored()) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xaff6e8d3d44c84dada408f43f1a4752ad55cb852746ee29d0b9ad92eccb2eb74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052600080546001600160a01b03191673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2178155610e106004556005556127106006553480156200004757600080fd5b50604051620040ba380380620040ba8339810160408190526200006a91620004c6565b8686868585858585836001600160a01b038316620000cf5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166200011c5760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000c6565b600380546001600160a01b0319166001600160a01b0384811691909117909155606084901b6001600160601b03191660a05260408051637e062a3560e11b815290519185169163fc0c546a91600480820192602092909190829003018186803b1580156200018957600080fd5b505afa1580156200019e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c4919062000621565b60601b6001600160601b031916608052600180546001600160a01b0319166001600160a01b03831617905562000211620001fb3390565b6007620003ae60201b620018df1790919060201c565b620002535760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401620000c6565b5050506001600160a01b038216620002ae5760405162461bcd60e51b815260206004820152601660248201527f63546f6b656e2d616464726573732d69732d7a65726f000000000000000000006044820152606401620000c6565b600a80546001600160a01b0319166001600160a01b0384161790556127106006558051620002e490600990602084019062000420565b5050506001600160601b0319606092831b811660c052911b1660e0525050600080546001600160a01b03191673b31f66aa3c1e785363f0875a1b74e27b85fd66c71790556001600160a01b038416620003805760405162461bcd60e51b815260206004820152601f60248201527f696e76616c69642d7265776172642d6469737472696275746f722d61646472006044820152606401620000c6565b5050600b80546001600160a01b0319166001600160a01b03939093169290921790915550620006b392505050565b6000620003c5836001600160a01b038416620003ce565b90505b92915050565b60008181526001830160205260408120546200041757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620003c8565b506000620003c8565b8280546200042e9062000647565b90600052602060002090601f0160209004810192826200045257600085556200049d565b82601f106200046d57805160ff19168380011785556200049d565b828001600101855582156200049d579182015b828111156200049d57825182559160200191906001019062000480565b50620004ab929150620004af565b5090565b5b80821115620004ab5760008155600101620004b0565b600080600080600080600060e0888a031215620004e1578283fd5b8751620004ee816200069a565b8097505060208089015162000503816200069a565b60408a015190975062000516816200069a565b60608a015190965062000529816200069a565b60808a01519095506200053c816200069a565b60a08a01519094506200054f816200069a565b60c08a01519093506001600160401b03808211156200056c578384fd5b818b0191508b601f83011262000580578384fd5b81518181111562000595576200059562000684565b604051601f8201601f19908116603f01168101908382118183101715620005c057620005c062000684565b816040528281528e86848701011115620005d8578687fd5b8693505b82841015620005fb5784840186015181850187015292850192620005dc565b828411156200060c57868684830101525b80965050505050505092959891949750929550565b60006020828403121562000633578081fd5b815162000640816200069a565b9392505050565b600181811c908216806200065c57607f821691505b602082108114156200067e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620006b057600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6138a962000811600039600081816105b8015281816108b401528181611599015281816118010152818161184901528181611e2b01528181611e8a01528181612108015281816128200152818161296501528181612e2b0152612ebe01526000818161036d01528181612d270152612da60152600081816102390152818161062b0152818161073e0152818161078e015281816109cd01528181610b8001528181610d3001528181610e77015281816110da01528181611177015281816113cb01528181611921015281816119b601528181611a5601526127bf0152600081816104a4015281816112fe015281816113a2015281816116500152818161194201528181611b3401528181611cab01528181611f1001528181611f760152818161212a015281816125c20152818161264d0152818161279d01526127f501526138a96000f3fe60806040526004361061019c5760003560e01c8063a3f4df7e116100e2578063d2c35ce811610085578063d2c35ce81461051c578063d4c3eea01461053c578063e00af4a714610551578063e645c20214610571578063ec78e83214610586578063f7c618c1146105a6578063fc0c546a146105da578063ffa1ad74146105f857610202565b8063a3f4df7e1461041b578063a923b2a61461043d578063aa1018861461045d578063acc2166a14610472578063b2016bd414610492578063c415b95c146104c6578063cd2d7ebe146104e6578063ce5494bb146104fc57610202565b8063497cd4261161014a578063497cd4261461031b5780634c36fad71461033b5780635f82c67e1461035b57806367f5e4b81461038f578063709d039d146103af5780637d7c2a1c146103cf578063951dc22c146103e457806399b71d5c1461040657610202565b806314ae9f2e1461020757806316f0115b146102275780631aedeabe146102715780632e1a7d4d146102955780634032b72b146102b557806342189c8f146102d5578063440d7248146102eb57610202565b3661020257600b546001600160a01b031633146102005760405162461bcd60e51b815260206004820152601b60248201527f6e6f742d616c6c6f7765642d746f2d726563656976652d61766178000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561021357600080fd5b5061020061022236600461334c565b610629565b34801561023357600080fd5b5061025b7f000000000000000000000000000000000000000000000000000000000000000081565b604051610268919061357a565b60405180910390f35b34801561027d57600080fd5b5061028760065481565b604051908152602001610268565b3480156102a157600080fd5b506102006102b03660046134ca565b61073b565b3480156102c157600080fd5b506102006102d036600461334c565b61078c565b3480156102e157600080fd5b5061028760045481565b3480156102f757600080fd5b5061030b61030636600461334c565b610898565b6040519015158152602001610268565b34801561032757600080fd5b5061020061033636600461334c565b6108f0565b34801561034757600080fd5b5061020061035636600461334c565b6109cb565b34801561036757600080fd5b5061025b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039b57600080fd5b506102006103aa3660046134ca565b610b7e565b3480156103bb57600080fd5b5060035461025b906001600160a01b031681565b3480156103db57600080fd5b50610200610cca565b3480156103f057600080fd5b506103f9610d99565b60405161026891906135b7565b34801561041257600080fd5b50610200610dab565b34801561042757600080fd5b50610430610de7565b60405161026891906135e6565b34801561044957600080fd5b506102006104583660046134fa565b610e75565b34801561046957600080fd5b506102006110aa565b34801561047e57600080fd5b50600b5461025b906001600160a01b031681565b34801561049e57600080fd5b5061025b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104d257600080fd5b5060025461025b906001600160a01b031681565b3480156104f257600080fd5b5061028760055481565b34801561050857600080fd5b5061020061051736600461334c565b6110d7565b34801561052857600080fd5b5061020061053736600461334c565b6113c9565b34801561054857600080fd5b50610287611592565b34801561055d57600080fd5b5061020061056c36600461334c565b6115d9565b34801561057d57600080fd5b506102876117fd565b34801561059257600080fd5b5060015461025b906001600160a01b031681565b3480156105b257600080fd5b5061025b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e657600080fd5b506001546001600160a01b031661025b565b34801561060457600080fd5b50610430604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561068257600080fd5b505afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190613368565b6001600160a01b0316336001600160a01b0316146106ea5760405162461bcd60e51b81526004016101f790613649565b6106f56007826118fd565b6107385760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016101f7565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146107835760405162461bcd60e51b81526004016101f790613680565b61073881611912565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e557600080fd5b505afa1580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190613368565b6001600160a01b0316336001600160a01b03161461084d5760405162461bcd60e51b81526004016101f790613649565b6108586007826118df565b6107385760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016101f7565b600a546000906001600160a01b03838116911614806108e857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b90505b919050565b6108fd335b60079061198c565b6109195760405162461bcd60e51b81526004016101f790613619565b6001600160a01b03811661096f5760405162461bcd60e51b815260206004820152601f60248201527f696e76616c69642d7265776172642d6469737472696275746f722d616464720060448201526064016101f7565b600b546040516001600160a01b038084169216907f1df95772db25c427e0df149fe4cd5b7c2e970e096ee7305ff86f6e1167281d7b90600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2457600080fd5b505afa158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c9190613368565b6001600160a01b0316336001600160a01b031614610a8c5760405162461bcd60e51b81526004016101f790613649565b6001600160a01b038116610ad75760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016101f7565b6003546001600160a01b0382811691161415610b225760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016101f7565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190613368565b6001600160a01b0316336001600160a01b031614610c3f5760405162461bcd60e51b81526004016101f790613649565b612710811115610c8a5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016101f7565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b610cd3336108f5565b610cef5760405162461bcd60e51b81526004016101f790613619565b6000806000610cfc6119ae565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b50505050610d94611b1a565b505050565b6060610da56007611c8c565b90505b90565b610db4336108f5565b610dd05760405162461bcd60e51b81526004016101f790613619565b610dda6000611ca0565b610de5600019611ca0565b565b60098054610df4906137e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e20906137e2565b8015610e6d5780601f10610e4257610100808354040283529160200191610e6d565b820191906000526020600020905b815481529060010190602001808311610e5057829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ece57600080fd5b505afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190613368565b6001600160a01b0316336001600160a01b031614610f365760405162461bcd60e51b81526004016101f790613649565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8457600080fd5b505afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc91906134e2565b81106110015760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016101f7565b8161100c5760045491505b603b82116110545760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016101f7565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6110b3336108f5565b6110cf5760405162461bcd60e51b81526004016101f790613619565b610de5611e29565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461111f5760405162461bcd60e51b81526004016101f790613680565b6001600160a01b0381166111755760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016101f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d857600080fd5b505afa1580156111ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112109190613368565b6001600160a01b03161461125f5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016101f7565b6001546040516370a0823160e01b81526112f89183916001600160a01b03909116906370a082319061129590309060040161357a565b60206040518083038186803b1580156112ad57600080fd5b505afa1580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e591906134e2565b6001546001600160a01b03169190611ff2565b610738817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611348919061357a565b60206040518083038186803b15801561136057600080fd5b505afa158015611374573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139891906134e2565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611ff2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561142257600080fd5b505afa158015611436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145a9190613368565b6001600160a01b0316336001600160a01b03161461148a5760405162461bcd60e51b81526004016101f790613649565b6001600160a01b0381166114e05760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016101f7565b6002546001600160a01b03828116911614156115365760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016101f7565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610da57f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166115cc5760006115d4565b6115d4612055565b6120d8565b6115e2336108f5565b6115fe5760405162461bcd60e51b81526004016101f790613619565b6002546001600160a01b031661164e5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016101f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156116d05760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016101f7565b6116d981610898565b1561171d5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016101f7565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561175d57600254611758906001600160a01b031647612240565b610738565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061178c90309060040161357a565b60206040518083038186803b1580156117a457600080fd5b505afa1580156117b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dc91906134e2565b6002549091506117f9906001600160a01b03848116911683611ff2565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156118d5576040516370a0823160e01b81526118ce906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061187e90309060040161357a565b60206040518083038186803b15801561189657600080fd5b505afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d491906134e2565b9050610da8565b610da560006120d8565b60006118f4836001600160a01b038416612359565b90505b92915050565b60006118f4836001600160a01b0384166123a8565b61191b816124c5565b506107387f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611348919061357a565b6001600160a01b038116600090815260018301602052604081205415156118f4565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401611a00919061357a565b60206040518083038186803b158015611a1857600080fd5b505afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5091906134e2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401611aa0919061357a565b60206040518083038186803b158015611ab857600080fd5b505afa158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af091906134e2565b9050611afb816125bb565b9450611b06816126d2565b9350611b1182612723565b92505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611b6990309060040161357a565b60206040518083038186803b158015611b8157600080fd5b505afa158015611b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb991906134e2565b9050801561073857600a5460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b158015611c0757600080fd5b505af1158015611c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3f91906134e2565b156107385760405162461bcd60e51b815260206004820152601a60248201527f6465706f7369742d746f2d636f6d706f756e642d6661696c656400000000000060448201526064016101f7565b60606000611c9983612734565b9392505050565b611ca981612790565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673b31f66aa3c1e785363f0875a1b74e27b85fd66c7146107385760005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3e57600080fd5b505afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7691906134e2565b8110156117f957600354604051636e74a6f760e01b815260048101839052611e17916001600160a01b031690636e74a6f79060240160206040518083038186803b158015611dc357600080fd5b505afa158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb9190613368565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c7908461299e565b80611e2181613817565b915050611cf0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615611f0b5760035460005460048054600554604051630f30f2d360e21b81526001600160a01b0395861695633cc3cb4c95611eb7957f000000000000000000000000000000000000000000000000000000000000000095929091169391920161358e565b602060405180830381600087803b158015611ed157600080fd5b505af1158015611ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f099190613368565b505b6000547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614610de55760035460005460048054600554604051630f30f2d360e21b81526001600160a01b0395861695633cc3cb4c95611fa0959116937f000000000000000000000000000000000000000000000000000000000000000093909290910161358e565b602060405180830381600087803b158015611fba57600080fd5b505af1158015611fce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190613368565b6040516001600160a01b038316602482015260448101829052610d9490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ac2565b600b546040516305b9783d60e01b81526000916001600160a01b0316906305b9783d9061208890849030906004016135ca565b60206040518083038186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906134e2565b600081156121af576003546040516340b4c54560e11b81526001600160a01b03909116906381698a8a90612157907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090879060009060040161358e565b60006040518083038186803b15801561216f57600080fd5b505afa158015612183573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121ab9190810190613384565b9150505b600a546040516370a0823160e01b8152612236916001600160a01b0316906370a08231906121e190309060040161357a565b60206040518083038186803b1580156121f957600080fd5b505afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223191906134e2565b612b94565b6108e89082613744565b804710156122905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101f7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146122dd576040519150601f19603f3d011682016040523d82523d6000602084013e6122e2565b606091505b5050905080610d945760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101f7565b60008181526001830160205260408120546123a0575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556118f7565b5060006118f7565b600081815260018301602052604081205480156124bb5760006123cc60018361379b565b85549091506000906123e09060019061379b565b905081811461246157600086600001828154811061240e57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061243f57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061248057634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506118f7565b60009150506118f7565b600a546040516370a0823160e01b815260009182916124fc916001600160a01b0316906370a08231906121e190309060040161357a565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561254e57600080fd5b505afa158015612562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258691906134e2565b905060008185106125975781612599565b845b90506125b28382106125ab57836125ad565b815b612c39565b95945050505050565b60006125e67f0000000000000000000000000000000000000000000000000000000000000000612d10565b600a546040516370a0823160e01b815260009161261d916001600160a01b03909116906370a08231906121e190309060040161357a565b905082811115612636576126346125ad848361379b565b505b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061268290309060040161357a565b60206040518083038186803b15801561269a57600080fd5b505afa1580156126ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9991906134e2565b600a546040516370a0823160e01b81526000918291612709916001600160a01b0316906370a08231906121e190309060040161357a565b90508281101561271d57611c99818461379b565b50919050565b600081156108eb576108e8826124c5565b60608160000180548060200260200160405190810160405280929190818152602001828054801561278457602002820191906000526020600020905b815481526020019060010190808311612770575b50505050509050919050565b6127e46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361299e565b600a5461281e906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361299e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156107385760005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561289e57600080fd5b505afa1580156128b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d691906134e2565b8110156117f957600354604051636e74a6f760e01b81526004810183905261298c916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561292357600080fd5b505afa158015612937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295b9190613368565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908461299e565b8061299681613817565b915050612850565b801580612a275750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156129ed57600080fd5b505afa158015612a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2591906134e2565b155b612a925760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101f7565b6040516001600160a01b038316602482015260448101829052610d9490849063095ea7b360e01b9060640161201e565b6000612b17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f9b9092919063ffffffff16565b805190915015610d945780806020019051810190612b3591906134aa565b610d945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101f7565b6000670de0b6b3a7640000600a60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612bed57600080fd5b505afa158015612c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2591906134e2565b612c2f908461377c565b6108e8919061375c565b60008115612d0c57600a5460405163852a12e360e01b8152600481018490526001600160a01b039091169063852a12e390602401602060405180830381600087803b158015612c8757600080fd5b505af1158015612c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbf91906134e2565b15612d0c5760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c656400000060448201526064016101f7565b5090565b604051630952c56360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630952c56390612d5f9060009030906004016135ca565b600060405180830381600087803b158015612d7957600080fd5b505af1158015612d8d573d6000803e3d6000fd5b5050604051630952c56360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250630952c5639150612de09060019030906004016135ca565b600060405180830381600087803b158015612dfa57600080fd5b505af1158015612e0e573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a0823190612e6190309060040161357a565b60206040518083038186803b158015612e7957600080fd5b505afa158015612e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb191906134e2565b90508015612ee657612ee67f000000000000000000000000000000000000000000000000000000000000000083836001612fb2565b478015610d945773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612f3c57600080fd5b505af1158015612f50573d6000803e3d6000fd5b505050506001600160a01b03841673b31f66aa3c1e785363f0875a1b74e27b85fd66c7149050610d9457610d9473b31f66aa3c1e785363f0875a1b74e27b85fd66c784836001612fb2565b6060612faa8484600085613173565b949350505050565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561300d57600080fd5b505afa158015613021573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261304991908101906133c9565b925092509250836000141561305d57600193505b811561316a57600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156130a757600080fd5b505afa1580156130bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130df9190613368565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b81526004016131129594939291906136b3565b600060405180830381600087803b15801561312c57600080fd5b505af1158015613140573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131689190810190613417565b505b50505050505050565b6060824710156131d45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101f7565b843b6132225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f7565b600080866001600160a01b0316858760405161323e919061355e565b60006040518083038185875af1925050503d806000811461327b576040519150601f19603f3d011682016040523d82523d6000602084013e613280565b606091505b509150915061329082828661329b565b979650505050505050565b606083156132aa575081611c99565b8251156132ba5782518084602001fd5b8160405162461bcd60e51b81526004016101f791906135e6565b600082601f8301126132e4578081fd5b815160206132f96132f483613720565b6136ef565b80838252828201915082860187848660051b8901011115613318578586fd5b855b8581101561333f57815161332d8161385e565b8452928401929084019060010161331a565b5090979650505050505050565b60006020828403121561335d578081fd5b8135611c998161385e565b600060208284031215613379578081fd5b8151611c998161385e565b60008060408385031215613396578081fd5b825167ffffffffffffffff8111156133ac578182fd5b6133b8858286016132d4565b925050602083015190509250929050565b6000806000606084860312156133dd578081fd5b835167ffffffffffffffff8111156133f3578182fd5b6133ff868287016132d4565b93505060208401519150604084015190509250925092565b60006020808385031215613429578182fd5b825167ffffffffffffffff81111561343f578283fd5b8301601f8101851361344f578283fd5b805161345d6132f482613720565b80828252848201915084840188868560051b870101111561347c578687fd5b8694505b8385101561349e578051835260019490940193918501918501613480565b50979650505050505050565b6000602082840312156134bb578081fd5b81518015158114611c99578182fd5b6000602082840312156134db578081fd5b5035919050565b6000602082840312156134f3578081fd5b5051919050565b6000806040838503121561350c578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156135535781516001600160a01b03168752958201959082019060010161352e565b509495945050505050565b600082516135708184602087016137b2565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602082526118f4602083018461351b565b60ff9290921682526001600160a01b0316602082015260400190565b60006020825282518060208401526136058160408501602087016137b2565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600086825285602083015260a060408301526136d260a083018661351b565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561371857613718613848565b604052919050565b600067ffffffffffffffff82111561373a5761373a613848565b5060051b60200190565b6000821982111561375757613757613832565b500190565b60008261377757634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561379657613796613832565b500290565b6000828210156137ad576137ad613832565b500390565b60005b838110156137cd5781810151838201526020016137b5565b838111156137dc576000848401525b50505050565b600181811c908216806137f657607f821691505b6020821081141561271d57634e487b7160e01b600052602260045260246000fd5b600060001982141561382b5761382b613832565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461073857600080fdfea2646970667358221220f39ae21a1464b58f3d9ebcb7aa57de5de32d5e998bda0f6f2b6f878b6fe67e8964736f6c63430008030033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c8063a3f4df7e116100e2578063d2c35ce811610085578063d2c35ce81461051c578063d4c3eea01461053c578063e00af4a714610551578063e645c20214610571578063ec78e83214610586578063f7c618c1146105a6578063fc0c546a146105da578063ffa1ad74146105f857610202565b8063a3f4df7e1461041b578063a923b2a61461043d578063aa1018861461045d578063acc2166a14610472578063b2016bd414610492578063c415b95c146104c6578063cd2d7ebe146104e6578063ce5494bb146104fc57610202565b8063497cd4261161014a578063497cd4261461031b5780634c36fad71461033b5780635f82c67e1461035b57806367f5e4b81461038f578063709d039d146103af5780637d7c2a1c146103cf578063951dc22c146103e457806399b71d5c1461040657610202565b806314ae9f2e1461020757806316f0115b146102275780631aedeabe146102715780632e1a7d4d146102955780634032b72b146102b557806342189c8f146102d5578063440d7248146102eb57610202565b3661020257600b546001600160a01b031633146102005760405162461bcd60e51b815260206004820152601b60248201527f6e6f742d616c6c6f7765642d746f2d726563656976652d61766178000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561021357600080fd5b5061020061022236600461334c565b610629565b34801561023357600080fd5b5061025b7f000000000000000000000000000000000000000000000000000000000000000081565b604051610268919061357a565b60405180910390f35b34801561027d57600080fd5b5061028760065481565b604051908152602001610268565b3480156102a157600080fd5b506102006102b03660046134ca565b61073b565b3480156102c157600080fd5b506102006102d036600461334c565b61078c565b3480156102e157600080fd5b5061028760045481565b3480156102f757600080fd5b5061030b61030636600461334c565b610898565b6040519015158152602001610268565b34801561032757600080fd5b5061020061033636600461334c565b6108f0565b34801561034757600080fd5b5061020061035636600461334c565b6109cb565b34801561036757600080fd5b5061025b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039b57600080fd5b506102006103aa3660046134ca565b610b7e565b3480156103bb57600080fd5b5060035461025b906001600160a01b031681565b3480156103db57600080fd5b50610200610cca565b3480156103f057600080fd5b506103f9610d99565b60405161026891906135b7565b34801561041257600080fd5b50610200610dab565b34801561042757600080fd5b50610430610de7565b60405161026891906135e6565b34801561044957600080fd5b506102006104583660046134fa565b610e75565b34801561046957600080fd5b506102006110aa565b34801561047e57600080fd5b50600b5461025b906001600160a01b031681565b34801561049e57600080fd5b5061025b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104d257600080fd5b5060025461025b906001600160a01b031681565b3480156104f257600080fd5b5061028760055481565b34801561050857600080fd5b5061020061051736600461334c565b6110d7565b34801561052857600080fd5b5061020061053736600461334c565b6113c9565b34801561054857600080fd5b50610287611592565b34801561055d57600080fd5b5061020061056c36600461334c565b6115d9565b34801561057d57600080fd5b506102876117fd565b34801561059257600080fd5b5060015461025b906001600160a01b031681565b3480156105b257600080fd5b5061025b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e657600080fd5b506001546001600160a01b031661025b565b34801561060457600080fd5b50610430604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561068257600080fd5b505afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba9190613368565b6001600160a01b0316336001600160a01b0316146106ea5760405162461bcd60e51b81526004016101f790613649565b6106f56007826118fd565b6107385760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016101f7565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146107835760405162461bcd60e51b81526004016101f790613680565b61073881611912565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e557600080fd5b505afa1580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190613368565b6001600160a01b0316336001600160a01b03161461084d5760405162461bcd60e51b81526004016101f790613649565b6108586007826118df565b6107385760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016101f7565b600a546000906001600160a01b03838116911614806108e857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b90505b919050565b6108fd335b60079061198c565b6109195760405162461bcd60e51b81526004016101f790613619565b6001600160a01b03811661096f5760405162461bcd60e51b815260206004820152601f60248201527f696e76616c69642d7265776172642d6469737472696275746f722d616464720060448201526064016101f7565b600b546040516001600160a01b038084169216907f1df95772db25c427e0df149fe4cd5b7c2e970e096ee7305ff86f6e1167281d7b90600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a2457600080fd5b505afa158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c9190613368565b6001600160a01b0316336001600160a01b031614610a8c5760405162461bcd60e51b81526004016101f790613649565b6001600160a01b038116610ad75760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016101f7565b6003546001600160a01b0382811691161415610b225760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016101f7565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190613368565b6001600160a01b0316336001600160a01b031614610c3f5760405162461bcd60e51b81526004016101f790613649565b612710811115610c8a5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016101f7565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b610cd3336108f5565b610cef5760405162461bcd60e51b81526004016101f790613619565b6000806000610cfc6119ae565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b50505050610d94611b1a565b505050565b6060610da56007611c8c565b90505b90565b610db4336108f5565b610dd05760405162461bcd60e51b81526004016101f790613619565b610dda6000611ca0565b610de5600019611ca0565b565b60098054610df4906137e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e20906137e2565b8015610e6d5780601f10610e4257610100808354040283529160200191610e6d565b820191906000526020600020905b815481529060010190602001808311610e5057829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ece57600080fd5b505afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190613368565b6001600160a01b0316336001600160a01b031614610f365760405162461bcd60e51b81526004016101f790613649565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8457600080fd5b505afa158015610f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbc91906134e2565b81106110015760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016101f7565b8161100c5760045491505b603b82116110545760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016101f7565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b6110b3336108f5565b6110cf5760405162461bcd60e51b81526004016101f790613619565b610de5611e29565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461111f5760405162461bcd60e51b81526004016101f790613680565b6001600160a01b0381166111755760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016101f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111d857600080fd5b505afa1580156111ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112109190613368565b6001600160a01b03161461125f5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016101f7565b6001546040516370a0823160e01b81526112f89183916001600160a01b03909116906370a082319061129590309060040161357a565b60206040518083038186803b1580156112ad57600080fd5b505afa1580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e591906134e2565b6001546001600160a01b03169190611ff2565b610738817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611348919061357a565b60206040518083038186803b15801561136057600080fd5b505afa158015611374573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139891906134e2565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611ff2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561142257600080fd5b505afa158015611436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145a9190613368565b6001600160a01b0316336001600160a01b03161461148a5760405162461bcd60e51b81526004016101f790613649565b6001600160a01b0381166114e05760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016101f7565b6002546001600160a01b03828116911614156115365760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016101f7565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610da57f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166115cc5760006115d4565b6115d4612055565b6120d8565b6115e2336108f5565b6115fe5760405162461bcd60e51b81526004016101f790613619565b6002546001600160a01b031661164e5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016101f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156116d05760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016101f7565b6116d981610898565b1561171d5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016101f7565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561175d57600254611758906001600160a01b031647612240565b610738565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061178c90309060040161357a565b60206040518083038186803b1580156117a457600080fd5b505afa1580156117b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dc91906134e2565b6002549091506117f9906001600160a01b03848116911683611ff2565b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156118d5576040516370a0823160e01b81526118ce906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061187e90309060040161357a565b60206040518083038186803b15801561189657600080fd5b505afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d491906134e2565b9050610da8565b610da560006120d8565b60006118f4836001600160a01b038416612359565b90505b92915050565b60006118f4836001600160a01b0384166123a8565b61191b816124c5565b506107387f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611348919061357a565b6001600160a01b038116600090815260018301602052604081205415156118f4565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401611a00919061357a565b60206040518083038186803b158015611a1857600080fd5b505afa158015611a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5091906134e2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401611aa0919061357a565b60206040518083038186803b158015611ab857600080fd5b505afa158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af091906134e2565b9050611afb816125bb565b9450611b06816126d2565b9350611b1182612723565b92505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611b6990309060040161357a565b60206040518083038186803b158015611b8157600080fd5b505afa158015611b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb991906134e2565b9050801561073857600a5460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b158015611c0757600080fd5b505af1158015611c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3f91906134e2565b156107385760405162461bcd60e51b815260206004820152601a60248201527f6465706f7369742d746f2d636f6d706f756e642d6661696c656400000000000060448201526064016101f7565b60606000611c9983612734565b9392505050565b611ca981612790565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673b31f66aa3c1e785363f0875a1b74e27b85fd66c7146107385760005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3e57600080fd5b505afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7691906134e2565b8110156117f957600354604051636e74a6f760e01b815260048101839052611e17916001600160a01b031690636e74a6f79060240160206040518083038186803b158015611dc357600080fd5b505afa158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb9190613368565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c7908461299e565b80611e2181613817565b915050611cf0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615611f0b5760035460005460048054600554604051630f30f2d360e21b81526001600160a01b0395861695633cc3cb4c95611eb7957f000000000000000000000000000000000000000000000000000000000000000095929091169391920161358e565b602060405180830381600087803b158015611ed157600080fd5b505af1158015611ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f099190613368565b505b6000547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614610de55760035460005460048054600554604051630f30f2d360e21b81526001600160a01b0395861695633cc3cb4c95611fa0959116937f000000000000000000000000000000000000000000000000000000000000000093909290910161358e565b602060405180830381600087803b158015611fba57600080fd5b505af1158015611fce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190613368565b6040516001600160a01b038316602482015260448101829052610d9490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ac2565b600b546040516305b9783d60e01b81526000916001600160a01b0316906305b9783d9061208890849030906004016135ca565b60206040518083038186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906134e2565b600081156121af576003546040516340b4c54560e11b81526001600160a01b03909116906381698a8a90612157907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090879060009060040161358e565b60006040518083038186803b15801561216f57600080fd5b505afa158015612183573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121ab9190810190613384565b9150505b600a546040516370a0823160e01b8152612236916001600160a01b0316906370a08231906121e190309060040161357a565b60206040518083038186803b1580156121f957600080fd5b505afa15801561220d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223191906134e2565b612b94565b6108e89082613744565b804710156122905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101f7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146122dd576040519150601f19603f3d011682016040523d82523d6000602084013e6122e2565b606091505b5050905080610d945760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101f7565b60008181526001830160205260408120546123a0575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556118f7565b5060006118f7565b600081815260018301602052604081205480156124bb5760006123cc60018361379b565b85549091506000906123e09060019061379b565b905081811461246157600086600001828154811061240e57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061243f57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061248057634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506118f7565b60009150506118f7565b600a546040516370a0823160e01b815260009182916124fc916001600160a01b0316906370a08231906121e190309060040161357a565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561254e57600080fd5b505afa158015612562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258691906134e2565b905060008185106125975781612599565b845b90506125b28382106125ab57836125ad565b815b612c39565b95945050505050565b60006125e67f0000000000000000000000000000000000000000000000000000000000000000612d10565b600a546040516370a0823160e01b815260009161261d916001600160a01b03909116906370a08231906121e190309060040161357a565b905082811115612636576126346125ad848361379b565b505b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061268290309060040161357a565b60206040518083038186803b15801561269a57600080fd5b505afa1580156126ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9991906134e2565b600a546040516370a0823160e01b81526000918291612709916001600160a01b0316906370a08231906121e190309060040161357a565b90508281101561271d57611c99818461379b565b50919050565b600081156108eb576108e8826124c5565b60608160000180548060200260200160405190810160405280929190818152602001828054801561278457602002820191906000526020600020905b815481526020019060010190808311612770575b50505050509050919050565b6127e46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361299e565b600a5461281e906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361299e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156107385760005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561289e57600080fd5b505afa1580156128b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d691906134e2565b8110156117f957600354604051636e74a6f760e01b81526004810183905261298c916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561292357600080fd5b505afa158015612937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295b9190613368565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908461299e565b8061299681613817565b915050612850565b801580612a275750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156129ed57600080fd5b505afa158015612a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2591906134e2565b155b612a925760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101f7565b6040516001600160a01b038316602482015260448101829052610d9490849063095ea7b360e01b9060640161201e565b6000612b17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612f9b9092919063ffffffff16565b805190915015610d945780806020019051810190612b3591906134aa565b610d945760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101f7565b6000670de0b6b3a7640000600a60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612bed57600080fd5b505afa158015612c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2591906134e2565b612c2f908461377c565b6108e8919061375c565b60008115612d0c57600a5460405163852a12e360e01b8152600481018490526001600160a01b039091169063852a12e390602401602060405180830381600087803b158015612c8757600080fd5b505af1158015612c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbf91906134e2565b15612d0c5760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c656400000060448201526064016101f7565b5090565b604051630952c56360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630952c56390612d5f9060009030906004016135ca565b600060405180830381600087803b158015612d7957600080fd5b505af1158015612d8d573d6000803e3d6000fd5b5050604051630952c56360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250630952c5639150612de09060019030906004016135ca565b600060405180830381600087803b158015612dfa57600080fd5b505af1158015612e0e573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a0823190612e6190309060040161357a565b60206040518083038186803b158015612e7957600080fd5b505afa158015612e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb191906134e2565b90508015612ee657612ee67f000000000000000000000000000000000000000000000000000000000000000083836001612fb2565b478015610d945773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612f3c57600080fd5b505af1158015612f50573d6000803e3d6000fd5b505050506001600160a01b03841673b31f66aa3c1e785363f0875a1b74e27b85fd66c7149050610d9457610d9473b31f66aa3c1e785363f0875a1b74e27b85fd66c784836001612fb2565b6060612faa8484600085613173565b949350505050565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561300d57600080fd5b505afa158015613021573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261304991908101906133c9565b925092509250836000141561305d57600193505b811561316a57600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156130a757600080fd5b505afa1580156130bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130df9190613368565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b81526004016131129594939291906136b3565b600060405180830381600087803b15801561312c57600080fd5b505af1158015613140573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131689190810190613417565b505b50505050505050565b6060824710156131d45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101f7565b843b6132225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f7565b600080866001600160a01b0316858760405161323e919061355e565b60006040518083038185875af1925050503d806000811461327b576040519150601f19603f3d011682016040523d82523d6000602084013e613280565b606091505b509150915061329082828661329b565b979650505050505050565b606083156132aa575081611c99565b8251156132ba5782518084602001fd5b8160405162461bcd60e51b81526004016101f791906135e6565b600082601f8301126132e4578081fd5b815160206132f96132f483613720565b6136ef565b80838252828201915082860187848660051b8901011115613318578586fd5b855b8581101561333f57815161332d8161385e565b8452928401929084019060010161331a565b5090979650505050505050565b60006020828403121561335d578081fd5b8135611c998161385e565b600060208284031215613379578081fd5b8151611c998161385e565b60008060408385031215613396578081fd5b825167ffffffffffffffff8111156133ac578182fd5b6133b8858286016132d4565b925050602083015190509250929050565b6000806000606084860312156133dd578081fd5b835167ffffffffffffffff8111156133f3578182fd5b6133ff868287016132d4565b93505060208401519150604084015190509250925092565b60006020808385031215613429578182fd5b825167ffffffffffffffff81111561343f578283fd5b8301601f8101851361344f578283fd5b805161345d6132f482613720565b80828252848201915084840188868560051b870101111561347c578687fd5b8694505b8385101561349e578051835260019490940193918501918501613480565b50979650505050505050565b6000602082840312156134bb578081fd5b81518015158114611c99578182fd5b6000602082840312156134db578081fd5b5035919050565b6000602082840312156134f3578081fd5b5051919050565b6000806040838503121561350c578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156135535781516001600160a01b03168752958201959082019060010161352e565b509495945050505050565b600082516135708184602087016137b2565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602082526118f4602083018461351b565b60ff9290921682526001600160a01b0316602082015260400190565b60006020825282518060208401526136058160408501602087016137b2565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600086825285602083015260a060408301526136d260a083018661351b565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561371857613718613848565b604052919050565b600067ffffffffffffffff82111561373a5761373a613848565b5060051b60200190565b6000821982111561375757613757613832565b500190565b60008261377757634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561379657613796613832565b500290565b6000828210156137ad576137ad613832565b500390565b60005b838110156137cd5781810151838201526020016137b5565b838111156137dc576000848401525b50505050565b600181811c908216806137f657607f821691505b6020821081141561271d57634e487b7160e01b600052602260045260246000fd5b600060001982141561382b5761382b613832565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461073857600080fdfea2646970667358221220f39ae21a1464b58f3d9ebcb7aa57de5de32d5e998bda0f6f2b6f878b6fe67e8964736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Report total value in collateral token"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in a Compound Fork on avalanche and Earn Interest",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value using COMP accrued and cToken"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14867,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "WETH",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14872,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14878,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14881,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)5259"
      },
      {
        "astId": 14884,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 14887,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14890,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14893,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "_keepers",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)4299_storage"
      },
      {
        "astId": 22330,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "NAME",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 22336,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "cToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(CToken)5389"
      },
      {
        "astId": 22058,
        "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
        "label": "rewardDistributor",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CToken)5389": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)5259": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4299_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4298,
            "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3997,
            "contract": "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol:CompoundMultiRewardAvalancheStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}